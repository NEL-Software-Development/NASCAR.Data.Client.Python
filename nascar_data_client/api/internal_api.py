# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nascar_data_client.api_client import ApiClient


class InternalApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def internal_erdp_companies_get(self, **kwargs):  # noqa: E501
        """return list of company ids for erdp companies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_companies_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_erdp_companies_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.internal_erdp_companies_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def internal_erdp_companies_get_with_http_info(self, **kwargs):  # noqa: E501
        """return list of company ids for erdp companies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_companies_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_erdp_companies_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/internal/erdp/companies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_erdp_datapoints_get(self, **kwargs):  # noqa: E501
        """Get ERDP Datapoints  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_datapoints_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ERDPDatapoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_erdp_datapoints_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.internal_erdp_datapoints_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def internal_erdp_datapoints_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get ERDP Datapoints  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_datapoints_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ERDPDatapoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_erdp_datapoints_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/internal/erdp/datapoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ERDPDatapoint]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_erdp_datapoints_post(self, **kwargs):  # noqa: E501
        """Create ERDP Datapoints  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_datapoints_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ERDPDatapoint] body:
        :return: ERDPDatapointListETLSaveResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_erdp_datapoints_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.internal_erdp_datapoints_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def internal_erdp_datapoints_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create ERDP Datapoints  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_datapoints_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ERDPDatapoint] body:
        :return: ERDPDatapointListETLSaveResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_erdp_datapoints_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/internal/erdp/datapoints', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ERDPDatapointListETLSaveResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_erdp_ingestion_datapoints_get(self, **kwargs):  # noqa: E501
        """Called by the ingestion service for publishing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_ingestion_datapoints_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_not_active:
        :return: list[ERDPDatapoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_erdp_ingestion_datapoints_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.internal_erdp_ingestion_datapoints_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def internal_erdp_ingestion_datapoints_get_with_http_info(self, **kwargs):  # noqa: E501
        """Called by the ingestion service for publishing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_ingestion_datapoints_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_not_active:
        :return: list[ERDPDatapoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include_not_active']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_erdp_ingestion_datapoints_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_not_active' in params:
            query_params.append(('include_not_active', params['include_not_active']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/internal/erdp/ingestion_datapoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ERDPDatapoint]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_erdp_ingestion_sources_get(self, **kwargs):  # noqa: E501
        """Called by the ingestion service for publishing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_ingestion_sources_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_not_active:
        :return: list[ERDPSource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_erdp_ingestion_sources_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.internal_erdp_ingestion_sources_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def internal_erdp_ingestion_sources_get_with_http_info(self, **kwargs):  # noqa: E501
        """Called by the ingestion service for publishing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_ingestion_sources_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_not_active:
        :return: list[ERDPSource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include_not_active']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_erdp_ingestion_sources_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_not_active' in params:
            query_params.append(('include_not_active', params['include_not_active']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/internal/erdp/ingestion_sources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ERDPSource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_erdp_sources_get(self, **kwargs):  # noqa: E501
        """Get ERDP Sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_sources_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ERDPSource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_erdp_sources_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.internal_erdp_sources_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def internal_erdp_sources_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get ERDP Sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_sources_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ERDPSource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_erdp_sources_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/internal/erdp/sources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ERDPSource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_erdp_sources_post(self, **kwargs):  # noqa: E501
        """Create ERDP Sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_sources_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ERDPSource] body:
        :return: ERDPSourceListETLSaveResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_erdp_sources_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.internal_erdp_sources_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def internal_erdp_sources_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create ERDP Sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_sources_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ERDPSource] body:
        :return: ERDPSourceListETLSaveResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_erdp_sources_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/internal/erdp/sources', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ERDPSourceListETLSaveResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_erdp_subscriptions_auth_service_company_id_get(self, company_id, **kwargs):  # noqa: E501
        """nats auth service calls with company id, returns the topics that the company is allowed to sub on  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_subscriptions_auth_service_company_id_get(company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: (required)
        :return: ERDPUserPermissions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_erdp_subscriptions_auth_service_company_id_get_with_http_info(company_id, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_erdp_subscriptions_auth_service_company_id_get_with_http_info(company_id, **kwargs)  # noqa: E501
            return data

    def internal_erdp_subscriptions_auth_service_company_id_get_with_http_info(self, company_id, **kwargs):  # noqa: E501
        """nats auth service calls with company id, returns the topics that the company is allowed to sub on  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_subscriptions_auth_service_company_id_get_with_http_info(company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: (required)
        :return: ERDPUserPermissions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_erdp_subscriptions_auth_service_company_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `internal_erdp_subscriptions_auth_service_company_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/internal/erdp/subscriptions/auth_service/{companyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ERDPUserPermissions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_erdp_subscriptions_company_id_get(self, company_id, **kwargs):  # noqa: E501
        """Get Subscriptions by company id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_subscriptions_company_id_get(company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: (required)
        :param int offset:
        :param int count:
        :param str filter:
        :param bool allowed:
        :return: ERDPSubscriptionPaginatedResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_erdp_subscriptions_company_id_get_with_http_info(company_id, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_erdp_subscriptions_company_id_get_with_http_info(company_id, **kwargs)  # noqa: E501
            return data

    def internal_erdp_subscriptions_company_id_get_with_http_info(self, company_id, **kwargs):  # noqa: E501
        """Get Subscriptions by company id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_subscriptions_company_id_get_with_http_info(company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: (required)
        :param int offset:
        :param int count:
        :param str filter:
        :param bool allowed:
        :return: ERDPSubscriptionPaginatedResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'offset', 'count', 'filter', 'allowed']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_erdp_subscriptions_company_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `internal_erdp_subscriptions_company_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'allowed' in params:
            query_params.append(('allowed', params['allowed']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/internal/erdp/subscriptions/{companyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ERDPSubscriptionPaginatedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_erdp_subscriptions_post(self, **kwargs):  # noqa: E501
        """Create erdp subscriptions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_subscriptions_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CreateSubscription] body:
        :return: CreateSubscriptionListETLSaveResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_erdp_subscriptions_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.internal_erdp_subscriptions_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def internal_erdp_subscriptions_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create erdp subscriptions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_subscriptions_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CreateSubscription] body:
        :return: CreateSubscriptionListETLSaveResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_erdp_subscriptions_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/internal/erdp/subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateSubscriptionListETLSaveResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_erdp_topic_company_types_company_type_id_get(self, company_type_id, **kwargs):  # noqa: E501
        """Get Topic Company Types by company id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_topic_company_types_company_type_id_get(company_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_type_id: (required)
        :return: list[ERDPTopic]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_erdp_topic_company_types_company_type_id_get_with_http_info(company_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_erdp_topic_company_types_company_type_id_get_with_http_info(company_type_id, **kwargs)  # noqa: E501
            return data

    def internal_erdp_topic_company_types_company_type_id_get_with_http_info(self, company_type_id, **kwargs):  # noqa: E501
        """Get Topic Company Types by company id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_topic_company_types_company_type_id_get_with_http_info(company_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_type_id: (required)
        :return: list[ERDPTopic]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_erdp_topic_company_types_company_type_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_type_id' is set
        if ('company_type_id' not in params or
                params['company_type_id'] is None):
            raise ValueError("Missing the required parameter `company_type_id` when calling `internal_erdp_topic_company_types_company_type_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'company_type_id' in params:
            path_params['company_type_id'] = params['company_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/internal/erdp/topic_company_types/{company_type_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ERDPTopic]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_erdp_topic_company_types_get(self, **kwargs):  # noqa: E501
        """Get Topic Company Types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_topic_company_types_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count:
        :param int offset:
        :param str filter:
        :return: ERDPTopicCompanyTypePaginatedResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_erdp_topic_company_types_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.internal_erdp_topic_company_types_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def internal_erdp_topic_company_types_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Topic Company Types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_topic_company_types_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count:
        :param int offset:
        :param str filter:
        :return: ERDPTopicCompanyTypePaginatedResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['count', 'offset', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_erdp_topic_company_types_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/internal/erdp/topic_company_types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ERDPTopicCompanyTypePaginatedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_erdp_topic_company_types_post(self, **kwargs):  # noqa: E501
        """Create Topic Company Types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_topic_company_types_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CreateTopicCompanyType] body:
        :return: ERDPTopicCompanyTypeListETLSaveResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_erdp_topic_company_types_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.internal_erdp_topic_company_types_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def internal_erdp_topic_company_types_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create Topic Company Types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_topic_company_types_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CreateTopicCompanyType] body:
        :return: ERDPTopicCompanyTypeListETLSaveResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_erdp_topic_company_types_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/internal/erdp/topic_company_types', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ERDPTopicCompanyTypeListETLSaveResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_erdp_topics_get(self, **kwargs):  # noqa: E501
        """Get Topics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_topics_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count:
        :param int offset:
        :param str filter:
        :return: ERDPTopicPaginatedResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_erdp_topics_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.internal_erdp_topics_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def internal_erdp_topics_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Topics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_topics_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count:
        :param int offset:
        :param str filter:
        :return: ERDPTopicPaginatedResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['count', 'offset', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_erdp_topics_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/internal/erdp/topics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ERDPTopicPaginatedResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_erdp_topics_post(self, **kwargs):  # noqa: E501
        """Create Topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_topics_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CreateTopic] body:
        :return: CreateTopicListETLSaveResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_erdp_topics_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.internal_erdp_topics_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def internal_erdp_topics_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create Topic  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_topics_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CreateTopic] body:
        :return: CreateTopicListETLSaveResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_erdp_topics_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/internal/erdp/topics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateTopicListETLSaveResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_erdp_vehicle_sources_get(self, **kwargs):  # noqa: E501
        """Get vehicle sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_vehicle_sources_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ERDPSourceVehicle]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_erdp_vehicle_sources_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.internal_erdp_vehicle_sources_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def internal_erdp_vehicle_sources_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get vehicle sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_vehicle_sources_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ERDPSourceVehicle]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_erdp_vehicle_sources_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/internal/erdp/vehicle_sources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ERDPSourceVehicle]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_erdp_vehicle_sources_post(self, **kwargs):  # noqa: E501
        """Create vehicle sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_vehicle_sources_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ERDPSourceVehicle] body:
        :return: ERDPSourceVehicleListETLSaveResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_erdp_vehicle_sources_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.internal_erdp_vehicle_sources_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def internal_erdp_vehicle_sources_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create vehicle sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_erdp_vehicle_sources_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ERDPSourceVehicle] body:
        :return: ERDPSourceVehicleListETLSaveResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_erdp_vehicle_sources_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/internal/erdp/vehicle_sources', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ERDPSourceVehicleListETLSaveResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_tires_get(self, **kwargs):  # noqa: E501
        """tire service get tire data for enhanced tire data to nats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_tires_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Tire]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_tires_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.internal_tires_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def internal_tires_get_with_http_info(self, **kwargs):  # noqa: E501
        """tire service get tire data for enhanced tire data to nats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_tires_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Tire]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_tires_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/internal/tires', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Tire]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
