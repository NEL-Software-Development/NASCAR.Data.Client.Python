# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nascar_data_client.api_client import ApiClient


class RaceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def race_cautions_get(self, **kwargs):  # noqa: E501
        """race_cautions_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_cautions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[Caution]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.race_cautions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.race_cautions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def race_cautions_get_with_http_info(self, **kwargs):  # noqa: E501
        """race_cautions_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_cautions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[Caution]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['race_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method race_cautions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'race_id' in params:
            query_params.append(('race_id', params['race_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/race/cautions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Caution]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def race_discipline_updates_get(self, **kwargs):  # noqa: E501
        """race_discipline_updates_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_discipline_updates_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[DisciplineUpdate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.race_discipline_updates_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.race_discipline_updates_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def race_discipline_updates_get_with_http_info(self, **kwargs):  # noqa: E501
        """race_discipline_updates_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_discipline_updates_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[DisciplineUpdate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['race_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method race_discipline_updates_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'race_id' in params:
            query_params.append(('race_id', params['race_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/race/discipline-updates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DisciplineUpdate]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def race_entries_get(self, **kwargs):  # noqa: E501
        """race_entries_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_entries_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[RunEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.race_entries_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.race_entries_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def race_entries_get_with_http_info(self, **kwargs):  # noqa: E501
        """race_entries_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_entries_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[RunEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['race_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method race_entries_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'race_id' in params:
            query_params.append(('race_id', params['race_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/race/entries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RunEntry]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def race_get(self, **kwargs):  # noqa: E501
        """race_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: RaceDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.race_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.race_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def race_get_with_http_info(self, **kwargs):  # noqa: E501
        """race_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: RaceDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['race_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method race_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'race_id' in params:
            query_params.append(('race_id', params['race_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/race', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RaceDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def race_infractions_get(self, **kwargs):  # noqa: E501
        """race_infractions_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_infractions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[RaceInfraction]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.race_infractions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.race_infractions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def race_infractions_get_with_http_info(self, **kwargs):  # noqa: E501
        """race_infractions_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_infractions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[RaceInfraction]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['race_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method race_infractions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'race_id' in params:
            query_params.append(('race_id', params['race_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/race/infractions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RaceInfraction]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def race_lap_leaders_get(self, **kwargs):  # noqa: E501
        """race_lap_leaders_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_lap_leaders_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[LapLeader]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.race_lap_leaders_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.race_lap_leaders_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def race_lap_leaders_get_with_http_info(self, **kwargs):  # noqa: E501
        """race_lap_leaders_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_lap_leaders_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[LapLeader]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['race_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method race_lap_leaders_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'race_id' in params:
            query_params.append(('race_id', params['race_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/race/lap-leaders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LapLeader]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def race_loop_stats_get(self, **kwargs):  # noqa: E501
        """race_loop_stats_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_loop_stats_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[LoopStat]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.race_loop_stats_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.race_loop_stats_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def race_loop_stats_get_with_http_info(self, **kwargs):  # noqa: E501
        """race_loop_stats_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_loop_stats_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[LoopStat]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['race_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method race_loop_stats_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'race_id' in params:
            query_params.append(('race_id', params['race_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/race/loop-stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LoopStat]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def race_pitstops_get(self, **kwargs):  # noqa: E501
        """race_pitstops_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_pitstops_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[Pitstop]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.race_pitstops_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.race_pitstops_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def race_pitstops_get_with_http_info(self, **kwargs):  # noqa: E501
        """race_pitstops_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_pitstops_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[Pitstop]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['race_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method race_pitstops_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'race_id' in params:
            query_params.append(('race_id', params['race_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/race/pitstops', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Pitstop]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def race_practice_results_get(self, **kwargs):  # noqa: E501
        """race_practice_results_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_practice_results_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[PracticeRunResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.race_practice_results_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.race_practice_results_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def race_practice_results_get_with_http_info(self, **kwargs):  # noqa: E501
        """race_practice_results_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_practice_results_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[PracticeRunResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['race_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method race_practice_results_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'race_id' in params:
            query_params.append(('race_id', params['race_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/race/practice-results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PracticeRunResults]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def race_qualifying_results_get(self, **kwargs):  # noqa: E501
        """race_qualifying_results_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_qualifying_results_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[QualifyingRunResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.race_qualifying_results_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.race_qualifying_results_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def race_qualifying_results_get_with_http_info(self, **kwargs):  # noqa: E501
        """race_qualifying_results_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_qualifying_results_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[QualifyingRunResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['race_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method race_qualifying_results_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'race_id' in params:
            query_params.append(('race_id', params['race_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/race/qualifying-results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualifyingRunResults]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def race_race_results_get(self, **kwargs):  # noqa: E501
        """race_race_results_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_race_results_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[RaceRunResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.race_race_results_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.race_race_results_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def race_race_results_get_with_http_info(self, **kwargs):  # noqa: E501
        """race_race_results_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_race_results_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[RaceRunResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['race_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method race_race_results_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'race_id' in params:
            query_params.append(('race_id', params['race_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/race/race-results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RaceRunResults]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def race_rosters_get(self, **kwargs):  # noqa: E501
        """race_rosters_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_rosters_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[TeamRoster]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.race_rosters_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.race_rosters_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def race_rosters_get_with_http_info(self, **kwargs):  # noqa: E501
        """race_rosters_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_rosters_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[TeamRoster]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['race_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method race_rosters_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'race_id' in params:
            query_params.append(('race_id', params['race_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/race/rosters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TeamRoster]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def race_season_get(self, **kwargs):  # noqa: E501
        """race_season_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_season_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int season:
        :param int series_id:
        :return: list[list[Race]]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.race_season_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.race_season_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def race_season_get_with_http_info(self, **kwargs):  # noqa: E501
        """race_season_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_season_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int season:
        :param int series_id:
        :return: list[list[Race]]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['season', 'series_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method race_season_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'season' in params:
            query_params.append(('season', params['season']))  # noqa: E501
        if 'series_id' in params:
            query_params.append(('series_id', params['series_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/race/season', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[list[Race]]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def race_stage_results_get(self, **kwargs):  # noqa: E501
        """race_stage_results_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_stage_results_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[StageRunResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.race_stage_results_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.race_stage_results_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def race_stage_results_get_with_http_info(self, **kwargs):  # noqa: E501
        """race_stage_results_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_stage_results_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[StageRunResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['race_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method race_stage_results_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'race_id' in params:
            query_params.append(('race_id', params['race_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/race/stage-results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StageRunResults]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def race_viewmodel_get(self, **kwargs):  # noqa: E501
        """race_viewmodel_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_viewmodel_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: RaceViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.race_viewmodel_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.race_viewmodel_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def race_viewmodel_get_with_http_info(self, **kwargs):  # noqa: E501
        """race_viewmodel_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_viewmodel_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: RaceViewModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['race_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method race_viewmodel_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'race_id' in params:
            query_params.append(('race_id', params['race_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/race/viewmodel', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RaceViewModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def race_weekend_schedule_get(self, **kwargs):  # noqa: E501
        """race_weekend_schedule_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_weekend_schedule_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[WeekendSchedule]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.race_weekend_schedule_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.race_weekend_schedule_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def race_weekend_schedule_get_with_http_info(self, **kwargs):  # noqa: E501
        """race_weekend_schedule_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.race_weekend_schedule_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int race_id:
        :return: list[WeekendSchedule]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['race_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method race_weekend_schedule_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'race_id' in params:
            query_params.append(('race_id', params['race_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/race/weekend-schedule', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WeekendSchedule]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
