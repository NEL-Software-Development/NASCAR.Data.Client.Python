# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DisciplineUpdateMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'publish_state': 'PublishState',
        'id': 'int',
        'tracking_id': 'str',
        'in_data_warehouse': 'bool',
        'manually_set': 'bool',
        'last_update': 'datetime',
        'last_updated_by': 'str',
        'nascar_one_race_id': 'int',
        'inspection_type': 'str',
        'discipline': 'str',
        'vehicle_number': 'str',
        'chassis_id': 'str'
    }

    attribute_map = {
        'publish_state': 'PublishState',
        'id': 'id',
        'tracking_id': 'tracking_id',
        'in_data_warehouse': 'InDataWarehouse',
        'manually_set': 'Manually_Set',
        'last_update': 'LastUpdate',
        'last_updated_by': 'LastUpdatedBy',
        'nascar_one_race_id': 'NascarOne_RaceId',
        'inspection_type': 'InspectionType',
        'discipline': 'Discipline',
        'vehicle_number': 'VehicleNumber',
        'chassis_id': 'ChassisId'
    }

    def __init__(self, publish_state=None, id=None, tracking_id=None, in_data_warehouse=None, manually_set=None, last_update=None, last_updated_by=None, nascar_one_race_id=None, inspection_type=None, discipline=None, vehicle_number=None, chassis_id=None):  # noqa: E501
        """DisciplineUpdateMapping - a model defined in Swagger"""  # noqa: E501
        self._publish_state = None
        self._id = None
        self._tracking_id = None
        self._in_data_warehouse = None
        self._manually_set = None
        self._last_update = None
        self._last_updated_by = None
        self._nascar_one_race_id = None
        self._inspection_type = None
        self._discipline = None
        self._vehicle_number = None
        self._chassis_id = None
        self.discriminator = None
        if publish_state is not None:
            self.publish_state = publish_state
        if id is not None:
            self.id = id
        if tracking_id is not None:
            self.tracking_id = tracking_id
        if in_data_warehouse is not None:
            self.in_data_warehouse = in_data_warehouse
        if manually_set is not None:
            self.manually_set = manually_set
        if last_update is not None:
            self.last_update = last_update
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if nascar_one_race_id is not None:
            self.nascar_one_race_id = nascar_one_race_id
        if inspection_type is not None:
            self.inspection_type = inspection_type
        if discipline is not None:
            self.discipline = discipline
        if vehicle_number is not None:
            self.vehicle_number = vehicle_number
        if chassis_id is not None:
            self.chassis_id = chassis_id

    @property
    def publish_state(self):
        """Gets the publish_state of this DisciplineUpdateMapping.  # noqa: E501


        :return: The publish_state of this DisciplineUpdateMapping.  # noqa: E501
        :rtype: PublishState
        """
        return self._publish_state

    @publish_state.setter
    def publish_state(self, publish_state):
        """Sets the publish_state of this DisciplineUpdateMapping.


        :param publish_state: The publish_state of this DisciplineUpdateMapping.  # noqa: E501
        :type: PublishState
        """

        self._publish_state = publish_state

    @property
    def id(self):
        """Gets the id of this DisciplineUpdateMapping.  # noqa: E501


        :return: The id of this DisciplineUpdateMapping.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DisciplineUpdateMapping.


        :param id: The id of this DisciplineUpdateMapping.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tracking_id(self):
        """Gets the tracking_id of this DisciplineUpdateMapping.  # noqa: E501


        :return: The tracking_id of this DisciplineUpdateMapping.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this DisciplineUpdateMapping.


        :param tracking_id: The tracking_id of this DisciplineUpdateMapping.  # noqa: E501
        :type: str
        """

        self._tracking_id = tracking_id

    @property
    def in_data_warehouse(self):
        """Gets the in_data_warehouse of this DisciplineUpdateMapping.  # noqa: E501


        :return: The in_data_warehouse of this DisciplineUpdateMapping.  # noqa: E501
        :rtype: bool
        """
        return self._in_data_warehouse

    @in_data_warehouse.setter
    def in_data_warehouse(self, in_data_warehouse):
        """Sets the in_data_warehouse of this DisciplineUpdateMapping.


        :param in_data_warehouse: The in_data_warehouse of this DisciplineUpdateMapping.  # noqa: E501
        :type: bool
        """

        self._in_data_warehouse = in_data_warehouse

    @property
    def manually_set(self):
        """Gets the manually_set of this DisciplineUpdateMapping.  # noqa: E501


        :return: The manually_set of this DisciplineUpdateMapping.  # noqa: E501
        :rtype: bool
        """
        return self._manually_set

    @manually_set.setter
    def manually_set(self, manually_set):
        """Sets the manually_set of this DisciplineUpdateMapping.


        :param manually_set: The manually_set of this DisciplineUpdateMapping.  # noqa: E501
        :type: bool
        """

        self._manually_set = manually_set

    @property
    def last_update(self):
        """Gets the last_update of this DisciplineUpdateMapping.  # noqa: E501


        :return: The last_update of this DisciplineUpdateMapping.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this DisciplineUpdateMapping.


        :param last_update: The last_update of this DisciplineUpdateMapping.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this DisciplineUpdateMapping.  # noqa: E501


        :return: The last_updated_by of this DisciplineUpdateMapping.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this DisciplineUpdateMapping.


        :param last_updated_by: The last_updated_by of this DisciplineUpdateMapping.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def nascar_one_race_id(self):
        """Gets the nascar_one_race_id of this DisciplineUpdateMapping.  # noqa: E501


        :return: The nascar_one_race_id of this DisciplineUpdateMapping.  # noqa: E501
        :rtype: int
        """
        return self._nascar_one_race_id

    @nascar_one_race_id.setter
    def nascar_one_race_id(self, nascar_one_race_id):
        """Sets the nascar_one_race_id of this DisciplineUpdateMapping.


        :param nascar_one_race_id: The nascar_one_race_id of this DisciplineUpdateMapping.  # noqa: E501
        :type: int
        """

        self._nascar_one_race_id = nascar_one_race_id

    @property
    def inspection_type(self):
        """Gets the inspection_type of this DisciplineUpdateMapping.  # noqa: E501


        :return: The inspection_type of this DisciplineUpdateMapping.  # noqa: E501
        :rtype: str
        """
        return self._inspection_type

    @inspection_type.setter
    def inspection_type(self, inspection_type):
        """Sets the inspection_type of this DisciplineUpdateMapping.


        :param inspection_type: The inspection_type of this DisciplineUpdateMapping.  # noqa: E501
        :type: str
        """

        self._inspection_type = inspection_type

    @property
    def discipline(self):
        """Gets the discipline of this DisciplineUpdateMapping.  # noqa: E501


        :return: The discipline of this DisciplineUpdateMapping.  # noqa: E501
        :rtype: str
        """
        return self._discipline

    @discipline.setter
    def discipline(self, discipline):
        """Sets the discipline of this DisciplineUpdateMapping.


        :param discipline: The discipline of this DisciplineUpdateMapping.  # noqa: E501
        :type: str
        """

        self._discipline = discipline

    @property
    def vehicle_number(self):
        """Gets the vehicle_number of this DisciplineUpdateMapping.  # noqa: E501


        :return: The vehicle_number of this DisciplineUpdateMapping.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_number

    @vehicle_number.setter
    def vehicle_number(self, vehicle_number):
        """Sets the vehicle_number of this DisciplineUpdateMapping.


        :param vehicle_number: The vehicle_number of this DisciplineUpdateMapping.  # noqa: E501
        :type: str
        """

        self._vehicle_number = vehicle_number

    @property
    def chassis_id(self):
        """Gets the chassis_id of this DisciplineUpdateMapping.  # noqa: E501


        :return: The chassis_id of this DisciplineUpdateMapping.  # noqa: E501
        :rtype: str
        """
        return self._chassis_id

    @chassis_id.setter
    def chassis_id(self, chassis_id):
        """Sets the chassis_id of this DisciplineUpdateMapping.


        :param chassis_id: The chassis_id of this DisciplineUpdateMapping.  # noqa: E501
        :type: str
        """

        self._chassis_id = chassis_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DisciplineUpdateMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DisciplineUpdateMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
