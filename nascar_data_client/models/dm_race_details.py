# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DMRaceDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'race_week_id': 'int',
        'series_id': 'int',
        'nascar_one_track_id': 'int',
        'history_track_id': 'int',
        'history_race_id': 'int',
        'history_master_race_id': 'int',
        'name': 'str',
        'promoter': 'str',
        'laps': 'int',
        'distance': 'float',
        '_date': 'datetime',
        'comments': 'str',
        'points_are_set': 'bool',
        'is_complete': 'bool',
        'flags': 'list[FlagMapping]',
        'runs': 'list[RunMapping]',
        'run_entries': 'list[ExtendedRunEntry]'
    }

    attribute_map = {
        'race_week_id': 'RaceWeekId',
        'series_id': 'SeriesId',
        'nascar_one_track_id': 'NascarOne_TrackId',
        'history_track_id': 'History_TrackId',
        'history_race_id': 'History_RaceId',
        'history_master_race_id': 'History_MasterRaceId',
        'name': 'Name',
        'promoter': 'Promoter',
        'laps': 'Laps',
        'distance': 'Distance',
        '_date': 'Date',
        'comments': 'Comments',
        'points_are_set': 'PointsAreSet',
        'is_complete': 'IsComplete',
        'flags': 'Flags',
        'runs': 'Runs',
        'run_entries': 'Run_Entries'
    }

    def __init__(self, race_week_id=None, series_id=None, nascar_one_track_id=None, history_track_id=None, history_race_id=None, history_master_race_id=None, name=None, promoter=None, laps=None, distance=None, _date=None, comments=None, points_are_set=None, is_complete=None, flags=None, runs=None, run_entries=None):  # noqa: E501
        """DMRaceDetails - a model defined in Swagger"""  # noqa: E501
        self._race_week_id = None
        self._series_id = None
        self._nascar_one_track_id = None
        self._history_track_id = None
        self._history_race_id = None
        self._history_master_race_id = None
        self._name = None
        self._promoter = None
        self._laps = None
        self._distance = None
        self.__date = None
        self._comments = None
        self._points_are_set = None
        self._is_complete = None
        self._flags = None
        self._runs = None
        self._run_entries = None
        self.discriminator = None
        if race_week_id is not None:
            self.race_week_id = race_week_id
        if series_id is not None:
            self.series_id = series_id
        if nascar_one_track_id is not None:
            self.nascar_one_track_id = nascar_one_track_id
        if history_track_id is not None:
            self.history_track_id = history_track_id
        if history_race_id is not None:
            self.history_race_id = history_race_id
        if history_master_race_id is not None:
            self.history_master_race_id = history_master_race_id
        if name is not None:
            self.name = name
        if promoter is not None:
            self.promoter = promoter
        if laps is not None:
            self.laps = laps
        if distance is not None:
            self.distance = distance
        if _date is not None:
            self._date = _date
        if comments is not None:
            self.comments = comments
        if points_are_set is not None:
            self.points_are_set = points_are_set
        if is_complete is not None:
            self.is_complete = is_complete
        if flags is not None:
            self.flags = flags
        if runs is not None:
            self.runs = runs
        if run_entries is not None:
            self.run_entries = run_entries

    @property
    def race_week_id(self):
        """Gets the race_week_id of this DMRaceDetails.  # noqa: E501


        :return: The race_week_id of this DMRaceDetails.  # noqa: E501
        :rtype: int
        """
        return self._race_week_id

    @race_week_id.setter
    def race_week_id(self, race_week_id):
        """Sets the race_week_id of this DMRaceDetails.


        :param race_week_id: The race_week_id of this DMRaceDetails.  # noqa: E501
        :type: int
        """

        self._race_week_id = race_week_id

    @property
    def series_id(self):
        """Gets the series_id of this DMRaceDetails.  # noqa: E501


        :return: The series_id of this DMRaceDetails.  # noqa: E501
        :rtype: int
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """Sets the series_id of this DMRaceDetails.


        :param series_id: The series_id of this DMRaceDetails.  # noqa: E501
        :type: int
        """

        self._series_id = series_id

    @property
    def nascar_one_track_id(self):
        """Gets the nascar_one_track_id of this DMRaceDetails.  # noqa: E501


        :return: The nascar_one_track_id of this DMRaceDetails.  # noqa: E501
        :rtype: int
        """
        return self._nascar_one_track_id

    @nascar_one_track_id.setter
    def nascar_one_track_id(self, nascar_one_track_id):
        """Sets the nascar_one_track_id of this DMRaceDetails.


        :param nascar_one_track_id: The nascar_one_track_id of this DMRaceDetails.  # noqa: E501
        :type: int
        """

        self._nascar_one_track_id = nascar_one_track_id

    @property
    def history_track_id(self):
        """Gets the history_track_id of this DMRaceDetails.  # noqa: E501


        :return: The history_track_id of this DMRaceDetails.  # noqa: E501
        :rtype: int
        """
        return self._history_track_id

    @history_track_id.setter
    def history_track_id(self, history_track_id):
        """Sets the history_track_id of this DMRaceDetails.


        :param history_track_id: The history_track_id of this DMRaceDetails.  # noqa: E501
        :type: int
        """

        self._history_track_id = history_track_id

    @property
    def history_race_id(self):
        """Gets the history_race_id of this DMRaceDetails.  # noqa: E501


        :return: The history_race_id of this DMRaceDetails.  # noqa: E501
        :rtype: int
        """
        return self._history_race_id

    @history_race_id.setter
    def history_race_id(self, history_race_id):
        """Sets the history_race_id of this DMRaceDetails.


        :param history_race_id: The history_race_id of this DMRaceDetails.  # noqa: E501
        :type: int
        """

        self._history_race_id = history_race_id

    @property
    def history_master_race_id(self):
        """Gets the history_master_race_id of this DMRaceDetails.  # noqa: E501


        :return: The history_master_race_id of this DMRaceDetails.  # noqa: E501
        :rtype: int
        """
        return self._history_master_race_id

    @history_master_race_id.setter
    def history_master_race_id(self, history_master_race_id):
        """Sets the history_master_race_id of this DMRaceDetails.


        :param history_master_race_id: The history_master_race_id of this DMRaceDetails.  # noqa: E501
        :type: int
        """

        self._history_master_race_id = history_master_race_id

    @property
    def name(self):
        """Gets the name of this DMRaceDetails.  # noqa: E501


        :return: The name of this DMRaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DMRaceDetails.


        :param name: The name of this DMRaceDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def promoter(self):
        """Gets the promoter of this DMRaceDetails.  # noqa: E501


        :return: The promoter of this DMRaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._promoter

    @promoter.setter
    def promoter(self, promoter):
        """Sets the promoter of this DMRaceDetails.


        :param promoter: The promoter of this DMRaceDetails.  # noqa: E501
        :type: str
        """

        self._promoter = promoter

    @property
    def laps(self):
        """Gets the laps of this DMRaceDetails.  # noqa: E501


        :return: The laps of this DMRaceDetails.  # noqa: E501
        :rtype: int
        """
        return self._laps

    @laps.setter
    def laps(self, laps):
        """Sets the laps of this DMRaceDetails.


        :param laps: The laps of this DMRaceDetails.  # noqa: E501
        :type: int
        """

        self._laps = laps

    @property
    def distance(self):
        """Gets the distance of this DMRaceDetails.  # noqa: E501


        :return: The distance of this DMRaceDetails.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this DMRaceDetails.


        :param distance: The distance of this DMRaceDetails.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def _date(self):
        """Gets the _date of this DMRaceDetails.  # noqa: E501


        :return: The _date of this DMRaceDetails.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DMRaceDetails.


        :param _date: The _date of this DMRaceDetails.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def comments(self):
        """Gets the comments of this DMRaceDetails.  # noqa: E501


        :return: The comments of this DMRaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this DMRaceDetails.


        :param comments: The comments of this DMRaceDetails.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def points_are_set(self):
        """Gets the points_are_set of this DMRaceDetails.  # noqa: E501


        :return: The points_are_set of this DMRaceDetails.  # noqa: E501
        :rtype: bool
        """
        return self._points_are_set

    @points_are_set.setter
    def points_are_set(self, points_are_set):
        """Sets the points_are_set of this DMRaceDetails.


        :param points_are_set: The points_are_set of this DMRaceDetails.  # noqa: E501
        :type: bool
        """

        self._points_are_set = points_are_set

    @property
    def is_complete(self):
        """Gets the is_complete of this DMRaceDetails.  # noqa: E501


        :return: The is_complete of this DMRaceDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_complete

    @is_complete.setter
    def is_complete(self, is_complete):
        """Sets the is_complete of this DMRaceDetails.


        :param is_complete: The is_complete of this DMRaceDetails.  # noqa: E501
        :type: bool
        """

        self._is_complete = is_complete

    @property
    def flags(self):
        """Gets the flags of this DMRaceDetails.  # noqa: E501


        :return: The flags of this DMRaceDetails.  # noqa: E501
        :rtype: list[FlagMapping]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this DMRaceDetails.


        :param flags: The flags of this DMRaceDetails.  # noqa: E501
        :type: list[FlagMapping]
        """

        self._flags = flags

    @property
    def runs(self):
        """Gets the runs of this DMRaceDetails.  # noqa: E501


        :return: The runs of this DMRaceDetails.  # noqa: E501
        :rtype: list[RunMapping]
        """
        return self._runs

    @runs.setter
    def runs(self, runs):
        """Sets the runs of this DMRaceDetails.


        :param runs: The runs of this DMRaceDetails.  # noqa: E501
        :type: list[RunMapping]
        """

        self._runs = runs

    @property
    def run_entries(self):
        """Gets the run_entries of this DMRaceDetails.  # noqa: E501


        :return: The run_entries of this DMRaceDetails.  # noqa: E501
        :rtype: list[ExtendedRunEntry]
        """
        return self._run_entries

    @run_entries.setter
    def run_entries(self, run_entries):
        """Sets the run_entries of this DMRaceDetails.


        :param run_entries: The run_entries of this DMRaceDetails.  # noqa: E501
        :type: list[ExtendedRunEntry]
        """

        self._run_entries = run_entries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DMRaceDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DMRaceDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
