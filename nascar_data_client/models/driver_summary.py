# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DriverSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'driver': 'Driver',
        'summary_by_principal_race_i_ds': 'list[DriverSummaryByPrincipalRaceID]',
        'summary_by_season': 'DriverSummaryBySeason',
        'summary_by_tracks': 'list[DriverSummaryByTrack]',
        'summary_by_track_types': 'list[DriverSummaryByTrackType]'
    }

    attribute_map = {
        'driver': 'Driver',
        'summary_by_principal_race_i_ds': 'Summary_ByPrincipalRaceIDs',
        'summary_by_season': 'Summary_BySeason',
        'summary_by_tracks': 'Summary_ByTracks',
        'summary_by_track_types': 'Summary_ByTrackTypes'
    }

    def __init__(self, driver=None, summary_by_principal_race_i_ds=None, summary_by_season=None, summary_by_tracks=None, summary_by_track_types=None):  # noqa: E501
        """DriverSummary - a model defined in Swagger"""  # noqa: E501
        self._driver = None
        self._summary_by_principal_race_i_ds = None
        self._summary_by_season = None
        self._summary_by_tracks = None
        self._summary_by_track_types = None
        self.discriminator = None
        if driver is not None:
            self.driver = driver
        if summary_by_principal_race_i_ds is not None:
            self.summary_by_principal_race_i_ds = summary_by_principal_race_i_ds
        if summary_by_season is not None:
            self.summary_by_season = summary_by_season
        if summary_by_tracks is not None:
            self.summary_by_tracks = summary_by_tracks
        if summary_by_track_types is not None:
            self.summary_by_track_types = summary_by_track_types

    @property
    def driver(self):
        """Gets the driver of this DriverSummary.  # noqa: E501


        :return: The driver of this DriverSummary.  # noqa: E501
        :rtype: Driver
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this DriverSummary.


        :param driver: The driver of this DriverSummary.  # noqa: E501
        :type: Driver
        """

        self._driver = driver

    @property
    def summary_by_principal_race_i_ds(self):
        """Gets the summary_by_principal_race_i_ds of this DriverSummary.  # noqa: E501

        Principal race summaries  # noqa: E501

        :return: The summary_by_principal_race_i_ds of this DriverSummary.  # noqa: E501
        :rtype: list[DriverSummaryByPrincipalRaceID]
        """
        return self._summary_by_principal_race_i_ds

    @summary_by_principal_race_i_ds.setter
    def summary_by_principal_race_i_ds(self, summary_by_principal_race_i_ds):
        """Sets the summary_by_principal_race_i_ds of this DriverSummary.

        Principal race summaries  # noqa: E501

        :param summary_by_principal_race_i_ds: The summary_by_principal_race_i_ds of this DriverSummary.  # noqa: E501
        :type: list[DriverSummaryByPrincipalRaceID]
        """

        self._summary_by_principal_race_i_ds = summary_by_principal_race_i_ds

    @property
    def summary_by_season(self):
        """Gets the summary_by_season of this DriverSummary.  # noqa: E501


        :return: The summary_by_season of this DriverSummary.  # noqa: E501
        :rtype: DriverSummaryBySeason
        """
        return self._summary_by_season

    @summary_by_season.setter
    def summary_by_season(self, summary_by_season):
        """Sets the summary_by_season of this DriverSummary.


        :param summary_by_season: The summary_by_season of this DriverSummary.  # noqa: E501
        :type: DriverSummaryBySeason
        """

        self._summary_by_season = summary_by_season

    @property
    def summary_by_tracks(self):
        """Gets the summary_by_tracks of this DriverSummary.  # noqa: E501

        Track summaries  # noqa: E501

        :return: The summary_by_tracks of this DriverSummary.  # noqa: E501
        :rtype: list[DriverSummaryByTrack]
        """
        return self._summary_by_tracks

    @summary_by_tracks.setter
    def summary_by_tracks(self, summary_by_tracks):
        """Sets the summary_by_tracks of this DriverSummary.

        Track summaries  # noqa: E501

        :param summary_by_tracks: The summary_by_tracks of this DriverSummary.  # noqa: E501
        :type: list[DriverSummaryByTrack]
        """

        self._summary_by_tracks = summary_by_tracks

    @property
    def summary_by_track_types(self):
        """Gets the summary_by_track_types of this DriverSummary.  # noqa: E501

        Track type summaries  # noqa: E501

        :return: The summary_by_track_types of this DriverSummary.  # noqa: E501
        :rtype: list[DriverSummaryByTrackType]
        """
        return self._summary_by_track_types

    @summary_by_track_types.setter
    def summary_by_track_types(self, summary_by_track_types):
        """Sets the summary_by_track_types of this DriverSummary.

        Track type summaries  # noqa: E501

        :param summary_by_track_types: The summary_by_track_types of this DriverSummary.  # noqa: E501
        :type: list[DriverSummaryByTrackType]
        """

        self._summary_by_track_types = summary_by_track_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DriverSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DriverSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
