# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class EditorCaution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'publish_state': 'PublishState',
        'id': 'int',
        'tracking_id': 'str',
        'in_data_warehouse': 'bool',
        'manually_set': 'bool',
        'last_update': 'datetime',
        'last_updated_by': 'str',
        'lap_start': 'int',
        'lap_end': 'int',
        'beneficiary': 'str',
        'comment': 'str',
        'reason': 'str',
        'flag_time': 'datetime',
        'nascar_one_race_id': 'int',
        'timing_run_id': 'int',
        'racing_caution_id': 'int'
    }

    attribute_map = {
        'publish_state': 'PublishState',
        'id': 'id',
        'tracking_id': 'tracking_id',
        'in_data_warehouse': 'InDataWarehouse',
        'manually_set': 'Manually_Set',
        'last_update': 'LastUpdate',
        'last_updated_by': 'LastUpdatedBy',
        'lap_start': 'LapStart',
        'lap_end': 'LapEnd',
        'beneficiary': 'Beneficiary',
        'comment': 'Comment',
        'reason': 'Reason',
        'flag_time': 'FlagTime',
        'nascar_one_race_id': 'NascarOne_RaceId',
        'timing_run_id': 'Timing_RunId',
        'racing_caution_id': 'Racing_CautionId'
    }

    def __init__(self, publish_state=None, id=None, tracking_id=None, in_data_warehouse=None, manually_set=None, last_update=None, last_updated_by=None, lap_start=None, lap_end=None, beneficiary=None, comment=None, reason=None, flag_time=None, nascar_one_race_id=None, timing_run_id=None, racing_caution_id=None):  # noqa: E501
        """EditorCaution - a model defined in Swagger"""  # noqa: E501
        self._publish_state = None
        self._id = None
        self._tracking_id = None
        self._in_data_warehouse = None
        self._manually_set = None
        self._last_update = None
        self._last_updated_by = None
        self._lap_start = None
        self._lap_end = None
        self._beneficiary = None
        self._comment = None
        self._reason = None
        self._flag_time = None
        self._nascar_one_race_id = None
        self._timing_run_id = None
        self._racing_caution_id = None
        self.discriminator = None
        if publish_state is not None:
            self.publish_state = publish_state
        if id is not None:
            self.id = id
        if tracking_id is not None:
            self.tracking_id = tracking_id
        if in_data_warehouse is not None:
            self.in_data_warehouse = in_data_warehouse
        if manually_set is not None:
            self.manually_set = manually_set
        if last_update is not None:
            self.last_update = last_update
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if lap_start is not None:
            self.lap_start = lap_start
        if lap_end is not None:
            self.lap_end = lap_end
        if beneficiary is not None:
            self.beneficiary = beneficiary
        if comment is not None:
            self.comment = comment
        if reason is not None:
            self.reason = reason
        if flag_time is not None:
            self.flag_time = flag_time
        if nascar_one_race_id is not None:
            self.nascar_one_race_id = nascar_one_race_id
        if timing_run_id is not None:
            self.timing_run_id = timing_run_id
        if racing_caution_id is not None:
            self.racing_caution_id = racing_caution_id

    @property
    def publish_state(self):
        """Gets the publish_state of this EditorCaution.  # noqa: E501


        :return: The publish_state of this EditorCaution.  # noqa: E501
        :rtype: PublishState
        """
        return self._publish_state

    @publish_state.setter
    def publish_state(self, publish_state):
        """Sets the publish_state of this EditorCaution.


        :param publish_state: The publish_state of this EditorCaution.  # noqa: E501
        :type: PublishState
        """

        self._publish_state = publish_state

    @property
    def id(self):
        """Gets the id of this EditorCaution.  # noqa: E501


        :return: The id of this EditorCaution.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EditorCaution.


        :param id: The id of this EditorCaution.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tracking_id(self):
        """Gets the tracking_id of this EditorCaution.  # noqa: E501


        :return: The tracking_id of this EditorCaution.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this EditorCaution.


        :param tracking_id: The tracking_id of this EditorCaution.  # noqa: E501
        :type: str
        """

        self._tracking_id = tracking_id

    @property
    def in_data_warehouse(self):
        """Gets the in_data_warehouse of this EditorCaution.  # noqa: E501


        :return: The in_data_warehouse of this EditorCaution.  # noqa: E501
        :rtype: bool
        """
        return self._in_data_warehouse

    @in_data_warehouse.setter
    def in_data_warehouse(self, in_data_warehouse):
        """Sets the in_data_warehouse of this EditorCaution.


        :param in_data_warehouse: The in_data_warehouse of this EditorCaution.  # noqa: E501
        :type: bool
        """

        self._in_data_warehouse = in_data_warehouse

    @property
    def manually_set(self):
        """Gets the manually_set of this EditorCaution.  # noqa: E501


        :return: The manually_set of this EditorCaution.  # noqa: E501
        :rtype: bool
        """
        return self._manually_set

    @manually_set.setter
    def manually_set(self, manually_set):
        """Sets the manually_set of this EditorCaution.


        :param manually_set: The manually_set of this EditorCaution.  # noqa: E501
        :type: bool
        """

        self._manually_set = manually_set

    @property
    def last_update(self):
        """Gets the last_update of this EditorCaution.  # noqa: E501


        :return: The last_update of this EditorCaution.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this EditorCaution.


        :param last_update: The last_update of this EditorCaution.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this EditorCaution.  # noqa: E501


        :return: The last_updated_by of this EditorCaution.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this EditorCaution.


        :param last_updated_by: The last_updated_by of this EditorCaution.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def lap_start(self):
        """Gets the lap_start of this EditorCaution.  # noqa: E501


        :return: The lap_start of this EditorCaution.  # noqa: E501
        :rtype: int
        """
        return self._lap_start

    @lap_start.setter
    def lap_start(self, lap_start):
        """Sets the lap_start of this EditorCaution.


        :param lap_start: The lap_start of this EditorCaution.  # noqa: E501
        :type: int
        """

        self._lap_start = lap_start

    @property
    def lap_end(self):
        """Gets the lap_end of this EditorCaution.  # noqa: E501


        :return: The lap_end of this EditorCaution.  # noqa: E501
        :rtype: int
        """
        return self._lap_end

    @lap_end.setter
    def lap_end(self, lap_end):
        """Sets the lap_end of this EditorCaution.


        :param lap_end: The lap_end of this EditorCaution.  # noqa: E501
        :type: int
        """

        self._lap_end = lap_end

    @property
    def beneficiary(self):
        """Gets the beneficiary of this EditorCaution.  # noqa: E501


        :return: The beneficiary of this EditorCaution.  # noqa: E501
        :rtype: str
        """
        return self._beneficiary

    @beneficiary.setter
    def beneficiary(self, beneficiary):
        """Sets the beneficiary of this EditorCaution.


        :param beneficiary: The beneficiary of this EditorCaution.  # noqa: E501
        :type: str
        """

        self._beneficiary = beneficiary

    @property
    def comment(self):
        """Gets the comment of this EditorCaution.  # noqa: E501


        :return: The comment of this EditorCaution.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this EditorCaution.


        :param comment: The comment of this EditorCaution.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def reason(self):
        """Gets the reason of this EditorCaution.  # noqa: E501


        :return: The reason of this EditorCaution.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this EditorCaution.


        :param reason: The reason of this EditorCaution.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def flag_time(self):
        """Gets the flag_time of this EditorCaution.  # noqa: E501


        :return: The flag_time of this EditorCaution.  # noqa: E501
        :rtype: datetime
        """
        return self._flag_time

    @flag_time.setter
    def flag_time(self, flag_time):
        """Sets the flag_time of this EditorCaution.


        :param flag_time: The flag_time of this EditorCaution.  # noqa: E501
        :type: datetime
        """

        self._flag_time = flag_time

    @property
    def nascar_one_race_id(self):
        """Gets the nascar_one_race_id of this EditorCaution.  # noqa: E501


        :return: The nascar_one_race_id of this EditorCaution.  # noqa: E501
        :rtype: int
        """
        return self._nascar_one_race_id

    @nascar_one_race_id.setter
    def nascar_one_race_id(self, nascar_one_race_id):
        """Sets the nascar_one_race_id of this EditorCaution.


        :param nascar_one_race_id: The nascar_one_race_id of this EditorCaution.  # noqa: E501
        :type: int
        """

        self._nascar_one_race_id = nascar_one_race_id

    @property
    def timing_run_id(self):
        """Gets the timing_run_id of this EditorCaution.  # noqa: E501


        :return: The timing_run_id of this EditorCaution.  # noqa: E501
        :rtype: int
        """
        return self._timing_run_id

    @timing_run_id.setter
    def timing_run_id(self, timing_run_id):
        """Sets the timing_run_id of this EditorCaution.


        :param timing_run_id: The timing_run_id of this EditorCaution.  # noqa: E501
        :type: int
        """

        self._timing_run_id = timing_run_id

    @property
    def racing_caution_id(self):
        """Gets the racing_caution_id of this EditorCaution.  # noqa: E501


        :return: The racing_caution_id of this EditorCaution.  # noqa: E501
        :rtype: int
        """
        return self._racing_caution_id

    @racing_caution_id.setter
    def racing_caution_id(self, racing_caution_id):
        """Sets the racing_caution_id of this EditorCaution.


        :param racing_caution_id: The racing_caution_id of this EditorCaution.  # noqa: E501
        :type: int
        """

        self._racing_caution_id = racing_caution_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditorCaution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditorCaution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
