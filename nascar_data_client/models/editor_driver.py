# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class EditorDriver(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'publish_state': 'PublishState',
        'id': 'int',
        'tracking_id': 'str',
        'in_data_warehouse': 'bool',
        'manually_set': 'bool',
        'last_update': 'datetime',
        'last_updated_by': 'str',
        'name': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'suffix': 'str',
        'history_driver_id': 'int',
        'membership_id': 'int',
        'nascar_one_contact_id': 'int',
        'resides_city': 'str',
        'resides_state': 'str',
        'resides_country': 'str',
        'home_town': 'str',
        'home_state': 'str',
        'home_country': 'str',
        'hobbies': 'str',
        'series_1_rookie_year': 'int',
        'series_2_rookie_year': 'int',
        'series_3_rookie_year': 'int',
        'dob': 'datetime',
        'dod': 'datetime',
        'head_shot': 'str'
    }

    attribute_map = {
        'publish_state': 'PublishState',
        'id': 'id',
        'tracking_id': 'tracking_id',
        'in_data_warehouse': 'InDataWarehouse',
        'manually_set': 'Manually_Set',
        'last_update': 'LastUpdate',
        'last_updated_by': 'LastUpdatedBy',
        'name': 'Name',
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'suffix': 'Suffix',
        'history_driver_id': 'History_DriverId',
        'membership_id': 'MembershipId',
        'nascar_one_contact_id': 'NascarOne_ContactId',
        'resides_city': 'ResidesCity',
        'resides_state': 'ResidesState',
        'resides_country': 'ResidesCountry',
        'home_town': 'HomeTown',
        'home_state': 'HomeState',
        'home_country': 'HomeCountry',
        'hobbies': 'Hobbies',
        'series_1_rookie_year': 'Series_1_Rookie_Year',
        'series_2_rookie_year': 'Series_2_Rookie_Year',
        'series_3_rookie_year': 'Series_3_Rookie_Year',
        'dob': 'DOB',
        'dod': 'DOD',
        'head_shot': 'HeadShot'
    }

    def __init__(self, publish_state=None, id=None, tracking_id=None, in_data_warehouse=None, manually_set=None, last_update=None, last_updated_by=None, name=None, first_name=None, last_name=None, suffix=None, history_driver_id=None, membership_id=None, nascar_one_contact_id=None, resides_city=None, resides_state=None, resides_country=None, home_town=None, home_state=None, home_country=None, hobbies=None, series_1_rookie_year=None, series_2_rookie_year=None, series_3_rookie_year=None, dob=None, dod=None, head_shot=None):  # noqa: E501
        """EditorDriver - a model defined in Swagger"""  # noqa: E501
        self._publish_state = None
        self._id = None
        self._tracking_id = None
        self._in_data_warehouse = None
        self._manually_set = None
        self._last_update = None
        self._last_updated_by = None
        self._name = None
        self._first_name = None
        self._last_name = None
        self._suffix = None
        self._history_driver_id = None
        self._membership_id = None
        self._nascar_one_contact_id = None
        self._resides_city = None
        self._resides_state = None
        self._resides_country = None
        self._home_town = None
        self._home_state = None
        self._home_country = None
        self._hobbies = None
        self._series_1_rookie_year = None
        self._series_2_rookie_year = None
        self._series_3_rookie_year = None
        self._dob = None
        self._dod = None
        self._head_shot = None
        self.discriminator = None
        if publish_state is not None:
            self.publish_state = publish_state
        if id is not None:
            self.id = id
        if tracking_id is not None:
            self.tracking_id = tracking_id
        if in_data_warehouse is not None:
            self.in_data_warehouse = in_data_warehouse
        if manually_set is not None:
            self.manually_set = manually_set
        if last_update is not None:
            self.last_update = last_update
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if name is not None:
            self.name = name
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if suffix is not None:
            self.suffix = suffix
        if history_driver_id is not None:
            self.history_driver_id = history_driver_id
        if membership_id is not None:
            self.membership_id = membership_id
        if nascar_one_contact_id is not None:
            self.nascar_one_contact_id = nascar_one_contact_id
        if resides_city is not None:
            self.resides_city = resides_city
        if resides_state is not None:
            self.resides_state = resides_state
        if resides_country is not None:
            self.resides_country = resides_country
        if home_town is not None:
            self.home_town = home_town
        if home_state is not None:
            self.home_state = home_state
        if home_country is not None:
            self.home_country = home_country
        if hobbies is not None:
            self.hobbies = hobbies
        if series_1_rookie_year is not None:
            self.series_1_rookie_year = series_1_rookie_year
        if series_2_rookie_year is not None:
            self.series_2_rookie_year = series_2_rookie_year
        if series_3_rookie_year is not None:
            self.series_3_rookie_year = series_3_rookie_year
        if dob is not None:
            self.dob = dob
        if dod is not None:
            self.dod = dod
        if head_shot is not None:
            self.head_shot = head_shot

    @property
    def publish_state(self):
        """Gets the publish_state of this EditorDriver.  # noqa: E501


        :return: The publish_state of this EditorDriver.  # noqa: E501
        :rtype: PublishState
        """
        return self._publish_state

    @publish_state.setter
    def publish_state(self, publish_state):
        """Sets the publish_state of this EditorDriver.


        :param publish_state: The publish_state of this EditorDriver.  # noqa: E501
        :type: PublishState
        """

        self._publish_state = publish_state

    @property
    def id(self):
        """Gets the id of this EditorDriver.  # noqa: E501


        :return: The id of this EditorDriver.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EditorDriver.


        :param id: The id of this EditorDriver.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tracking_id(self):
        """Gets the tracking_id of this EditorDriver.  # noqa: E501


        :return: The tracking_id of this EditorDriver.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this EditorDriver.


        :param tracking_id: The tracking_id of this EditorDriver.  # noqa: E501
        :type: str
        """

        self._tracking_id = tracking_id

    @property
    def in_data_warehouse(self):
        """Gets the in_data_warehouse of this EditorDriver.  # noqa: E501


        :return: The in_data_warehouse of this EditorDriver.  # noqa: E501
        :rtype: bool
        """
        return self._in_data_warehouse

    @in_data_warehouse.setter
    def in_data_warehouse(self, in_data_warehouse):
        """Sets the in_data_warehouse of this EditorDriver.


        :param in_data_warehouse: The in_data_warehouse of this EditorDriver.  # noqa: E501
        :type: bool
        """

        self._in_data_warehouse = in_data_warehouse

    @property
    def manually_set(self):
        """Gets the manually_set of this EditorDriver.  # noqa: E501


        :return: The manually_set of this EditorDriver.  # noqa: E501
        :rtype: bool
        """
        return self._manually_set

    @manually_set.setter
    def manually_set(self, manually_set):
        """Sets the manually_set of this EditorDriver.


        :param manually_set: The manually_set of this EditorDriver.  # noqa: E501
        :type: bool
        """

        self._manually_set = manually_set

    @property
    def last_update(self):
        """Gets the last_update of this EditorDriver.  # noqa: E501


        :return: The last_update of this EditorDriver.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this EditorDriver.


        :param last_update: The last_update of this EditorDriver.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this EditorDriver.  # noqa: E501


        :return: The last_updated_by of this EditorDriver.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this EditorDriver.


        :param last_updated_by: The last_updated_by of this EditorDriver.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def name(self):
        """Gets the name of this EditorDriver.  # noqa: E501


        :return: The name of this EditorDriver.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EditorDriver.


        :param name: The name of this EditorDriver.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def first_name(self):
        """Gets the first_name of this EditorDriver.  # noqa: E501


        :return: The first_name of this EditorDriver.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this EditorDriver.


        :param first_name: The first_name of this EditorDriver.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this EditorDriver.  # noqa: E501


        :return: The last_name of this EditorDriver.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this EditorDriver.


        :param last_name: The last_name of this EditorDriver.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def suffix(self):
        """Gets the suffix of this EditorDriver.  # noqa: E501


        :return: The suffix of this EditorDriver.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this EditorDriver.


        :param suffix: The suffix of this EditorDriver.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def history_driver_id(self):
        """Gets the history_driver_id of this EditorDriver.  # noqa: E501


        :return: The history_driver_id of this EditorDriver.  # noqa: E501
        :rtype: int
        """
        return self._history_driver_id

    @history_driver_id.setter
    def history_driver_id(self, history_driver_id):
        """Sets the history_driver_id of this EditorDriver.


        :param history_driver_id: The history_driver_id of this EditorDriver.  # noqa: E501
        :type: int
        """

        self._history_driver_id = history_driver_id

    @property
    def membership_id(self):
        """Gets the membership_id of this EditorDriver.  # noqa: E501


        :return: The membership_id of this EditorDriver.  # noqa: E501
        :rtype: int
        """
        return self._membership_id

    @membership_id.setter
    def membership_id(self, membership_id):
        """Sets the membership_id of this EditorDriver.


        :param membership_id: The membership_id of this EditorDriver.  # noqa: E501
        :type: int
        """

        self._membership_id = membership_id

    @property
    def nascar_one_contact_id(self):
        """Gets the nascar_one_contact_id of this EditorDriver.  # noqa: E501


        :return: The nascar_one_contact_id of this EditorDriver.  # noqa: E501
        :rtype: int
        """
        return self._nascar_one_contact_id

    @nascar_one_contact_id.setter
    def nascar_one_contact_id(self, nascar_one_contact_id):
        """Sets the nascar_one_contact_id of this EditorDriver.


        :param nascar_one_contact_id: The nascar_one_contact_id of this EditorDriver.  # noqa: E501
        :type: int
        """

        self._nascar_one_contact_id = nascar_one_contact_id

    @property
    def resides_city(self):
        """Gets the resides_city of this EditorDriver.  # noqa: E501


        :return: The resides_city of this EditorDriver.  # noqa: E501
        :rtype: str
        """
        return self._resides_city

    @resides_city.setter
    def resides_city(self, resides_city):
        """Sets the resides_city of this EditorDriver.


        :param resides_city: The resides_city of this EditorDriver.  # noqa: E501
        :type: str
        """

        self._resides_city = resides_city

    @property
    def resides_state(self):
        """Gets the resides_state of this EditorDriver.  # noqa: E501


        :return: The resides_state of this EditorDriver.  # noqa: E501
        :rtype: str
        """
        return self._resides_state

    @resides_state.setter
    def resides_state(self, resides_state):
        """Sets the resides_state of this EditorDriver.


        :param resides_state: The resides_state of this EditorDriver.  # noqa: E501
        :type: str
        """

        self._resides_state = resides_state

    @property
    def resides_country(self):
        """Gets the resides_country of this EditorDriver.  # noqa: E501


        :return: The resides_country of this EditorDriver.  # noqa: E501
        :rtype: str
        """
        return self._resides_country

    @resides_country.setter
    def resides_country(self, resides_country):
        """Sets the resides_country of this EditorDriver.


        :param resides_country: The resides_country of this EditorDriver.  # noqa: E501
        :type: str
        """

        self._resides_country = resides_country

    @property
    def home_town(self):
        """Gets the home_town of this EditorDriver.  # noqa: E501


        :return: The home_town of this EditorDriver.  # noqa: E501
        :rtype: str
        """
        return self._home_town

    @home_town.setter
    def home_town(self, home_town):
        """Sets the home_town of this EditorDriver.


        :param home_town: The home_town of this EditorDriver.  # noqa: E501
        :type: str
        """

        self._home_town = home_town

    @property
    def home_state(self):
        """Gets the home_state of this EditorDriver.  # noqa: E501


        :return: The home_state of this EditorDriver.  # noqa: E501
        :rtype: str
        """
        return self._home_state

    @home_state.setter
    def home_state(self, home_state):
        """Sets the home_state of this EditorDriver.


        :param home_state: The home_state of this EditorDriver.  # noqa: E501
        :type: str
        """

        self._home_state = home_state

    @property
    def home_country(self):
        """Gets the home_country of this EditorDriver.  # noqa: E501


        :return: The home_country of this EditorDriver.  # noqa: E501
        :rtype: str
        """
        return self._home_country

    @home_country.setter
    def home_country(self, home_country):
        """Sets the home_country of this EditorDriver.


        :param home_country: The home_country of this EditorDriver.  # noqa: E501
        :type: str
        """

        self._home_country = home_country

    @property
    def hobbies(self):
        """Gets the hobbies of this EditorDriver.  # noqa: E501


        :return: The hobbies of this EditorDriver.  # noqa: E501
        :rtype: str
        """
        return self._hobbies

    @hobbies.setter
    def hobbies(self, hobbies):
        """Sets the hobbies of this EditorDriver.


        :param hobbies: The hobbies of this EditorDriver.  # noqa: E501
        :type: str
        """

        self._hobbies = hobbies

    @property
    def series_1_rookie_year(self):
        """Gets the series_1_rookie_year of this EditorDriver.  # noqa: E501


        :return: The series_1_rookie_year of this EditorDriver.  # noqa: E501
        :rtype: int
        """
        return self._series_1_rookie_year

    @series_1_rookie_year.setter
    def series_1_rookie_year(self, series_1_rookie_year):
        """Sets the series_1_rookie_year of this EditorDriver.


        :param series_1_rookie_year: The series_1_rookie_year of this EditorDriver.  # noqa: E501
        :type: int
        """

        self._series_1_rookie_year = series_1_rookie_year

    @property
    def series_2_rookie_year(self):
        """Gets the series_2_rookie_year of this EditorDriver.  # noqa: E501


        :return: The series_2_rookie_year of this EditorDriver.  # noqa: E501
        :rtype: int
        """
        return self._series_2_rookie_year

    @series_2_rookie_year.setter
    def series_2_rookie_year(self, series_2_rookie_year):
        """Sets the series_2_rookie_year of this EditorDriver.


        :param series_2_rookie_year: The series_2_rookie_year of this EditorDriver.  # noqa: E501
        :type: int
        """

        self._series_2_rookie_year = series_2_rookie_year

    @property
    def series_3_rookie_year(self):
        """Gets the series_3_rookie_year of this EditorDriver.  # noqa: E501


        :return: The series_3_rookie_year of this EditorDriver.  # noqa: E501
        :rtype: int
        """
        return self._series_3_rookie_year

    @series_3_rookie_year.setter
    def series_3_rookie_year(self, series_3_rookie_year):
        """Sets the series_3_rookie_year of this EditorDriver.


        :param series_3_rookie_year: The series_3_rookie_year of this EditorDriver.  # noqa: E501
        :type: int
        """

        self._series_3_rookie_year = series_3_rookie_year

    @property
    def dob(self):
        """Gets the dob of this EditorDriver.  # noqa: E501


        :return: The dob of this EditorDriver.  # noqa: E501
        :rtype: datetime
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this EditorDriver.


        :param dob: The dob of this EditorDriver.  # noqa: E501
        :type: datetime
        """

        self._dob = dob

    @property
    def dod(self):
        """Gets the dod of this EditorDriver.  # noqa: E501


        :return: The dod of this EditorDriver.  # noqa: E501
        :rtype: datetime
        """
        return self._dod

    @dod.setter
    def dod(self, dod):
        """Sets the dod of this EditorDriver.


        :param dod: The dod of this EditorDriver.  # noqa: E501
        :type: datetime
        """

        self._dod = dod

    @property
    def head_shot(self):
        """Gets the head_shot of this EditorDriver.  # noqa: E501


        :return: The head_shot of this EditorDriver.  # noqa: E501
        :rtype: str
        """
        return self._head_shot

    @head_shot.setter
    def head_shot(self, head_shot):
        """Sets the head_shot of this EditorDriver.


        :param head_shot: The head_shot of this EditorDriver.  # noqa: E501
        :type: str
        """

        self._head_shot = head_shot

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditorDriver, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditorDriver):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
