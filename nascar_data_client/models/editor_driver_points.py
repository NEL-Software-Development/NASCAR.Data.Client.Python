# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class EditorDriverPoints(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'publish_state': 'PublishState',
        'id': 'int',
        'tracking_id': 'str',
        'in_data_warehouse': 'bool',
        'manually_set': 'bool',
        'last_update': 'datetime',
        'last_updated_by': 'str',
        'nascar_one_race_id': 'int',
        'history_race_id': 'int',
        'history_driver_id': 'int',
        'driver_member_id': 'int',
        'position': 'int',
        'driver': 'str',
        'points': 'int',
        'playoff_points': 'int',
        'playoff_rank': 'int',
        'delta_leader': 'int',
        'delta_next': 'int',
        'delta_playoff': 'int',
        'projected_playoff_points': 'int',
        'starts': 'int',
        'poles': 'int',
        'wins': 'int',
        'stage1_wins': 'int',
        'stage2_wins': 'int',
        'stage3_wins': 'int',
        'stage_points': 'int',
        'playoff_race_wins': 'int',
        'playoff_stage_wins': 'int',
        'points_earned_this_race': 'int',
        'stage_points_earned_this_race': 'int',
        'playoff_points_earned_this_race': 'int',
        'points_penalized_this_race': 'int',
        'playoff_points_penalized_this_race': 'int',
        'top5': 'int',
        'top10': 'int',
        'laps_led': 'int',
        'dn_fs': 'int',
        'is_clinch': 'bool',
        'in_playoffs': 'bool',
        'made_playoffs': 'bool',
        'highest_round': 'int'
    }

    attribute_map = {
        'publish_state': 'PublishState',
        'id': 'id',
        'tracking_id': 'tracking_id',
        'in_data_warehouse': 'InDataWarehouse',
        'manually_set': 'Manually_Set',
        'last_update': 'LastUpdate',
        'last_updated_by': 'LastUpdatedBy',
        'nascar_one_race_id': 'NascarOne_RaceId',
        'history_race_id': 'History_RaceId',
        'history_driver_id': 'History_DriverId',
        'driver_member_id': 'DriverMemberId',
        'position': 'Position',
        'driver': 'Driver',
        'points': 'Points',
        'playoff_points': 'PlayoffPoints',
        'playoff_rank': 'PlayoffRank',
        'delta_leader': 'DeltaLeader',
        'delta_next': 'DeltaNext',
        'delta_playoff': 'DeltaPlayoff',
        'projected_playoff_points': 'ProjectedPlayoffPoints',
        'starts': 'Starts',
        'poles': 'Poles',
        'wins': 'Wins',
        'stage1_wins': 'Stage1Wins',
        'stage2_wins': 'Stage2Wins',
        'stage3_wins': 'Stage3Wins',
        'stage_points': 'StagePoints',
        'playoff_race_wins': 'PlayoffRaceWins',
        'playoff_stage_wins': 'PlayoffStageWins',
        'points_earned_this_race': 'PointsEarnedThisRace',
        'stage_points_earned_this_race': 'StagePointsEarnedThisRace',
        'playoff_points_earned_this_race': 'PlayoffPointsEarnedThisRace',
        'points_penalized_this_race': 'PointsPenalizedThisRace',
        'playoff_points_penalized_this_race': 'PlayoffPointsPenalizedThisRace',
        'top5': 'Top5',
        'top10': 'Top10',
        'laps_led': 'LapsLed',
        'dn_fs': 'DNFs',
        'is_clinch': 'IsClinch',
        'in_playoffs': 'InPlayoffs',
        'made_playoffs': 'MadePlayoffs',
        'highest_round': 'HighestRound'
    }

    def __init__(self, publish_state=None, id=None, tracking_id=None, in_data_warehouse=None, manually_set=None, last_update=None, last_updated_by=None, nascar_one_race_id=None, history_race_id=None, history_driver_id=None, driver_member_id=None, position=None, driver=None, points=None, playoff_points=None, playoff_rank=None, delta_leader=None, delta_next=None, delta_playoff=None, projected_playoff_points=None, starts=None, poles=None, wins=None, stage1_wins=None, stage2_wins=None, stage3_wins=None, stage_points=None, playoff_race_wins=None, playoff_stage_wins=None, points_earned_this_race=None, stage_points_earned_this_race=None, playoff_points_earned_this_race=None, points_penalized_this_race=None, playoff_points_penalized_this_race=None, top5=None, top10=None, laps_led=None, dn_fs=None, is_clinch=None, in_playoffs=None, made_playoffs=None, highest_round=None):  # noqa: E501
        """EditorDriverPoints - a model defined in Swagger"""  # noqa: E501
        self._publish_state = None
        self._id = None
        self._tracking_id = None
        self._in_data_warehouse = None
        self._manually_set = None
        self._last_update = None
        self._last_updated_by = None
        self._nascar_one_race_id = None
        self._history_race_id = None
        self._history_driver_id = None
        self._driver_member_id = None
        self._position = None
        self._driver = None
        self._points = None
        self._playoff_points = None
        self._playoff_rank = None
        self._delta_leader = None
        self._delta_next = None
        self._delta_playoff = None
        self._projected_playoff_points = None
        self._starts = None
        self._poles = None
        self._wins = None
        self._stage1_wins = None
        self._stage2_wins = None
        self._stage3_wins = None
        self._stage_points = None
        self._playoff_race_wins = None
        self._playoff_stage_wins = None
        self._points_earned_this_race = None
        self._stage_points_earned_this_race = None
        self._playoff_points_earned_this_race = None
        self._points_penalized_this_race = None
        self._playoff_points_penalized_this_race = None
        self._top5 = None
        self._top10 = None
        self._laps_led = None
        self._dn_fs = None
        self._is_clinch = None
        self._in_playoffs = None
        self._made_playoffs = None
        self._highest_round = None
        self.discriminator = None
        if publish_state is not None:
            self.publish_state = publish_state
        if id is not None:
            self.id = id
        if tracking_id is not None:
            self.tracking_id = tracking_id
        if in_data_warehouse is not None:
            self.in_data_warehouse = in_data_warehouse
        if manually_set is not None:
            self.manually_set = manually_set
        if last_update is not None:
            self.last_update = last_update
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if nascar_one_race_id is not None:
            self.nascar_one_race_id = nascar_one_race_id
        if history_race_id is not None:
            self.history_race_id = history_race_id
        if history_driver_id is not None:
            self.history_driver_id = history_driver_id
        if driver_member_id is not None:
            self.driver_member_id = driver_member_id
        if position is not None:
            self.position = position
        if driver is not None:
            self.driver = driver
        if points is not None:
            self.points = points
        if playoff_points is not None:
            self.playoff_points = playoff_points
        if playoff_rank is not None:
            self.playoff_rank = playoff_rank
        if delta_leader is not None:
            self.delta_leader = delta_leader
        if delta_next is not None:
            self.delta_next = delta_next
        if delta_playoff is not None:
            self.delta_playoff = delta_playoff
        if projected_playoff_points is not None:
            self.projected_playoff_points = projected_playoff_points
        if starts is not None:
            self.starts = starts
        if poles is not None:
            self.poles = poles
        if wins is not None:
            self.wins = wins
        if stage1_wins is not None:
            self.stage1_wins = stage1_wins
        if stage2_wins is not None:
            self.stage2_wins = stage2_wins
        if stage3_wins is not None:
            self.stage3_wins = stage3_wins
        if stage_points is not None:
            self.stage_points = stage_points
        if playoff_race_wins is not None:
            self.playoff_race_wins = playoff_race_wins
        if playoff_stage_wins is not None:
            self.playoff_stage_wins = playoff_stage_wins
        if points_earned_this_race is not None:
            self.points_earned_this_race = points_earned_this_race
        if stage_points_earned_this_race is not None:
            self.stage_points_earned_this_race = stage_points_earned_this_race
        if playoff_points_earned_this_race is not None:
            self.playoff_points_earned_this_race = playoff_points_earned_this_race
        if points_penalized_this_race is not None:
            self.points_penalized_this_race = points_penalized_this_race
        if playoff_points_penalized_this_race is not None:
            self.playoff_points_penalized_this_race = playoff_points_penalized_this_race
        if top5 is not None:
            self.top5 = top5
        if top10 is not None:
            self.top10 = top10
        if laps_led is not None:
            self.laps_led = laps_led
        if dn_fs is not None:
            self.dn_fs = dn_fs
        if is_clinch is not None:
            self.is_clinch = is_clinch
        if in_playoffs is not None:
            self.in_playoffs = in_playoffs
        if made_playoffs is not None:
            self.made_playoffs = made_playoffs
        if highest_round is not None:
            self.highest_round = highest_round

    @property
    def publish_state(self):
        """Gets the publish_state of this EditorDriverPoints.  # noqa: E501


        :return: The publish_state of this EditorDriverPoints.  # noqa: E501
        :rtype: PublishState
        """
        return self._publish_state

    @publish_state.setter
    def publish_state(self, publish_state):
        """Sets the publish_state of this EditorDriverPoints.


        :param publish_state: The publish_state of this EditorDriverPoints.  # noqa: E501
        :type: PublishState
        """

        self._publish_state = publish_state

    @property
    def id(self):
        """Gets the id of this EditorDriverPoints.  # noqa: E501


        :return: The id of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EditorDriverPoints.


        :param id: The id of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tracking_id(self):
        """Gets the tracking_id of this EditorDriverPoints.  # noqa: E501


        :return: The tracking_id of this EditorDriverPoints.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this EditorDriverPoints.


        :param tracking_id: The tracking_id of this EditorDriverPoints.  # noqa: E501
        :type: str
        """

        self._tracking_id = tracking_id

    @property
    def in_data_warehouse(self):
        """Gets the in_data_warehouse of this EditorDriverPoints.  # noqa: E501


        :return: The in_data_warehouse of this EditorDriverPoints.  # noqa: E501
        :rtype: bool
        """
        return self._in_data_warehouse

    @in_data_warehouse.setter
    def in_data_warehouse(self, in_data_warehouse):
        """Sets the in_data_warehouse of this EditorDriverPoints.


        :param in_data_warehouse: The in_data_warehouse of this EditorDriverPoints.  # noqa: E501
        :type: bool
        """

        self._in_data_warehouse = in_data_warehouse

    @property
    def manually_set(self):
        """Gets the manually_set of this EditorDriverPoints.  # noqa: E501


        :return: The manually_set of this EditorDriverPoints.  # noqa: E501
        :rtype: bool
        """
        return self._manually_set

    @manually_set.setter
    def manually_set(self, manually_set):
        """Sets the manually_set of this EditorDriverPoints.


        :param manually_set: The manually_set of this EditorDriverPoints.  # noqa: E501
        :type: bool
        """

        self._manually_set = manually_set

    @property
    def last_update(self):
        """Gets the last_update of this EditorDriverPoints.  # noqa: E501


        :return: The last_update of this EditorDriverPoints.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this EditorDriverPoints.


        :param last_update: The last_update of this EditorDriverPoints.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this EditorDriverPoints.  # noqa: E501


        :return: The last_updated_by of this EditorDriverPoints.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this EditorDriverPoints.


        :param last_updated_by: The last_updated_by of this EditorDriverPoints.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def nascar_one_race_id(self):
        """Gets the nascar_one_race_id of this EditorDriverPoints.  # noqa: E501


        :return: The nascar_one_race_id of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._nascar_one_race_id

    @nascar_one_race_id.setter
    def nascar_one_race_id(self, nascar_one_race_id):
        """Sets the nascar_one_race_id of this EditorDriverPoints.


        :param nascar_one_race_id: The nascar_one_race_id of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._nascar_one_race_id = nascar_one_race_id

    @property
    def history_race_id(self):
        """Gets the history_race_id of this EditorDriverPoints.  # noqa: E501


        :return: The history_race_id of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._history_race_id

    @history_race_id.setter
    def history_race_id(self, history_race_id):
        """Sets the history_race_id of this EditorDriverPoints.


        :param history_race_id: The history_race_id of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._history_race_id = history_race_id

    @property
    def history_driver_id(self):
        """Gets the history_driver_id of this EditorDriverPoints.  # noqa: E501


        :return: The history_driver_id of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._history_driver_id

    @history_driver_id.setter
    def history_driver_id(self, history_driver_id):
        """Sets the history_driver_id of this EditorDriverPoints.


        :param history_driver_id: The history_driver_id of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._history_driver_id = history_driver_id

    @property
    def driver_member_id(self):
        """Gets the driver_member_id of this EditorDriverPoints.  # noqa: E501


        :return: The driver_member_id of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._driver_member_id

    @driver_member_id.setter
    def driver_member_id(self, driver_member_id):
        """Sets the driver_member_id of this EditorDriverPoints.


        :param driver_member_id: The driver_member_id of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._driver_member_id = driver_member_id

    @property
    def position(self):
        """Gets the position of this EditorDriverPoints.  # noqa: E501


        :return: The position of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this EditorDriverPoints.


        :param position: The position of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def driver(self):
        """Gets the driver of this EditorDriverPoints.  # noqa: E501


        :return: The driver of this EditorDriverPoints.  # noqa: E501
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this EditorDriverPoints.


        :param driver: The driver of this EditorDriverPoints.  # noqa: E501
        :type: str
        """

        self._driver = driver

    @property
    def points(self):
        """Gets the points of this EditorDriverPoints.  # noqa: E501


        :return: The points of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this EditorDriverPoints.


        :param points: The points of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._points = points

    @property
    def playoff_points(self):
        """Gets the playoff_points of this EditorDriverPoints.  # noqa: E501


        :return: The playoff_points of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._playoff_points

    @playoff_points.setter
    def playoff_points(self, playoff_points):
        """Sets the playoff_points of this EditorDriverPoints.


        :param playoff_points: The playoff_points of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._playoff_points = playoff_points

    @property
    def playoff_rank(self):
        """Gets the playoff_rank of this EditorDriverPoints.  # noqa: E501


        :return: The playoff_rank of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._playoff_rank

    @playoff_rank.setter
    def playoff_rank(self, playoff_rank):
        """Sets the playoff_rank of this EditorDriverPoints.


        :param playoff_rank: The playoff_rank of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._playoff_rank = playoff_rank

    @property
    def delta_leader(self):
        """Gets the delta_leader of this EditorDriverPoints.  # noqa: E501


        :return: The delta_leader of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._delta_leader

    @delta_leader.setter
    def delta_leader(self, delta_leader):
        """Sets the delta_leader of this EditorDriverPoints.


        :param delta_leader: The delta_leader of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._delta_leader = delta_leader

    @property
    def delta_next(self):
        """Gets the delta_next of this EditorDriverPoints.  # noqa: E501


        :return: The delta_next of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._delta_next

    @delta_next.setter
    def delta_next(self, delta_next):
        """Sets the delta_next of this EditorDriverPoints.


        :param delta_next: The delta_next of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._delta_next = delta_next

    @property
    def delta_playoff(self):
        """Gets the delta_playoff of this EditorDriverPoints.  # noqa: E501


        :return: The delta_playoff of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._delta_playoff

    @delta_playoff.setter
    def delta_playoff(self, delta_playoff):
        """Sets the delta_playoff of this EditorDriverPoints.


        :param delta_playoff: The delta_playoff of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._delta_playoff = delta_playoff

    @property
    def projected_playoff_points(self):
        """Gets the projected_playoff_points of this EditorDriverPoints.  # noqa: E501


        :return: The projected_playoff_points of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._projected_playoff_points

    @projected_playoff_points.setter
    def projected_playoff_points(self, projected_playoff_points):
        """Sets the projected_playoff_points of this EditorDriverPoints.


        :param projected_playoff_points: The projected_playoff_points of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._projected_playoff_points = projected_playoff_points

    @property
    def starts(self):
        """Gets the starts of this EditorDriverPoints.  # noqa: E501


        :return: The starts of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._starts

    @starts.setter
    def starts(self, starts):
        """Sets the starts of this EditorDriverPoints.


        :param starts: The starts of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._starts = starts

    @property
    def poles(self):
        """Gets the poles of this EditorDriverPoints.  # noqa: E501


        :return: The poles of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._poles

    @poles.setter
    def poles(self, poles):
        """Sets the poles of this EditorDriverPoints.


        :param poles: The poles of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._poles = poles

    @property
    def wins(self):
        """Gets the wins of this EditorDriverPoints.  # noqa: E501


        :return: The wins of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this EditorDriverPoints.


        :param wins: The wins of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._wins = wins

    @property
    def stage1_wins(self):
        """Gets the stage1_wins of this EditorDriverPoints.  # noqa: E501


        :return: The stage1_wins of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._stage1_wins

    @stage1_wins.setter
    def stage1_wins(self, stage1_wins):
        """Sets the stage1_wins of this EditorDriverPoints.


        :param stage1_wins: The stage1_wins of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._stage1_wins = stage1_wins

    @property
    def stage2_wins(self):
        """Gets the stage2_wins of this EditorDriverPoints.  # noqa: E501


        :return: The stage2_wins of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._stage2_wins

    @stage2_wins.setter
    def stage2_wins(self, stage2_wins):
        """Sets the stage2_wins of this EditorDriverPoints.


        :param stage2_wins: The stage2_wins of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._stage2_wins = stage2_wins

    @property
    def stage3_wins(self):
        """Gets the stage3_wins of this EditorDriverPoints.  # noqa: E501


        :return: The stage3_wins of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._stage3_wins

    @stage3_wins.setter
    def stage3_wins(self, stage3_wins):
        """Sets the stage3_wins of this EditorDriverPoints.


        :param stage3_wins: The stage3_wins of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._stage3_wins = stage3_wins

    @property
    def stage_points(self):
        """Gets the stage_points of this EditorDriverPoints.  # noqa: E501


        :return: The stage_points of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._stage_points

    @stage_points.setter
    def stage_points(self, stage_points):
        """Sets the stage_points of this EditorDriverPoints.


        :param stage_points: The stage_points of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._stage_points = stage_points

    @property
    def playoff_race_wins(self):
        """Gets the playoff_race_wins of this EditorDriverPoints.  # noqa: E501


        :return: The playoff_race_wins of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._playoff_race_wins

    @playoff_race_wins.setter
    def playoff_race_wins(self, playoff_race_wins):
        """Sets the playoff_race_wins of this EditorDriverPoints.


        :param playoff_race_wins: The playoff_race_wins of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._playoff_race_wins = playoff_race_wins

    @property
    def playoff_stage_wins(self):
        """Gets the playoff_stage_wins of this EditorDriverPoints.  # noqa: E501


        :return: The playoff_stage_wins of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._playoff_stage_wins

    @playoff_stage_wins.setter
    def playoff_stage_wins(self, playoff_stage_wins):
        """Sets the playoff_stage_wins of this EditorDriverPoints.


        :param playoff_stage_wins: The playoff_stage_wins of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._playoff_stage_wins = playoff_stage_wins

    @property
    def points_earned_this_race(self):
        """Gets the points_earned_this_race of this EditorDriverPoints.  # noqa: E501


        :return: The points_earned_this_race of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._points_earned_this_race

    @points_earned_this_race.setter
    def points_earned_this_race(self, points_earned_this_race):
        """Sets the points_earned_this_race of this EditorDriverPoints.


        :param points_earned_this_race: The points_earned_this_race of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._points_earned_this_race = points_earned_this_race

    @property
    def stage_points_earned_this_race(self):
        """Gets the stage_points_earned_this_race of this EditorDriverPoints.  # noqa: E501


        :return: The stage_points_earned_this_race of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._stage_points_earned_this_race

    @stage_points_earned_this_race.setter
    def stage_points_earned_this_race(self, stage_points_earned_this_race):
        """Sets the stage_points_earned_this_race of this EditorDriverPoints.


        :param stage_points_earned_this_race: The stage_points_earned_this_race of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._stage_points_earned_this_race = stage_points_earned_this_race

    @property
    def playoff_points_earned_this_race(self):
        """Gets the playoff_points_earned_this_race of this EditorDriverPoints.  # noqa: E501


        :return: The playoff_points_earned_this_race of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._playoff_points_earned_this_race

    @playoff_points_earned_this_race.setter
    def playoff_points_earned_this_race(self, playoff_points_earned_this_race):
        """Sets the playoff_points_earned_this_race of this EditorDriverPoints.


        :param playoff_points_earned_this_race: The playoff_points_earned_this_race of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._playoff_points_earned_this_race = playoff_points_earned_this_race

    @property
    def points_penalized_this_race(self):
        """Gets the points_penalized_this_race of this EditorDriverPoints.  # noqa: E501


        :return: The points_penalized_this_race of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._points_penalized_this_race

    @points_penalized_this_race.setter
    def points_penalized_this_race(self, points_penalized_this_race):
        """Sets the points_penalized_this_race of this EditorDriverPoints.


        :param points_penalized_this_race: The points_penalized_this_race of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._points_penalized_this_race = points_penalized_this_race

    @property
    def playoff_points_penalized_this_race(self):
        """Gets the playoff_points_penalized_this_race of this EditorDriverPoints.  # noqa: E501


        :return: The playoff_points_penalized_this_race of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._playoff_points_penalized_this_race

    @playoff_points_penalized_this_race.setter
    def playoff_points_penalized_this_race(self, playoff_points_penalized_this_race):
        """Sets the playoff_points_penalized_this_race of this EditorDriverPoints.


        :param playoff_points_penalized_this_race: The playoff_points_penalized_this_race of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._playoff_points_penalized_this_race = playoff_points_penalized_this_race

    @property
    def top5(self):
        """Gets the top5 of this EditorDriverPoints.  # noqa: E501


        :return: The top5 of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._top5

    @top5.setter
    def top5(self, top5):
        """Sets the top5 of this EditorDriverPoints.


        :param top5: The top5 of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._top5 = top5

    @property
    def top10(self):
        """Gets the top10 of this EditorDriverPoints.  # noqa: E501


        :return: The top10 of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._top10

    @top10.setter
    def top10(self, top10):
        """Sets the top10 of this EditorDriverPoints.


        :param top10: The top10 of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._top10 = top10

    @property
    def laps_led(self):
        """Gets the laps_led of this EditorDriverPoints.  # noqa: E501


        :return: The laps_led of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._laps_led

    @laps_led.setter
    def laps_led(self, laps_led):
        """Sets the laps_led of this EditorDriverPoints.


        :param laps_led: The laps_led of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._laps_led = laps_led

    @property
    def dn_fs(self):
        """Gets the dn_fs of this EditorDriverPoints.  # noqa: E501


        :return: The dn_fs of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._dn_fs

    @dn_fs.setter
    def dn_fs(self, dn_fs):
        """Sets the dn_fs of this EditorDriverPoints.


        :param dn_fs: The dn_fs of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._dn_fs = dn_fs

    @property
    def is_clinch(self):
        """Gets the is_clinch of this EditorDriverPoints.  # noqa: E501


        :return: The is_clinch of this EditorDriverPoints.  # noqa: E501
        :rtype: bool
        """
        return self._is_clinch

    @is_clinch.setter
    def is_clinch(self, is_clinch):
        """Sets the is_clinch of this EditorDriverPoints.


        :param is_clinch: The is_clinch of this EditorDriverPoints.  # noqa: E501
        :type: bool
        """

        self._is_clinch = is_clinch

    @property
    def in_playoffs(self):
        """Gets the in_playoffs of this EditorDriverPoints.  # noqa: E501


        :return: The in_playoffs of this EditorDriverPoints.  # noqa: E501
        :rtype: bool
        """
        return self._in_playoffs

    @in_playoffs.setter
    def in_playoffs(self, in_playoffs):
        """Sets the in_playoffs of this EditorDriverPoints.


        :param in_playoffs: The in_playoffs of this EditorDriverPoints.  # noqa: E501
        :type: bool
        """

        self._in_playoffs = in_playoffs

    @property
    def made_playoffs(self):
        """Gets the made_playoffs of this EditorDriverPoints.  # noqa: E501


        :return: The made_playoffs of this EditorDriverPoints.  # noqa: E501
        :rtype: bool
        """
        return self._made_playoffs

    @made_playoffs.setter
    def made_playoffs(self, made_playoffs):
        """Sets the made_playoffs of this EditorDriverPoints.


        :param made_playoffs: The made_playoffs of this EditorDriverPoints.  # noqa: E501
        :type: bool
        """

        self._made_playoffs = made_playoffs

    @property
    def highest_round(self):
        """Gets the highest_round of this EditorDriverPoints.  # noqa: E501


        :return: The highest_round of this EditorDriverPoints.  # noqa: E501
        :rtype: int
        """
        return self._highest_round

    @highest_round.setter
    def highest_round(self, highest_round):
        """Sets the highest_round of this EditorDriverPoints.


        :param highest_round: The highest_round of this EditorDriverPoints.  # noqa: E501
        :type: int
        """

        self._highest_round = highest_round

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditorDriverPoints, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditorDriverPoints):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
