# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class EditorDriverSummaryByPrincipalRaceID(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'publish_state': 'PublishState',
        'id': 'int',
        'tracking_id': 'str',
        'in_data_warehouse': 'bool',
        'manually_set': 'bool',
        'last_update': 'datetime',
        'last_updated_by': 'str',
        'summary_id': 'int',
        'series_id': 'int',
        'history_driver_id': 'int',
        'total_races': 'int',
        'wins': 'int',
        'top5': 'int',
        'top10': 'int',
        'poles': 'int',
        'dnf': 'int',
        'running_at_finish': 'int',
        'lead_lap_finish': 'int',
        'laps_completed': 'int',
        'laps_led': 'int',
        'average_start': 'float',
        'average_finish': 'float',
        'miles_completed': 'float',
        'etl_driver_name': 'str',
        'etl_driver_id': 'int',
        'season': 'int',
        'race_name': 'str',
        'principal_race_id': 'int',
        'race_date': 'datetime'
    }

    attribute_map = {
        'publish_state': 'PublishState',
        'id': 'id',
        'tracking_id': 'tracking_id',
        'in_data_warehouse': 'InDataWarehouse',
        'manually_set': 'Manually_Set',
        'last_update': 'LastUpdate',
        'last_updated_by': 'LastUpdatedBy',
        'summary_id': 'SummaryID',
        'series_id': 'SeriesID',
        'history_driver_id': 'History_DriverID',
        'total_races': 'TotalRaces',
        'wins': 'Wins',
        'top5': 'Top5',
        'top10': 'Top10',
        'poles': 'Poles',
        'dnf': 'DNF',
        'running_at_finish': 'RunningAtFinish',
        'lead_lap_finish': 'LeadLapFinish',
        'laps_completed': 'LapsCompleted',
        'laps_led': 'LapsLed',
        'average_start': 'AverageStart',
        'average_finish': 'AverageFinish',
        'miles_completed': 'MilesCompleted',
        'etl_driver_name': 'ETL_DriverName',
        'etl_driver_id': 'ETL_DriverID',
        'season': 'Season',
        'race_name': 'RaceName',
        'principal_race_id': 'Principal_RaceID',
        'race_date': 'RaceDate'
    }

    def __init__(self, publish_state=None, id=None, tracking_id=None, in_data_warehouse=None, manually_set=None, last_update=None, last_updated_by=None, summary_id=None, series_id=None, history_driver_id=None, total_races=None, wins=None, top5=None, top10=None, poles=None, dnf=None, running_at_finish=None, lead_lap_finish=None, laps_completed=None, laps_led=None, average_start=None, average_finish=None, miles_completed=None, etl_driver_name=None, etl_driver_id=None, season=None, race_name=None, principal_race_id=None, race_date=None):  # noqa: E501
        """EditorDriverSummaryByPrincipalRaceID - a model defined in Swagger"""  # noqa: E501
        self._publish_state = None
        self._id = None
        self._tracking_id = None
        self._in_data_warehouse = None
        self._manually_set = None
        self._last_update = None
        self._last_updated_by = None
        self._summary_id = None
        self._series_id = None
        self._history_driver_id = None
        self._total_races = None
        self._wins = None
        self._top5 = None
        self._top10 = None
        self._poles = None
        self._dnf = None
        self._running_at_finish = None
        self._lead_lap_finish = None
        self._laps_completed = None
        self._laps_led = None
        self._average_start = None
        self._average_finish = None
        self._miles_completed = None
        self._etl_driver_name = None
        self._etl_driver_id = None
        self._season = None
        self._race_name = None
        self._principal_race_id = None
        self._race_date = None
        self.discriminator = None
        if publish_state is not None:
            self.publish_state = publish_state
        if id is not None:
            self.id = id
        if tracking_id is not None:
            self.tracking_id = tracking_id
        if in_data_warehouse is not None:
            self.in_data_warehouse = in_data_warehouse
        if manually_set is not None:
            self.manually_set = manually_set
        if last_update is not None:
            self.last_update = last_update
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if summary_id is not None:
            self.summary_id = summary_id
        if series_id is not None:
            self.series_id = series_id
        if history_driver_id is not None:
            self.history_driver_id = history_driver_id
        if total_races is not None:
            self.total_races = total_races
        if wins is not None:
            self.wins = wins
        if top5 is not None:
            self.top5 = top5
        if top10 is not None:
            self.top10 = top10
        if poles is not None:
            self.poles = poles
        if dnf is not None:
            self.dnf = dnf
        if running_at_finish is not None:
            self.running_at_finish = running_at_finish
        if lead_lap_finish is not None:
            self.lead_lap_finish = lead_lap_finish
        if laps_completed is not None:
            self.laps_completed = laps_completed
        if laps_led is not None:
            self.laps_led = laps_led
        if average_start is not None:
            self.average_start = average_start
        if average_finish is not None:
            self.average_finish = average_finish
        if miles_completed is not None:
            self.miles_completed = miles_completed
        if etl_driver_name is not None:
            self.etl_driver_name = etl_driver_name
        if etl_driver_id is not None:
            self.etl_driver_id = etl_driver_id
        if season is not None:
            self.season = season
        if race_name is not None:
            self.race_name = race_name
        if principal_race_id is not None:
            self.principal_race_id = principal_race_id
        if race_date is not None:
            self.race_date = race_date

    @property
    def publish_state(self):
        """Gets the publish_state of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The publish_state of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: PublishState
        """
        return self._publish_state

    @publish_state.setter
    def publish_state(self, publish_state):
        """Sets the publish_state of this EditorDriverSummaryByPrincipalRaceID.


        :param publish_state: The publish_state of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: PublishState
        """

        self._publish_state = publish_state

    @property
    def id(self):
        """Gets the id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EditorDriverSummaryByPrincipalRaceID.


        :param id: The id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tracking_id(self):
        """Gets the tracking_id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The tracking_id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this EditorDriverSummaryByPrincipalRaceID.


        :param tracking_id: The tracking_id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: str
        """

        self._tracking_id = tracking_id

    @property
    def in_data_warehouse(self):
        """Gets the in_data_warehouse of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The in_data_warehouse of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: bool
        """
        return self._in_data_warehouse

    @in_data_warehouse.setter
    def in_data_warehouse(self, in_data_warehouse):
        """Sets the in_data_warehouse of this EditorDriverSummaryByPrincipalRaceID.


        :param in_data_warehouse: The in_data_warehouse of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: bool
        """

        self._in_data_warehouse = in_data_warehouse

    @property
    def manually_set(self):
        """Gets the manually_set of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The manually_set of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: bool
        """
        return self._manually_set

    @manually_set.setter
    def manually_set(self, manually_set):
        """Sets the manually_set of this EditorDriverSummaryByPrincipalRaceID.


        :param manually_set: The manually_set of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: bool
        """

        self._manually_set = manually_set

    @property
    def last_update(self):
        """Gets the last_update of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The last_update of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this EditorDriverSummaryByPrincipalRaceID.


        :param last_update: The last_update of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The last_updated_by of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this EditorDriverSummaryByPrincipalRaceID.


        :param last_updated_by: The last_updated_by of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def summary_id(self):
        """Gets the summary_id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The summary_id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: int
        """
        return self._summary_id

    @summary_id.setter
    def summary_id(self, summary_id):
        """Sets the summary_id of this EditorDriverSummaryByPrincipalRaceID.


        :param summary_id: The summary_id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: int
        """

        self._summary_id = summary_id

    @property
    def series_id(self):
        """Gets the series_id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The series_id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: int
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """Sets the series_id of this EditorDriverSummaryByPrincipalRaceID.


        :param series_id: The series_id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: int
        """

        self._series_id = series_id

    @property
    def history_driver_id(self):
        """Gets the history_driver_id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The history_driver_id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: int
        """
        return self._history_driver_id

    @history_driver_id.setter
    def history_driver_id(self, history_driver_id):
        """Sets the history_driver_id of this EditorDriverSummaryByPrincipalRaceID.


        :param history_driver_id: The history_driver_id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: int
        """

        self._history_driver_id = history_driver_id

    @property
    def total_races(self):
        """Gets the total_races of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The total_races of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: int
        """
        return self._total_races

    @total_races.setter
    def total_races(self, total_races):
        """Sets the total_races of this EditorDriverSummaryByPrincipalRaceID.


        :param total_races: The total_races of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: int
        """

        self._total_races = total_races

    @property
    def wins(self):
        """Gets the wins of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The wins of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this EditorDriverSummaryByPrincipalRaceID.


        :param wins: The wins of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: int
        """

        self._wins = wins

    @property
    def top5(self):
        """Gets the top5 of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The top5 of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: int
        """
        return self._top5

    @top5.setter
    def top5(self, top5):
        """Sets the top5 of this EditorDriverSummaryByPrincipalRaceID.


        :param top5: The top5 of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: int
        """

        self._top5 = top5

    @property
    def top10(self):
        """Gets the top10 of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The top10 of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: int
        """
        return self._top10

    @top10.setter
    def top10(self, top10):
        """Sets the top10 of this EditorDriverSummaryByPrincipalRaceID.


        :param top10: The top10 of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: int
        """

        self._top10 = top10

    @property
    def poles(self):
        """Gets the poles of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The poles of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: int
        """
        return self._poles

    @poles.setter
    def poles(self, poles):
        """Sets the poles of this EditorDriverSummaryByPrincipalRaceID.


        :param poles: The poles of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: int
        """

        self._poles = poles

    @property
    def dnf(self):
        """Gets the dnf of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The dnf of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: int
        """
        return self._dnf

    @dnf.setter
    def dnf(self, dnf):
        """Sets the dnf of this EditorDriverSummaryByPrincipalRaceID.


        :param dnf: The dnf of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: int
        """

        self._dnf = dnf

    @property
    def running_at_finish(self):
        """Gets the running_at_finish of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The running_at_finish of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: int
        """
        return self._running_at_finish

    @running_at_finish.setter
    def running_at_finish(self, running_at_finish):
        """Sets the running_at_finish of this EditorDriverSummaryByPrincipalRaceID.


        :param running_at_finish: The running_at_finish of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: int
        """

        self._running_at_finish = running_at_finish

    @property
    def lead_lap_finish(self):
        """Gets the lead_lap_finish of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The lead_lap_finish of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: int
        """
        return self._lead_lap_finish

    @lead_lap_finish.setter
    def lead_lap_finish(self, lead_lap_finish):
        """Sets the lead_lap_finish of this EditorDriverSummaryByPrincipalRaceID.


        :param lead_lap_finish: The lead_lap_finish of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: int
        """

        self._lead_lap_finish = lead_lap_finish

    @property
    def laps_completed(self):
        """Gets the laps_completed of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The laps_completed of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: int
        """
        return self._laps_completed

    @laps_completed.setter
    def laps_completed(self, laps_completed):
        """Sets the laps_completed of this EditorDriverSummaryByPrincipalRaceID.


        :param laps_completed: The laps_completed of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: int
        """

        self._laps_completed = laps_completed

    @property
    def laps_led(self):
        """Gets the laps_led of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The laps_led of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: int
        """
        return self._laps_led

    @laps_led.setter
    def laps_led(self, laps_led):
        """Sets the laps_led of this EditorDriverSummaryByPrincipalRaceID.


        :param laps_led: The laps_led of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: int
        """

        self._laps_led = laps_led

    @property
    def average_start(self):
        """Gets the average_start of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The average_start of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: float
        """
        return self._average_start

    @average_start.setter
    def average_start(self, average_start):
        """Sets the average_start of this EditorDriverSummaryByPrincipalRaceID.


        :param average_start: The average_start of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: float
        """

        self._average_start = average_start

    @property
    def average_finish(self):
        """Gets the average_finish of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The average_finish of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: float
        """
        return self._average_finish

    @average_finish.setter
    def average_finish(self, average_finish):
        """Sets the average_finish of this EditorDriverSummaryByPrincipalRaceID.


        :param average_finish: The average_finish of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: float
        """

        self._average_finish = average_finish

    @property
    def miles_completed(self):
        """Gets the miles_completed of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The miles_completed of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: float
        """
        return self._miles_completed

    @miles_completed.setter
    def miles_completed(self, miles_completed):
        """Sets the miles_completed of this EditorDriverSummaryByPrincipalRaceID.


        :param miles_completed: The miles_completed of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: float
        """

        self._miles_completed = miles_completed

    @property
    def etl_driver_name(self):
        """Gets the etl_driver_name of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The etl_driver_name of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: str
        """
        return self._etl_driver_name

    @etl_driver_name.setter
    def etl_driver_name(self, etl_driver_name):
        """Sets the etl_driver_name of this EditorDriverSummaryByPrincipalRaceID.


        :param etl_driver_name: The etl_driver_name of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: str
        """

        self._etl_driver_name = etl_driver_name

    @property
    def etl_driver_id(self):
        """Gets the etl_driver_id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The etl_driver_id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: int
        """
        return self._etl_driver_id

    @etl_driver_id.setter
    def etl_driver_id(self, etl_driver_id):
        """Sets the etl_driver_id of this EditorDriverSummaryByPrincipalRaceID.


        :param etl_driver_id: The etl_driver_id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: int
        """

        self._etl_driver_id = etl_driver_id

    @property
    def season(self):
        """Gets the season of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The season of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this EditorDriverSummaryByPrincipalRaceID.


        :param season: The season of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: int
        """

        self._season = season

    @property
    def race_name(self):
        """Gets the race_name of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The race_name of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: str
        """
        return self._race_name

    @race_name.setter
    def race_name(self, race_name):
        """Sets the race_name of this EditorDriverSummaryByPrincipalRaceID.


        :param race_name: The race_name of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: str
        """

        self._race_name = race_name

    @property
    def principal_race_id(self):
        """Gets the principal_race_id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The principal_race_id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: int
        """
        return self._principal_race_id

    @principal_race_id.setter
    def principal_race_id(self, principal_race_id):
        """Sets the principal_race_id of this EditorDriverSummaryByPrincipalRaceID.


        :param principal_race_id: The principal_race_id of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: int
        """

        self._principal_race_id = principal_race_id

    @property
    def race_date(self):
        """Gets the race_date of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501


        :return: The race_date of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :rtype: datetime
        """
        return self._race_date

    @race_date.setter
    def race_date(self, race_date):
        """Sets the race_date of this EditorDriverSummaryByPrincipalRaceID.


        :param race_date: The race_date of this EditorDriverSummaryByPrincipalRaceID.  # noqa: E501
        :type: datetime
        """

        self._race_date = race_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditorDriverSummaryByPrincipalRaceID, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditorDriverSummaryByPrincipalRaceID):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
