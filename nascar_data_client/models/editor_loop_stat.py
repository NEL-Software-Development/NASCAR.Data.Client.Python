# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class EditorLoopStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'publish_state': 'PublishState',
        'id': 'int',
        'tracking_id': 'str',
        'in_data_warehouse': 'bool',
        'manually_set': 'bool',
        'last_update': 'datetime',
        'last_updated_by': 'str',
        'nascar_one_race_id': 'int',
        'history_race_id': 'int',
        'history_driver_id': 'int',
        'starting_position': 'int',
        'mid_race_position': 'int',
        'closing_laps_position': 'int',
        'closing_laps_diff': 'int',
        'finishing_position': 'int',
        'best_position': 'int',
        'worst_position': 'int',
        'passing_differential': 'int',
        'green_flag_passes': 'int',
        'green_flag_times_passed': 'int',
        'quality_passes': 'int',
        'average_running_position': 'float',
        'percentage_quality_passes': 'float',
        'fastest_lap': 'int',
        'percentage_fastest_laps': 'float',
        'laps_in_top15': 'int',
        'percentage_laps_in_top15': 'float',
        'laps_led': 'int',
        'percentage_laps_led': 'float',
        'laps_completed': 'int',
        'fastest_on_restarts': 'float',
        'average_speed_early_run': 'float',
        'average_speed_late_run': 'float',
        'average_green_flag_speed': 'float',
        'average_speed_in_traffic': 'float',
        'driver_rating': 'float',
        'race_segment1_mph_difference': 'float',
        'race_segment2_mph_difference': 'float',
        'race_segment3_mph_difference': 'float',
        'race_segment4_mph_difference': 'float',
        'total_mph_difference': 'float',
        'took_lead': 'float',
        'vehicle_number': 'str'
    }

    attribute_map = {
        'publish_state': 'PublishState',
        'id': 'id',
        'tracking_id': 'tracking_id',
        'in_data_warehouse': 'InDataWarehouse',
        'manually_set': 'Manually_Set',
        'last_update': 'LastUpdate',
        'last_updated_by': 'LastUpdatedBy',
        'nascar_one_race_id': 'NascarOne_RaceId',
        'history_race_id': 'History_RaceId',
        'history_driver_id': 'History_DriverId',
        'starting_position': 'StartingPosition',
        'mid_race_position': 'MidRacePosition',
        'closing_laps_position': 'ClosingLapsPosition',
        'closing_laps_diff': 'ClosingLapsDiff',
        'finishing_position': 'FinishingPosition',
        'best_position': 'BestPosition',
        'worst_position': 'WorstPosition',
        'passing_differential': 'PassingDifferential',
        'green_flag_passes': 'GreenFlagPasses',
        'green_flag_times_passed': 'GreenFlagTimesPassed',
        'quality_passes': 'QualityPasses',
        'average_running_position': 'AverageRunningPosition',
        'percentage_quality_passes': 'PercentageQualityPasses',
        'fastest_lap': 'FastestLap',
        'percentage_fastest_laps': 'PercentageFastestLaps',
        'laps_in_top15': 'LapsInTop15',
        'percentage_laps_in_top15': 'PercentageLapsInTop15',
        'laps_led': 'LapsLed',
        'percentage_laps_led': 'PercentageLapsLed',
        'laps_completed': 'LapsCompleted',
        'fastest_on_restarts': 'FastestOnRestarts',
        'average_speed_early_run': 'AverageSpeedEarlyRun',
        'average_speed_late_run': 'AverageSpeedLateRun',
        'average_green_flag_speed': 'AverageGreenFlagSpeed',
        'average_speed_in_traffic': 'AverageSpeedInTraffic',
        'driver_rating': 'DriverRating',
        'race_segment1_mph_difference': 'RaceSegment1_MPH_Difference',
        'race_segment2_mph_difference': 'RaceSegment2_MPH_Difference',
        'race_segment3_mph_difference': 'RaceSegment3_MPH_Difference',
        'race_segment4_mph_difference': 'RaceSegment4_MPH_Difference',
        'total_mph_difference': 'Total_MPH_Difference',
        'took_lead': 'TookLead',
        'vehicle_number': 'VehicleNumber'
    }

    def __init__(self, publish_state=None, id=None, tracking_id=None, in_data_warehouse=None, manually_set=None, last_update=None, last_updated_by=None, nascar_one_race_id=None, history_race_id=None, history_driver_id=None, starting_position=None, mid_race_position=None, closing_laps_position=None, closing_laps_diff=None, finishing_position=None, best_position=None, worst_position=None, passing_differential=None, green_flag_passes=None, green_flag_times_passed=None, quality_passes=None, average_running_position=None, percentage_quality_passes=None, fastest_lap=None, percentage_fastest_laps=None, laps_in_top15=None, percentage_laps_in_top15=None, laps_led=None, percentage_laps_led=None, laps_completed=None, fastest_on_restarts=None, average_speed_early_run=None, average_speed_late_run=None, average_green_flag_speed=None, average_speed_in_traffic=None, driver_rating=None, race_segment1_mph_difference=None, race_segment2_mph_difference=None, race_segment3_mph_difference=None, race_segment4_mph_difference=None, total_mph_difference=None, took_lead=None, vehicle_number=None):  # noqa: E501
        """EditorLoopStat - a model defined in Swagger"""  # noqa: E501
        self._publish_state = None
        self._id = None
        self._tracking_id = None
        self._in_data_warehouse = None
        self._manually_set = None
        self._last_update = None
        self._last_updated_by = None
        self._nascar_one_race_id = None
        self._history_race_id = None
        self._history_driver_id = None
        self._starting_position = None
        self._mid_race_position = None
        self._closing_laps_position = None
        self._closing_laps_diff = None
        self._finishing_position = None
        self._best_position = None
        self._worst_position = None
        self._passing_differential = None
        self._green_flag_passes = None
        self._green_flag_times_passed = None
        self._quality_passes = None
        self._average_running_position = None
        self._percentage_quality_passes = None
        self._fastest_lap = None
        self._percentage_fastest_laps = None
        self._laps_in_top15 = None
        self._percentage_laps_in_top15 = None
        self._laps_led = None
        self._percentage_laps_led = None
        self._laps_completed = None
        self._fastest_on_restarts = None
        self._average_speed_early_run = None
        self._average_speed_late_run = None
        self._average_green_flag_speed = None
        self._average_speed_in_traffic = None
        self._driver_rating = None
        self._race_segment1_mph_difference = None
        self._race_segment2_mph_difference = None
        self._race_segment3_mph_difference = None
        self._race_segment4_mph_difference = None
        self._total_mph_difference = None
        self._took_lead = None
        self._vehicle_number = None
        self.discriminator = None
        if publish_state is not None:
            self.publish_state = publish_state
        if id is not None:
            self.id = id
        if tracking_id is not None:
            self.tracking_id = tracking_id
        if in_data_warehouse is not None:
            self.in_data_warehouse = in_data_warehouse
        if manually_set is not None:
            self.manually_set = manually_set
        if last_update is not None:
            self.last_update = last_update
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if nascar_one_race_id is not None:
            self.nascar_one_race_id = nascar_one_race_id
        if history_race_id is not None:
            self.history_race_id = history_race_id
        if history_driver_id is not None:
            self.history_driver_id = history_driver_id
        if starting_position is not None:
            self.starting_position = starting_position
        if mid_race_position is not None:
            self.mid_race_position = mid_race_position
        if closing_laps_position is not None:
            self.closing_laps_position = closing_laps_position
        if closing_laps_diff is not None:
            self.closing_laps_diff = closing_laps_diff
        if finishing_position is not None:
            self.finishing_position = finishing_position
        if best_position is not None:
            self.best_position = best_position
        if worst_position is not None:
            self.worst_position = worst_position
        if passing_differential is not None:
            self.passing_differential = passing_differential
        if green_flag_passes is not None:
            self.green_flag_passes = green_flag_passes
        if green_flag_times_passed is not None:
            self.green_flag_times_passed = green_flag_times_passed
        if quality_passes is not None:
            self.quality_passes = quality_passes
        if average_running_position is not None:
            self.average_running_position = average_running_position
        if percentage_quality_passes is not None:
            self.percentage_quality_passes = percentage_quality_passes
        if fastest_lap is not None:
            self.fastest_lap = fastest_lap
        if percentage_fastest_laps is not None:
            self.percentage_fastest_laps = percentage_fastest_laps
        if laps_in_top15 is not None:
            self.laps_in_top15 = laps_in_top15
        if percentage_laps_in_top15 is not None:
            self.percentage_laps_in_top15 = percentage_laps_in_top15
        if laps_led is not None:
            self.laps_led = laps_led
        if percentage_laps_led is not None:
            self.percentage_laps_led = percentage_laps_led
        if laps_completed is not None:
            self.laps_completed = laps_completed
        if fastest_on_restarts is not None:
            self.fastest_on_restarts = fastest_on_restarts
        if average_speed_early_run is not None:
            self.average_speed_early_run = average_speed_early_run
        if average_speed_late_run is not None:
            self.average_speed_late_run = average_speed_late_run
        if average_green_flag_speed is not None:
            self.average_green_flag_speed = average_green_flag_speed
        if average_speed_in_traffic is not None:
            self.average_speed_in_traffic = average_speed_in_traffic
        if driver_rating is not None:
            self.driver_rating = driver_rating
        if race_segment1_mph_difference is not None:
            self.race_segment1_mph_difference = race_segment1_mph_difference
        if race_segment2_mph_difference is not None:
            self.race_segment2_mph_difference = race_segment2_mph_difference
        if race_segment3_mph_difference is not None:
            self.race_segment3_mph_difference = race_segment3_mph_difference
        if race_segment4_mph_difference is not None:
            self.race_segment4_mph_difference = race_segment4_mph_difference
        if total_mph_difference is not None:
            self.total_mph_difference = total_mph_difference
        if took_lead is not None:
            self.took_lead = took_lead
        if vehicle_number is not None:
            self.vehicle_number = vehicle_number

    @property
    def publish_state(self):
        """Gets the publish_state of this EditorLoopStat.  # noqa: E501


        :return: The publish_state of this EditorLoopStat.  # noqa: E501
        :rtype: PublishState
        """
        return self._publish_state

    @publish_state.setter
    def publish_state(self, publish_state):
        """Sets the publish_state of this EditorLoopStat.


        :param publish_state: The publish_state of this EditorLoopStat.  # noqa: E501
        :type: PublishState
        """

        self._publish_state = publish_state

    @property
    def id(self):
        """Gets the id of this EditorLoopStat.  # noqa: E501


        :return: The id of this EditorLoopStat.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EditorLoopStat.


        :param id: The id of this EditorLoopStat.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tracking_id(self):
        """Gets the tracking_id of this EditorLoopStat.  # noqa: E501


        :return: The tracking_id of this EditorLoopStat.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this EditorLoopStat.


        :param tracking_id: The tracking_id of this EditorLoopStat.  # noqa: E501
        :type: str
        """

        self._tracking_id = tracking_id

    @property
    def in_data_warehouse(self):
        """Gets the in_data_warehouse of this EditorLoopStat.  # noqa: E501


        :return: The in_data_warehouse of this EditorLoopStat.  # noqa: E501
        :rtype: bool
        """
        return self._in_data_warehouse

    @in_data_warehouse.setter
    def in_data_warehouse(self, in_data_warehouse):
        """Sets the in_data_warehouse of this EditorLoopStat.


        :param in_data_warehouse: The in_data_warehouse of this EditorLoopStat.  # noqa: E501
        :type: bool
        """

        self._in_data_warehouse = in_data_warehouse

    @property
    def manually_set(self):
        """Gets the manually_set of this EditorLoopStat.  # noqa: E501


        :return: The manually_set of this EditorLoopStat.  # noqa: E501
        :rtype: bool
        """
        return self._manually_set

    @manually_set.setter
    def manually_set(self, manually_set):
        """Sets the manually_set of this EditorLoopStat.


        :param manually_set: The manually_set of this EditorLoopStat.  # noqa: E501
        :type: bool
        """

        self._manually_set = manually_set

    @property
    def last_update(self):
        """Gets the last_update of this EditorLoopStat.  # noqa: E501


        :return: The last_update of this EditorLoopStat.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this EditorLoopStat.


        :param last_update: The last_update of this EditorLoopStat.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this EditorLoopStat.  # noqa: E501


        :return: The last_updated_by of this EditorLoopStat.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this EditorLoopStat.


        :param last_updated_by: The last_updated_by of this EditorLoopStat.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def nascar_one_race_id(self):
        """Gets the nascar_one_race_id of this EditorLoopStat.  # noqa: E501


        :return: The nascar_one_race_id of this EditorLoopStat.  # noqa: E501
        :rtype: int
        """
        return self._nascar_one_race_id

    @nascar_one_race_id.setter
    def nascar_one_race_id(self, nascar_one_race_id):
        """Sets the nascar_one_race_id of this EditorLoopStat.


        :param nascar_one_race_id: The nascar_one_race_id of this EditorLoopStat.  # noqa: E501
        :type: int
        """

        self._nascar_one_race_id = nascar_one_race_id

    @property
    def history_race_id(self):
        """Gets the history_race_id of this EditorLoopStat.  # noqa: E501


        :return: The history_race_id of this EditorLoopStat.  # noqa: E501
        :rtype: int
        """
        return self._history_race_id

    @history_race_id.setter
    def history_race_id(self, history_race_id):
        """Sets the history_race_id of this EditorLoopStat.


        :param history_race_id: The history_race_id of this EditorLoopStat.  # noqa: E501
        :type: int
        """

        self._history_race_id = history_race_id

    @property
    def history_driver_id(self):
        """Gets the history_driver_id of this EditorLoopStat.  # noqa: E501


        :return: The history_driver_id of this EditorLoopStat.  # noqa: E501
        :rtype: int
        """
        return self._history_driver_id

    @history_driver_id.setter
    def history_driver_id(self, history_driver_id):
        """Sets the history_driver_id of this EditorLoopStat.


        :param history_driver_id: The history_driver_id of this EditorLoopStat.  # noqa: E501
        :type: int
        """

        self._history_driver_id = history_driver_id

    @property
    def starting_position(self):
        """Gets the starting_position of this EditorLoopStat.  # noqa: E501


        :return: The starting_position of this EditorLoopStat.  # noqa: E501
        :rtype: int
        """
        return self._starting_position

    @starting_position.setter
    def starting_position(self, starting_position):
        """Sets the starting_position of this EditorLoopStat.


        :param starting_position: The starting_position of this EditorLoopStat.  # noqa: E501
        :type: int
        """

        self._starting_position = starting_position

    @property
    def mid_race_position(self):
        """Gets the mid_race_position of this EditorLoopStat.  # noqa: E501


        :return: The mid_race_position of this EditorLoopStat.  # noqa: E501
        :rtype: int
        """
        return self._mid_race_position

    @mid_race_position.setter
    def mid_race_position(self, mid_race_position):
        """Sets the mid_race_position of this EditorLoopStat.


        :param mid_race_position: The mid_race_position of this EditorLoopStat.  # noqa: E501
        :type: int
        """

        self._mid_race_position = mid_race_position

    @property
    def closing_laps_position(self):
        """Gets the closing_laps_position of this EditorLoopStat.  # noqa: E501


        :return: The closing_laps_position of this EditorLoopStat.  # noqa: E501
        :rtype: int
        """
        return self._closing_laps_position

    @closing_laps_position.setter
    def closing_laps_position(self, closing_laps_position):
        """Sets the closing_laps_position of this EditorLoopStat.


        :param closing_laps_position: The closing_laps_position of this EditorLoopStat.  # noqa: E501
        :type: int
        """

        self._closing_laps_position = closing_laps_position

    @property
    def closing_laps_diff(self):
        """Gets the closing_laps_diff of this EditorLoopStat.  # noqa: E501


        :return: The closing_laps_diff of this EditorLoopStat.  # noqa: E501
        :rtype: int
        """
        return self._closing_laps_diff

    @closing_laps_diff.setter
    def closing_laps_diff(self, closing_laps_diff):
        """Sets the closing_laps_diff of this EditorLoopStat.


        :param closing_laps_diff: The closing_laps_diff of this EditorLoopStat.  # noqa: E501
        :type: int
        """

        self._closing_laps_diff = closing_laps_diff

    @property
    def finishing_position(self):
        """Gets the finishing_position of this EditorLoopStat.  # noqa: E501


        :return: The finishing_position of this EditorLoopStat.  # noqa: E501
        :rtype: int
        """
        return self._finishing_position

    @finishing_position.setter
    def finishing_position(self, finishing_position):
        """Sets the finishing_position of this EditorLoopStat.


        :param finishing_position: The finishing_position of this EditorLoopStat.  # noqa: E501
        :type: int
        """

        self._finishing_position = finishing_position

    @property
    def best_position(self):
        """Gets the best_position of this EditorLoopStat.  # noqa: E501


        :return: The best_position of this EditorLoopStat.  # noqa: E501
        :rtype: int
        """
        return self._best_position

    @best_position.setter
    def best_position(self, best_position):
        """Sets the best_position of this EditorLoopStat.


        :param best_position: The best_position of this EditorLoopStat.  # noqa: E501
        :type: int
        """

        self._best_position = best_position

    @property
    def worst_position(self):
        """Gets the worst_position of this EditorLoopStat.  # noqa: E501


        :return: The worst_position of this EditorLoopStat.  # noqa: E501
        :rtype: int
        """
        return self._worst_position

    @worst_position.setter
    def worst_position(self, worst_position):
        """Sets the worst_position of this EditorLoopStat.


        :param worst_position: The worst_position of this EditorLoopStat.  # noqa: E501
        :type: int
        """

        self._worst_position = worst_position

    @property
    def passing_differential(self):
        """Gets the passing_differential of this EditorLoopStat.  # noqa: E501


        :return: The passing_differential of this EditorLoopStat.  # noqa: E501
        :rtype: int
        """
        return self._passing_differential

    @passing_differential.setter
    def passing_differential(self, passing_differential):
        """Sets the passing_differential of this EditorLoopStat.


        :param passing_differential: The passing_differential of this EditorLoopStat.  # noqa: E501
        :type: int
        """

        self._passing_differential = passing_differential

    @property
    def green_flag_passes(self):
        """Gets the green_flag_passes of this EditorLoopStat.  # noqa: E501


        :return: The green_flag_passes of this EditorLoopStat.  # noqa: E501
        :rtype: int
        """
        return self._green_flag_passes

    @green_flag_passes.setter
    def green_flag_passes(self, green_flag_passes):
        """Sets the green_flag_passes of this EditorLoopStat.


        :param green_flag_passes: The green_flag_passes of this EditorLoopStat.  # noqa: E501
        :type: int
        """

        self._green_flag_passes = green_flag_passes

    @property
    def green_flag_times_passed(self):
        """Gets the green_flag_times_passed of this EditorLoopStat.  # noqa: E501


        :return: The green_flag_times_passed of this EditorLoopStat.  # noqa: E501
        :rtype: int
        """
        return self._green_flag_times_passed

    @green_flag_times_passed.setter
    def green_flag_times_passed(self, green_flag_times_passed):
        """Sets the green_flag_times_passed of this EditorLoopStat.


        :param green_flag_times_passed: The green_flag_times_passed of this EditorLoopStat.  # noqa: E501
        :type: int
        """

        self._green_flag_times_passed = green_flag_times_passed

    @property
    def quality_passes(self):
        """Gets the quality_passes of this EditorLoopStat.  # noqa: E501


        :return: The quality_passes of this EditorLoopStat.  # noqa: E501
        :rtype: int
        """
        return self._quality_passes

    @quality_passes.setter
    def quality_passes(self, quality_passes):
        """Sets the quality_passes of this EditorLoopStat.


        :param quality_passes: The quality_passes of this EditorLoopStat.  # noqa: E501
        :type: int
        """

        self._quality_passes = quality_passes

    @property
    def average_running_position(self):
        """Gets the average_running_position of this EditorLoopStat.  # noqa: E501


        :return: The average_running_position of this EditorLoopStat.  # noqa: E501
        :rtype: float
        """
        return self._average_running_position

    @average_running_position.setter
    def average_running_position(self, average_running_position):
        """Sets the average_running_position of this EditorLoopStat.


        :param average_running_position: The average_running_position of this EditorLoopStat.  # noqa: E501
        :type: float
        """

        self._average_running_position = average_running_position

    @property
    def percentage_quality_passes(self):
        """Gets the percentage_quality_passes of this EditorLoopStat.  # noqa: E501


        :return: The percentage_quality_passes of this EditorLoopStat.  # noqa: E501
        :rtype: float
        """
        return self._percentage_quality_passes

    @percentage_quality_passes.setter
    def percentage_quality_passes(self, percentage_quality_passes):
        """Sets the percentage_quality_passes of this EditorLoopStat.


        :param percentage_quality_passes: The percentage_quality_passes of this EditorLoopStat.  # noqa: E501
        :type: float
        """

        self._percentage_quality_passes = percentage_quality_passes

    @property
    def fastest_lap(self):
        """Gets the fastest_lap of this EditorLoopStat.  # noqa: E501


        :return: The fastest_lap of this EditorLoopStat.  # noqa: E501
        :rtype: int
        """
        return self._fastest_lap

    @fastest_lap.setter
    def fastest_lap(self, fastest_lap):
        """Sets the fastest_lap of this EditorLoopStat.


        :param fastest_lap: The fastest_lap of this EditorLoopStat.  # noqa: E501
        :type: int
        """

        self._fastest_lap = fastest_lap

    @property
    def percentage_fastest_laps(self):
        """Gets the percentage_fastest_laps of this EditorLoopStat.  # noqa: E501


        :return: The percentage_fastest_laps of this EditorLoopStat.  # noqa: E501
        :rtype: float
        """
        return self._percentage_fastest_laps

    @percentage_fastest_laps.setter
    def percentage_fastest_laps(self, percentage_fastest_laps):
        """Sets the percentage_fastest_laps of this EditorLoopStat.


        :param percentage_fastest_laps: The percentage_fastest_laps of this EditorLoopStat.  # noqa: E501
        :type: float
        """

        self._percentage_fastest_laps = percentage_fastest_laps

    @property
    def laps_in_top15(self):
        """Gets the laps_in_top15 of this EditorLoopStat.  # noqa: E501


        :return: The laps_in_top15 of this EditorLoopStat.  # noqa: E501
        :rtype: int
        """
        return self._laps_in_top15

    @laps_in_top15.setter
    def laps_in_top15(self, laps_in_top15):
        """Sets the laps_in_top15 of this EditorLoopStat.


        :param laps_in_top15: The laps_in_top15 of this EditorLoopStat.  # noqa: E501
        :type: int
        """

        self._laps_in_top15 = laps_in_top15

    @property
    def percentage_laps_in_top15(self):
        """Gets the percentage_laps_in_top15 of this EditorLoopStat.  # noqa: E501


        :return: The percentage_laps_in_top15 of this EditorLoopStat.  # noqa: E501
        :rtype: float
        """
        return self._percentage_laps_in_top15

    @percentage_laps_in_top15.setter
    def percentage_laps_in_top15(self, percentage_laps_in_top15):
        """Sets the percentage_laps_in_top15 of this EditorLoopStat.


        :param percentage_laps_in_top15: The percentage_laps_in_top15 of this EditorLoopStat.  # noqa: E501
        :type: float
        """

        self._percentage_laps_in_top15 = percentage_laps_in_top15

    @property
    def laps_led(self):
        """Gets the laps_led of this EditorLoopStat.  # noqa: E501


        :return: The laps_led of this EditorLoopStat.  # noqa: E501
        :rtype: int
        """
        return self._laps_led

    @laps_led.setter
    def laps_led(self, laps_led):
        """Sets the laps_led of this EditorLoopStat.


        :param laps_led: The laps_led of this EditorLoopStat.  # noqa: E501
        :type: int
        """

        self._laps_led = laps_led

    @property
    def percentage_laps_led(self):
        """Gets the percentage_laps_led of this EditorLoopStat.  # noqa: E501


        :return: The percentage_laps_led of this EditorLoopStat.  # noqa: E501
        :rtype: float
        """
        return self._percentage_laps_led

    @percentage_laps_led.setter
    def percentage_laps_led(self, percentage_laps_led):
        """Sets the percentage_laps_led of this EditorLoopStat.


        :param percentage_laps_led: The percentage_laps_led of this EditorLoopStat.  # noqa: E501
        :type: float
        """

        self._percentage_laps_led = percentage_laps_led

    @property
    def laps_completed(self):
        """Gets the laps_completed of this EditorLoopStat.  # noqa: E501


        :return: The laps_completed of this EditorLoopStat.  # noqa: E501
        :rtype: int
        """
        return self._laps_completed

    @laps_completed.setter
    def laps_completed(self, laps_completed):
        """Sets the laps_completed of this EditorLoopStat.


        :param laps_completed: The laps_completed of this EditorLoopStat.  # noqa: E501
        :type: int
        """

        self._laps_completed = laps_completed

    @property
    def fastest_on_restarts(self):
        """Gets the fastest_on_restarts of this EditorLoopStat.  # noqa: E501


        :return: The fastest_on_restarts of this EditorLoopStat.  # noqa: E501
        :rtype: float
        """
        return self._fastest_on_restarts

    @fastest_on_restarts.setter
    def fastest_on_restarts(self, fastest_on_restarts):
        """Sets the fastest_on_restarts of this EditorLoopStat.


        :param fastest_on_restarts: The fastest_on_restarts of this EditorLoopStat.  # noqa: E501
        :type: float
        """

        self._fastest_on_restarts = fastest_on_restarts

    @property
    def average_speed_early_run(self):
        """Gets the average_speed_early_run of this EditorLoopStat.  # noqa: E501


        :return: The average_speed_early_run of this EditorLoopStat.  # noqa: E501
        :rtype: float
        """
        return self._average_speed_early_run

    @average_speed_early_run.setter
    def average_speed_early_run(self, average_speed_early_run):
        """Sets the average_speed_early_run of this EditorLoopStat.


        :param average_speed_early_run: The average_speed_early_run of this EditorLoopStat.  # noqa: E501
        :type: float
        """

        self._average_speed_early_run = average_speed_early_run

    @property
    def average_speed_late_run(self):
        """Gets the average_speed_late_run of this EditorLoopStat.  # noqa: E501


        :return: The average_speed_late_run of this EditorLoopStat.  # noqa: E501
        :rtype: float
        """
        return self._average_speed_late_run

    @average_speed_late_run.setter
    def average_speed_late_run(self, average_speed_late_run):
        """Sets the average_speed_late_run of this EditorLoopStat.


        :param average_speed_late_run: The average_speed_late_run of this EditorLoopStat.  # noqa: E501
        :type: float
        """

        self._average_speed_late_run = average_speed_late_run

    @property
    def average_green_flag_speed(self):
        """Gets the average_green_flag_speed of this EditorLoopStat.  # noqa: E501


        :return: The average_green_flag_speed of this EditorLoopStat.  # noqa: E501
        :rtype: float
        """
        return self._average_green_flag_speed

    @average_green_flag_speed.setter
    def average_green_flag_speed(self, average_green_flag_speed):
        """Sets the average_green_flag_speed of this EditorLoopStat.


        :param average_green_flag_speed: The average_green_flag_speed of this EditorLoopStat.  # noqa: E501
        :type: float
        """

        self._average_green_flag_speed = average_green_flag_speed

    @property
    def average_speed_in_traffic(self):
        """Gets the average_speed_in_traffic of this EditorLoopStat.  # noqa: E501


        :return: The average_speed_in_traffic of this EditorLoopStat.  # noqa: E501
        :rtype: float
        """
        return self._average_speed_in_traffic

    @average_speed_in_traffic.setter
    def average_speed_in_traffic(self, average_speed_in_traffic):
        """Sets the average_speed_in_traffic of this EditorLoopStat.


        :param average_speed_in_traffic: The average_speed_in_traffic of this EditorLoopStat.  # noqa: E501
        :type: float
        """

        self._average_speed_in_traffic = average_speed_in_traffic

    @property
    def driver_rating(self):
        """Gets the driver_rating of this EditorLoopStat.  # noqa: E501


        :return: The driver_rating of this EditorLoopStat.  # noqa: E501
        :rtype: float
        """
        return self._driver_rating

    @driver_rating.setter
    def driver_rating(self, driver_rating):
        """Sets the driver_rating of this EditorLoopStat.


        :param driver_rating: The driver_rating of this EditorLoopStat.  # noqa: E501
        :type: float
        """

        self._driver_rating = driver_rating

    @property
    def race_segment1_mph_difference(self):
        """Gets the race_segment1_mph_difference of this EditorLoopStat.  # noqa: E501


        :return: The race_segment1_mph_difference of this EditorLoopStat.  # noqa: E501
        :rtype: float
        """
        return self._race_segment1_mph_difference

    @race_segment1_mph_difference.setter
    def race_segment1_mph_difference(self, race_segment1_mph_difference):
        """Sets the race_segment1_mph_difference of this EditorLoopStat.


        :param race_segment1_mph_difference: The race_segment1_mph_difference of this EditorLoopStat.  # noqa: E501
        :type: float
        """

        self._race_segment1_mph_difference = race_segment1_mph_difference

    @property
    def race_segment2_mph_difference(self):
        """Gets the race_segment2_mph_difference of this EditorLoopStat.  # noqa: E501


        :return: The race_segment2_mph_difference of this EditorLoopStat.  # noqa: E501
        :rtype: float
        """
        return self._race_segment2_mph_difference

    @race_segment2_mph_difference.setter
    def race_segment2_mph_difference(self, race_segment2_mph_difference):
        """Sets the race_segment2_mph_difference of this EditorLoopStat.


        :param race_segment2_mph_difference: The race_segment2_mph_difference of this EditorLoopStat.  # noqa: E501
        :type: float
        """

        self._race_segment2_mph_difference = race_segment2_mph_difference

    @property
    def race_segment3_mph_difference(self):
        """Gets the race_segment3_mph_difference of this EditorLoopStat.  # noqa: E501


        :return: The race_segment3_mph_difference of this EditorLoopStat.  # noqa: E501
        :rtype: float
        """
        return self._race_segment3_mph_difference

    @race_segment3_mph_difference.setter
    def race_segment3_mph_difference(self, race_segment3_mph_difference):
        """Sets the race_segment3_mph_difference of this EditorLoopStat.


        :param race_segment3_mph_difference: The race_segment3_mph_difference of this EditorLoopStat.  # noqa: E501
        :type: float
        """

        self._race_segment3_mph_difference = race_segment3_mph_difference

    @property
    def race_segment4_mph_difference(self):
        """Gets the race_segment4_mph_difference of this EditorLoopStat.  # noqa: E501


        :return: The race_segment4_mph_difference of this EditorLoopStat.  # noqa: E501
        :rtype: float
        """
        return self._race_segment4_mph_difference

    @race_segment4_mph_difference.setter
    def race_segment4_mph_difference(self, race_segment4_mph_difference):
        """Sets the race_segment4_mph_difference of this EditorLoopStat.


        :param race_segment4_mph_difference: The race_segment4_mph_difference of this EditorLoopStat.  # noqa: E501
        :type: float
        """

        self._race_segment4_mph_difference = race_segment4_mph_difference

    @property
    def total_mph_difference(self):
        """Gets the total_mph_difference of this EditorLoopStat.  # noqa: E501


        :return: The total_mph_difference of this EditorLoopStat.  # noqa: E501
        :rtype: float
        """
        return self._total_mph_difference

    @total_mph_difference.setter
    def total_mph_difference(self, total_mph_difference):
        """Sets the total_mph_difference of this EditorLoopStat.


        :param total_mph_difference: The total_mph_difference of this EditorLoopStat.  # noqa: E501
        :type: float
        """

        self._total_mph_difference = total_mph_difference

    @property
    def took_lead(self):
        """Gets the took_lead of this EditorLoopStat.  # noqa: E501


        :return: The took_lead of this EditorLoopStat.  # noqa: E501
        :rtype: float
        """
        return self._took_lead

    @took_lead.setter
    def took_lead(self, took_lead):
        """Sets the took_lead of this EditorLoopStat.


        :param took_lead: The took_lead of this EditorLoopStat.  # noqa: E501
        :type: float
        """

        self._took_lead = took_lead

    @property
    def vehicle_number(self):
        """Gets the vehicle_number of this EditorLoopStat.  # noqa: E501


        :return: The vehicle_number of this EditorLoopStat.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_number

    @vehicle_number.setter
    def vehicle_number(self, vehicle_number):
        """Sets the vehicle_number of this EditorLoopStat.


        :param vehicle_number: The vehicle_number of this EditorLoopStat.  # noqa: E501
        :type: str
        """

        self._vehicle_number = vehicle_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditorLoopStat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditorLoopStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
