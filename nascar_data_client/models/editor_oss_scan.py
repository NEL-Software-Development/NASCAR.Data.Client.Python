# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class EditorOSSScan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'publish_state': 'PublishState',
        'id': 'int',
        'tracking_id': 'str',
        'in_data_warehouse': 'bool',
        'manually_set': 'bool',
        'last_update': 'datetime',
        'last_updated_by': 'str',
        'nascar_one_race_id': 'int',
        'chassis_measurements_id': 'int',
        'hawkeye_id': 'int',
        'vehicle_number': 'str',
        'chassis': 'str',
        'limits_body_offset_min': 'float',
        'limits_body_offset_max': 'float',
        'pass_fails_body_offset': 'bool',
        'results_body_offset': 'float',
        'limits_camber_lf_min': 'float',
        'limits_camber_lf_max': 'float',
        'pass_fails_camber_lf': 'bool',
        'results_camber_lf': 'float',
        'limits_camber_lr_min': 'float',
        'limits_camber_lr_max': 'float',
        'pass_fails_camber_lr': 'bool',
        'results_camber_lr': 'float',
        'limits_camber_rf_min': 'float',
        'limits_camber_rf_max': 'float',
        'pass_fails_camber_rf': 'bool',
        'results_camber_rf': 'float',
        'limits_camber_rr_min': 'float',
        'limits_camber_rr_max': 'float',
        'pass_fails_camber_rr': 'bool',
        'results_camber_rr': 'float',
        'limits_lf_frame_rail_min': 'float',
        'limits_lf_frame_rail_max': 'float',
        'pass_fails_lf_frame_rail': 'bool',
        'results_lf_frame_rail': 'float',
        'limits_lr_frame_rail_min': 'float',
        'limits_lr_frame_rail_max': 'float',
        'pass_fails_lr_frame_rail': 'bool',
        'results_lr_frame_rail': 'float',
        'limits_rf_frame_rail_min': 'float',
        'limits_rf_frame_rail_max': 'float',
        'pass_fails_rf_frame_rail': 'bool',
        'results_rf_frame_rail': 'float',
        'limits_rh_location_left_min': 'float',
        'limits_rh_location_left_max': 'float',
        'pass_fails_rh_location_left': 'bool',
        'results_rh_location_left': 'float',
        'limits_rh_location_right_min': 'float',
        'limits_rh_location_right_max': 'float',
        'pass_fails_rh_location_right': 'bool',
        'results_rh_location_right': 'float',
        'limits_rh_skew_min': 'float',
        'limits_rh_skew_max': 'float',
        'pass_fails_rh_skew': 'bool',
        'results_rh_skew': 'float',
        'limits_rr_frame_rail_min': 'float',
        'limits_rr_frame_rail_max': 'float',
        'pass_fails_rr_frame_rail': 'bool',
        'results_rr_frame_rail': 'float',
        'limits_right_parallel_min': 'float',
        'limits_right_parallel_max': 'float',
        'pass_fails_right_parallel': 'bool',
        'results_right_parallel': 'float',
        'limits_treadwidth_front_min': 'float',
        'limits_treadwidth_front_max': 'float',
        'pass_fails_treadwidth_front': 'bool',
        'results_treadwidth_front': 'float',
        'limits_treadwidth_rear_min': 'float',
        'limits_treadwidth_rear_max': 'float',
        'pass_fails_treadwidth_rear': 'bool',
        'results_treadwidth_rear': 'float',
        'limits_wheel_base_left_min': 'float',
        'limits_wheel_base_left_max': 'float',
        'pass_fails_wheel_base_left': 'bool',
        'results_wheel_base_left': 'float',
        'limits_wheelbase_right_min': 'float',
        'limits_wheelbase_right_max': 'float',
        'pass_fails_wheelbase_right': 'bool',
        'results_wheelbase_right': 'float',
        'limits_toe_lr_min': 'float',
        'limits_toe_lr_max': 'float',
        'pass_fails_toe_lr': 'bool',
        'results_toe_lr': 'float',
        'limits_toe_rr_min': 'float',
        'limits_toe_rr_max': 'float',
        'pass_fails_toe_rr': 'bool',
        'results_toe_rr': 'float',
        'filename': 'str',
        'inspection_date_time': 'datetime',
        'upload_date': 'datetime'
    }

    attribute_map = {
        'publish_state': 'PublishState',
        'id': 'id',
        'tracking_id': 'tracking_id',
        'in_data_warehouse': 'InDataWarehouse',
        'manually_set': 'Manually_Set',
        'last_update': 'LastUpdate',
        'last_updated_by': 'LastUpdatedBy',
        'nascar_one_race_id': 'NascarOne_RaceId',
        'chassis_measurements_id': 'ChassisMeasurementsID',
        'hawkeye_id': 'HawkeyeId',
        'vehicle_number': 'Vehicle_Number',
        'chassis': 'Chassis',
        'limits_body_offset_min': 'Limits_BodyOffset_Min',
        'limits_body_offset_max': 'Limits_BodyOffset_Max',
        'pass_fails_body_offset': 'PassFails_BodyOffset',
        'results_body_offset': 'Results_BodyOffset',
        'limits_camber_lf_min': 'Limits_Camber_LF_Min',
        'limits_camber_lf_max': 'Limits_Camber_LF_Max',
        'pass_fails_camber_lf': 'PassFails_Camber_LF',
        'results_camber_lf': 'Results_Camber_LF',
        'limits_camber_lr_min': 'Limits_Camber_LR_Min',
        'limits_camber_lr_max': 'Limits_Camber_LR_Max',
        'pass_fails_camber_lr': 'PassFails_Camber_LR',
        'results_camber_lr': 'Results_Camber_LR',
        'limits_camber_rf_min': 'Limits_Camber_RF_Min',
        'limits_camber_rf_max': 'Limits_Camber_RF_Max',
        'pass_fails_camber_rf': 'PassFails_Camber_RF',
        'results_camber_rf': 'Results_Camber_RF',
        'limits_camber_rr_min': 'Limits_Camber_RR_Min',
        'limits_camber_rr_max': 'Limits_Camber_RR_Max',
        'pass_fails_camber_rr': 'PassFails_Camber_RR',
        'results_camber_rr': 'Results_Camber_RR',
        'limits_lf_frame_rail_min': 'Limits_LF_FrameRail_Min',
        'limits_lf_frame_rail_max': 'Limits_LF_FrameRail_Max',
        'pass_fails_lf_frame_rail': 'PassFails_LF_FrameRail',
        'results_lf_frame_rail': 'Results_LF_FrameRail',
        'limits_lr_frame_rail_min': 'Limits_LR_FrameRail_Min',
        'limits_lr_frame_rail_max': 'Limits_LR_FrameRail_Max',
        'pass_fails_lr_frame_rail': 'PassFails_LR_FrameRail',
        'results_lr_frame_rail': 'Results_LR_FrameRail',
        'limits_rf_frame_rail_min': 'Limits_RF_FrameRail_Min',
        'limits_rf_frame_rail_max': 'Limits_RF_FrameRail_Max',
        'pass_fails_rf_frame_rail': 'PassFails_RF_FrameRail',
        'results_rf_frame_rail': 'Results_RF_FrameRail',
        'limits_rh_location_left_min': 'Limits_RH_Location_Left_Min',
        'limits_rh_location_left_max': 'Limits_RH_Location_Left_Max',
        'pass_fails_rh_location_left': 'PassFails_RH_Location_Left',
        'results_rh_location_left': 'Results_RH_Location_Left',
        'limits_rh_location_right_min': 'Limits_RH_Location_Right_Min',
        'limits_rh_location_right_max': 'Limits_RH_Location_Right_Max',
        'pass_fails_rh_location_right': 'PassFails_RH_Location_Right',
        'results_rh_location_right': 'Results_RH_Location_Right',
        'limits_rh_skew_min': 'Limits_RH_Skew_Min',
        'limits_rh_skew_max': 'Limits_RH_Skew_Max',
        'pass_fails_rh_skew': 'PassFails_RH_Skew',
        'results_rh_skew': 'Results_RH_Skew',
        'limits_rr_frame_rail_min': 'Limits_RR_FrameRail_Min',
        'limits_rr_frame_rail_max': 'Limits_RR_FrameRail_Max',
        'pass_fails_rr_frame_rail': 'PassFails_RR_FrameRail',
        'results_rr_frame_rail': 'Results_RR_FrameRail',
        'limits_right_parallel_min': 'Limits_Right_Parallel_Min',
        'limits_right_parallel_max': 'Limits_Right_Parallel_Max',
        'pass_fails_right_parallel': 'PassFails_Right_Parallel',
        'results_right_parallel': 'Results_Right_Parallel',
        'limits_treadwidth_front_min': 'Limits_Treadwidth_Front_Min',
        'limits_treadwidth_front_max': 'Limits_Treadwidth_Front_Max',
        'pass_fails_treadwidth_front': 'PassFails_Treadwidth_Front',
        'results_treadwidth_front': 'Results_Treadwidth_Front',
        'limits_treadwidth_rear_min': 'Limits_Treadwidth_Rear_Min',
        'limits_treadwidth_rear_max': 'Limits_Treadwidth_Rear_Max',
        'pass_fails_treadwidth_rear': 'PassFails_Treadwidth_Rear',
        'results_treadwidth_rear': 'Results_Treadwidth_Rear',
        'limits_wheel_base_left_min': 'Limits_WheelBase_Left_Min',
        'limits_wheel_base_left_max': 'Limits_WheelBase_Left_Max',
        'pass_fails_wheel_base_left': 'PassFails_WheelBase_Left',
        'results_wheel_base_left': 'Results_WheelBase_Left',
        'limits_wheelbase_right_min': 'Limits_Wheelbase_Right_Min',
        'limits_wheelbase_right_max': 'Limits_Wheelbase_Right_Max',
        'pass_fails_wheelbase_right': 'PassFails_Wheelbase_Right',
        'results_wheelbase_right': 'Results_Wheelbase_Right',
        'limits_toe_lr_min': 'Limits_Toe_LR_Min',
        'limits_toe_lr_max': 'Limits_Toe_LR_Max',
        'pass_fails_toe_lr': 'PassFails_Toe_LR',
        'results_toe_lr': 'Results_Toe_LR',
        'limits_toe_rr_min': 'Limits_Toe_RR_Min',
        'limits_toe_rr_max': 'Limits_Toe_RR_Max',
        'pass_fails_toe_rr': 'PassFails_Toe_RR',
        'results_toe_rr': 'Results_Toe_RR',
        'filename': 'Filename',
        'inspection_date_time': 'InspectionDateTime',
        'upload_date': 'UploadDate'
    }

    def __init__(self, publish_state=None, id=None, tracking_id=None, in_data_warehouse=None, manually_set=None, last_update=None, last_updated_by=None, nascar_one_race_id=None, chassis_measurements_id=None, hawkeye_id=None, vehicle_number=None, chassis=None, limits_body_offset_min=None, limits_body_offset_max=None, pass_fails_body_offset=None, results_body_offset=None, limits_camber_lf_min=None, limits_camber_lf_max=None, pass_fails_camber_lf=None, results_camber_lf=None, limits_camber_lr_min=None, limits_camber_lr_max=None, pass_fails_camber_lr=None, results_camber_lr=None, limits_camber_rf_min=None, limits_camber_rf_max=None, pass_fails_camber_rf=None, results_camber_rf=None, limits_camber_rr_min=None, limits_camber_rr_max=None, pass_fails_camber_rr=None, results_camber_rr=None, limits_lf_frame_rail_min=None, limits_lf_frame_rail_max=None, pass_fails_lf_frame_rail=None, results_lf_frame_rail=None, limits_lr_frame_rail_min=None, limits_lr_frame_rail_max=None, pass_fails_lr_frame_rail=None, results_lr_frame_rail=None, limits_rf_frame_rail_min=None, limits_rf_frame_rail_max=None, pass_fails_rf_frame_rail=None, results_rf_frame_rail=None, limits_rh_location_left_min=None, limits_rh_location_left_max=None, pass_fails_rh_location_left=None, results_rh_location_left=None, limits_rh_location_right_min=None, limits_rh_location_right_max=None, pass_fails_rh_location_right=None, results_rh_location_right=None, limits_rh_skew_min=None, limits_rh_skew_max=None, pass_fails_rh_skew=None, results_rh_skew=None, limits_rr_frame_rail_min=None, limits_rr_frame_rail_max=None, pass_fails_rr_frame_rail=None, results_rr_frame_rail=None, limits_right_parallel_min=None, limits_right_parallel_max=None, pass_fails_right_parallel=None, results_right_parallel=None, limits_treadwidth_front_min=None, limits_treadwidth_front_max=None, pass_fails_treadwidth_front=None, results_treadwidth_front=None, limits_treadwidth_rear_min=None, limits_treadwidth_rear_max=None, pass_fails_treadwidth_rear=None, results_treadwidth_rear=None, limits_wheel_base_left_min=None, limits_wheel_base_left_max=None, pass_fails_wheel_base_left=None, results_wheel_base_left=None, limits_wheelbase_right_min=None, limits_wheelbase_right_max=None, pass_fails_wheelbase_right=None, results_wheelbase_right=None, limits_toe_lr_min=None, limits_toe_lr_max=None, pass_fails_toe_lr=None, results_toe_lr=None, limits_toe_rr_min=None, limits_toe_rr_max=None, pass_fails_toe_rr=None, results_toe_rr=None, filename=None, inspection_date_time=None, upload_date=None):  # noqa: E501
        """EditorOSSScan - a model defined in Swagger"""  # noqa: E501
        self._publish_state = None
        self._id = None
        self._tracking_id = None
        self._in_data_warehouse = None
        self._manually_set = None
        self._last_update = None
        self._last_updated_by = None
        self._nascar_one_race_id = None
        self._chassis_measurements_id = None
        self._hawkeye_id = None
        self._vehicle_number = None
        self._chassis = None
        self._limits_body_offset_min = None
        self._limits_body_offset_max = None
        self._pass_fails_body_offset = None
        self._results_body_offset = None
        self._limits_camber_lf_min = None
        self._limits_camber_lf_max = None
        self._pass_fails_camber_lf = None
        self._results_camber_lf = None
        self._limits_camber_lr_min = None
        self._limits_camber_lr_max = None
        self._pass_fails_camber_lr = None
        self._results_camber_lr = None
        self._limits_camber_rf_min = None
        self._limits_camber_rf_max = None
        self._pass_fails_camber_rf = None
        self._results_camber_rf = None
        self._limits_camber_rr_min = None
        self._limits_camber_rr_max = None
        self._pass_fails_camber_rr = None
        self._results_camber_rr = None
        self._limits_lf_frame_rail_min = None
        self._limits_lf_frame_rail_max = None
        self._pass_fails_lf_frame_rail = None
        self._results_lf_frame_rail = None
        self._limits_lr_frame_rail_min = None
        self._limits_lr_frame_rail_max = None
        self._pass_fails_lr_frame_rail = None
        self._results_lr_frame_rail = None
        self._limits_rf_frame_rail_min = None
        self._limits_rf_frame_rail_max = None
        self._pass_fails_rf_frame_rail = None
        self._results_rf_frame_rail = None
        self._limits_rh_location_left_min = None
        self._limits_rh_location_left_max = None
        self._pass_fails_rh_location_left = None
        self._results_rh_location_left = None
        self._limits_rh_location_right_min = None
        self._limits_rh_location_right_max = None
        self._pass_fails_rh_location_right = None
        self._results_rh_location_right = None
        self._limits_rh_skew_min = None
        self._limits_rh_skew_max = None
        self._pass_fails_rh_skew = None
        self._results_rh_skew = None
        self._limits_rr_frame_rail_min = None
        self._limits_rr_frame_rail_max = None
        self._pass_fails_rr_frame_rail = None
        self._results_rr_frame_rail = None
        self._limits_right_parallel_min = None
        self._limits_right_parallel_max = None
        self._pass_fails_right_parallel = None
        self._results_right_parallel = None
        self._limits_treadwidth_front_min = None
        self._limits_treadwidth_front_max = None
        self._pass_fails_treadwidth_front = None
        self._results_treadwidth_front = None
        self._limits_treadwidth_rear_min = None
        self._limits_treadwidth_rear_max = None
        self._pass_fails_treadwidth_rear = None
        self._results_treadwidth_rear = None
        self._limits_wheel_base_left_min = None
        self._limits_wheel_base_left_max = None
        self._pass_fails_wheel_base_left = None
        self._results_wheel_base_left = None
        self._limits_wheelbase_right_min = None
        self._limits_wheelbase_right_max = None
        self._pass_fails_wheelbase_right = None
        self._results_wheelbase_right = None
        self._limits_toe_lr_min = None
        self._limits_toe_lr_max = None
        self._pass_fails_toe_lr = None
        self._results_toe_lr = None
        self._limits_toe_rr_min = None
        self._limits_toe_rr_max = None
        self._pass_fails_toe_rr = None
        self._results_toe_rr = None
        self._filename = None
        self._inspection_date_time = None
        self._upload_date = None
        self.discriminator = None
        if publish_state is not None:
            self.publish_state = publish_state
        if id is not None:
            self.id = id
        if tracking_id is not None:
            self.tracking_id = tracking_id
        if in_data_warehouse is not None:
            self.in_data_warehouse = in_data_warehouse
        if manually_set is not None:
            self.manually_set = manually_set
        if last_update is not None:
            self.last_update = last_update
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if nascar_one_race_id is not None:
            self.nascar_one_race_id = nascar_one_race_id
        if chassis_measurements_id is not None:
            self.chassis_measurements_id = chassis_measurements_id
        if hawkeye_id is not None:
            self.hawkeye_id = hawkeye_id
        if vehicle_number is not None:
            self.vehicle_number = vehicle_number
        if chassis is not None:
            self.chassis = chassis
        if limits_body_offset_min is not None:
            self.limits_body_offset_min = limits_body_offset_min
        if limits_body_offset_max is not None:
            self.limits_body_offset_max = limits_body_offset_max
        if pass_fails_body_offset is not None:
            self.pass_fails_body_offset = pass_fails_body_offset
        if results_body_offset is not None:
            self.results_body_offset = results_body_offset
        if limits_camber_lf_min is not None:
            self.limits_camber_lf_min = limits_camber_lf_min
        if limits_camber_lf_max is not None:
            self.limits_camber_lf_max = limits_camber_lf_max
        if pass_fails_camber_lf is not None:
            self.pass_fails_camber_lf = pass_fails_camber_lf
        if results_camber_lf is not None:
            self.results_camber_lf = results_camber_lf
        if limits_camber_lr_min is not None:
            self.limits_camber_lr_min = limits_camber_lr_min
        if limits_camber_lr_max is not None:
            self.limits_camber_lr_max = limits_camber_lr_max
        if pass_fails_camber_lr is not None:
            self.pass_fails_camber_lr = pass_fails_camber_lr
        if results_camber_lr is not None:
            self.results_camber_lr = results_camber_lr
        if limits_camber_rf_min is not None:
            self.limits_camber_rf_min = limits_camber_rf_min
        if limits_camber_rf_max is not None:
            self.limits_camber_rf_max = limits_camber_rf_max
        if pass_fails_camber_rf is not None:
            self.pass_fails_camber_rf = pass_fails_camber_rf
        if results_camber_rf is not None:
            self.results_camber_rf = results_camber_rf
        if limits_camber_rr_min is not None:
            self.limits_camber_rr_min = limits_camber_rr_min
        if limits_camber_rr_max is not None:
            self.limits_camber_rr_max = limits_camber_rr_max
        if pass_fails_camber_rr is not None:
            self.pass_fails_camber_rr = pass_fails_camber_rr
        if results_camber_rr is not None:
            self.results_camber_rr = results_camber_rr
        if limits_lf_frame_rail_min is not None:
            self.limits_lf_frame_rail_min = limits_lf_frame_rail_min
        if limits_lf_frame_rail_max is not None:
            self.limits_lf_frame_rail_max = limits_lf_frame_rail_max
        if pass_fails_lf_frame_rail is not None:
            self.pass_fails_lf_frame_rail = pass_fails_lf_frame_rail
        if results_lf_frame_rail is not None:
            self.results_lf_frame_rail = results_lf_frame_rail
        if limits_lr_frame_rail_min is not None:
            self.limits_lr_frame_rail_min = limits_lr_frame_rail_min
        if limits_lr_frame_rail_max is not None:
            self.limits_lr_frame_rail_max = limits_lr_frame_rail_max
        if pass_fails_lr_frame_rail is not None:
            self.pass_fails_lr_frame_rail = pass_fails_lr_frame_rail
        if results_lr_frame_rail is not None:
            self.results_lr_frame_rail = results_lr_frame_rail
        if limits_rf_frame_rail_min is not None:
            self.limits_rf_frame_rail_min = limits_rf_frame_rail_min
        if limits_rf_frame_rail_max is not None:
            self.limits_rf_frame_rail_max = limits_rf_frame_rail_max
        if pass_fails_rf_frame_rail is not None:
            self.pass_fails_rf_frame_rail = pass_fails_rf_frame_rail
        if results_rf_frame_rail is not None:
            self.results_rf_frame_rail = results_rf_frame_rail
        if limits_rh_location_left_min is not None:
            self.limits_rh_location_left_min = limits_rh_location_left_min
        if limits_rh_location_left_max is not None:
            self.limits_rh_location_left_max = limits_rh_location_left_max
        if pass_fails_rh_location_left is not None:
            self.pass_fails_rh_location_left = pass_fails_rh_location_left
        if results_rh_location_left is not None:
            self.results_rh_location_left = results_rh_location_left
        if limits_rh_location_right_min is not None:
            self.limits_rh_location_right_min = limits_rh_location_right_min
        if limits_rh_location_right_max is not None:
            self.limits_rh_location_right_max = limits_rh_location_right_max
        if pass_fails_rh_location_right is not None:
            self.pass_fails_rh_location_right = pass_fails_rh_location_right
        if results_rh_location_right is not None:
            self.results_rh_location_right = results_rh_location_right
        if limits_rh_skew_min is not None:
            self.limits_rh_skew_min = limits_rh_skew_min
        if limits_rh_skew_max is not None:
            self.limits_rh_skew_max = limits_rh_skew_max
        if pass_fails_rh_skew is not None:
            self.pass_fails_rh_skew = pass_fails_rh_skew
        if results_rh_skew is not None:
            self.results_rh_skew = results_rh_skew
        if limits_rr_frame_rail_min is not None:
            self.limits_rr_frame_rail_min = limits_rr_frame_rail_min
        if limits_rr_frame_rail_max is not None:
            self.limits_rr_frame_rail_max = limits_rr_frame_rail_max
        if pass_fails_rr_frame_rail is not None:
            self.pass_fails_rr_frame_rail = pass_fails_rr_frame_rail
        if results_rr_frame_rail is not None:
            self.results_rr_frame_rail = results_rr_frame_rail
        if limits_right_parallel_min is not None:
            self.limits_right_parallel_min = limits_right_parallel_min
        if limits_right_parallel_max is not None:
            self.limits_right_parallel_max = limits_right_parallel_max
        if pass_fails_right_parallel is not None:
            self.pass_fails_right_parallel = pass_fails_right_parallel
        if results_right_parallel is not None:
            self.results_right_parallel = results_right_parallel
        if limits_treadwidth_front_min is not None:
            self.limits_treadwidth_front_min = limits_treadwidth_front_min
        if limits_treadwidth_front_max is not None:
            self.limits_treadwidth_front_max = limits_treadwidth_front_max
        if pass_fails_treadwidth_front is not None:
            self.pass_fails_treadwidth_front = pass_fails_treadwidth_front
        if results_treadwidth_front is not None:
            self.results_treadwidth_front = results_treadwidth_front
        if limits_treadwidth_rear_min is not None:
            self.limits_treadwidth_rear_min = limits_treadwidth_rear_min
        if limits_treadwidth_rear_max is not None:
            self.limits_treadwidth_rear_max = limits_treadwidth_rear_max
        if pass_fails_treadwidth_rear is not None:
            self.pass_fails_treadwidth_rear = pass_fails_treadwidth_rear
        if results_treadwidth_rear is not None:
            self.results_treadwidth_rear = results_treadwidth_rear
        if limits_wheel_base_left_min is not None:
            self.limits_wheel_base_left_min = limits_wheel_base_left_min
        if limits_wheel_base_left_max is not None:
            self.limits_wheel_base_left_max = limits_wheel_base_left_max
        if pass_fails_wheel_base_left is not None:
            self.pass_fails_wheel_base_left = pass_fails_wheel_base_left
        if results_wheel_base_left is not None:
            self.results_wheel_base_left = results_wheel_base_left
        if limits_wheelbase_right_min is not None:
            self.limits_wheelbase_right_min = limits_wheelbase_right_min
        if limits_wheelbase_right_max is not None:
            self.limits_wheelbase_right_max = limits_wheelbase_right_max
        if pass_fails_wheelbase_right is not None:
            self.pass_fails_wheelbase_right = pass_fails_wheelbase_right
        if results_wheelbase_right is not None:
            self.results_wheelbase_right = results_wheelbase_right
        if limits_toe_lr_min is not None:
            self.limits_toe_lr_min = limits_toe_lr_min
        if limits_toe_lr_max is not None:
            self.limits_toe_lr_max = limits_toe_lr_max
        if pass_fails_toe_lr is not None:
            self.pass_fails_toe_lr = pass_fails_toe_lr
        if results_toe_lr is not None:
            self.results_toe_lr = results_toe_lr
        if limits_toe_rr_min is not None:
            self.limits_toe_rr_min = limits_toe_rr_min
        if limits_toe_rr_max is not None:
            self.limits_toe_rr_max = limits_toe_rr_max
        if pass_fails_toe_rr is not None:
            self.pass_fails_toe_rr = pass_fails_toe_rr
        if results_toe_rr is not None:
            self.results_toe_rr = results_toe_rr
        if filename is not None:
            self.filename = filename
        if inspection_date_time is not None:
            self.inspection_date_time = inspection_date_time
        if upload_date is not None:
            self.upload_date = upload_date

    @property
    def publish_state(self):
        """Gets the publish_state of this EditorOSSScan.  # noqa: E501


        :return: The publish_state of this EditorOSSScan.  # noqa: E501
        :rtype: PublishState
        """
        return self._publish_state

    @publish_state.setter
    def publish_state(self, publish_state):
        """Sets the publish_state of this EditorOSSScan.


        :param publish_state: The publish_state of this EditorOSSScan.  # noqa: E501
        :type: PublishState
        """

        self._publish_state = publish_state

    @property
    def id(self):
        """Gets the id of this EditorOSSScan.  # noqa: E501


        :return: The id of this EditorOSSScan.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EditorOSSScan.


        :param id: The id of this EditorOSSScan.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tracking_id(self):
        """Gets the tracking_id of this EditorOSSScan.  # noqa: E501


        :return: The tracking_id of this EditorOSSScan.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this EditorOSSScan.


        :param tracking_id: The tracking_id of this EditorOSSScan.  # noqa: E501
        :type: str
        """

        self._tracking_id = tracking_id

    @property
    def in_data_warehouse(self):
        """Gets the in_data_warehouse of this EditorOSSScan.  # noqa: E501


        :return: The in_data_warehouse of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._in_data_warehouse

    @in_data_warehouse.setter
    def in_data_warehouse(self, in_data_warehouse):
        """Sets the in_data_warehouse of this EditorOSSScan.


        :param in_data_warehouse: The in_data_warehouse of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._in_data_warehouse = in_data_warehouse

    @property
    def manually_set(self):
        """Gets the manually_set of this EditorOSSScan.  # noqa: E501


        :return: The manually_set of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._manually_set

    @manually_set.setter
    def manually_set(self, manually_set):
        """Sets the manually_set of this EditorOSSScan.


        :param manually_set: The manually_set of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._manually_set = manually_set

    @property
    def last_update(self):
        """Gets the last_update of this EditorOSSScan.  # noqa: E501


        :return: The last_update of this EditorOSSScan.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this EditorOSSScan.


        :param last_update: The last_update of this EditorOSSScan.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this EditorOSSScan.  # noqa: E501


        :return: The last_updated_by of this EditorOSSScan.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this EditorOSSScan.


        :param last_updated_by: The last_updated_by of this EditorOSSScan.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def nascar_one_race_id(self):
        """Gets the nascar_one_race_id of this EditorOSSScan.  # noqa: E501


        :return: The nascar_one_race_id of this EditorOSSScan.  # noqa: E501
        :rtype: int
        """
        return self._nascar_one_race_id

    @nascar_one_race_id.setter
    def nascar_one_race_id(self, nascar_one_race_id):
        """Sets the nascar_one_race_id of this EditorOSSScan.


        :param nascar_one_race_id: The nascar_one_race_id of this EditorOSSScan.  # noqa: E501
        :type: int
        """

        self._nascar_one_race_id = nascar_one_race_id

    @property
    def chassis_measurements_id(self):
        """Gets the chassis_measurements_id of this EditorOSSScan.  # noqa: E501


        :return: The chassis_measurements_id of this EditorOSSScan.  # noqa: E501
        :rtype: int
        """
        return self._chassis_measurements_id

    @chassis_measurements_id.setter
    def chassis_measurements_id(self, chassis_measurements_id):
        """Sets the chassis_measurements_id of this EditorOSSScan.


        :param chassis_measurements_id: The chassis_measurements_id of this EditorOSSScan.  # noqa: E501
        :type: int
        """

        self._chassis_measurements_id = chassis_measurements_id

    @property
    def hawkeye_id(self):
        """Gets the hawkeye_id of this EditorOSSScan.  # noqa: E501


        :return: The hawkeye_id of this EditorOSSScan.  # noqa: E501
        :rtype: int
        """
        return self._hawkeye_id

    @hawkeye_id.setter
    def hawkeye_id(self, hawkeye_id):
        """Sets the hawkeye_id of this EditorOSSScan.


        :param hawkeye_id: The hawkeye_id of this EditorOSSScan.  # noqa: E501
        :type: int
        """

        self._hawkeye_id = hawkeye_id

    @property
    def vehicle_number(self):
        """Gets the vehicle_number of this EditorOSSScan.  # noqa: E501


        :return: The vehicle_number of this EditorOSSScan.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_number

    @vehicle_number.setter
    def vehicle_number(self, vehicle_number):
        """Sets the vehicle_number of this EditorOSSScan.


        :param vehicle_number: The vehicle_number of this EditorOSSScan.  # noqa: E501
        :type: str
        """

        self._vehicle_number = vehicle_number

    @property
    def chassis(self):
        """Gets the chassis of this EditorOSSScan.  # noqa: E501


        :return: The chassis of this EditorOSSScan.  # noqa: E501
        :rtype: str
        """
        return self._chassis

    @chassis.setter
    def chassis(self, chassis):
        """Sets the chassis of this EditorOSSScan.


        :param chassis: The chassis of this EditorOSSScan.  # noqa: E501
        :type: str
        """

        self._chassis = chassis

    @property
    def limits_body_offset_min(self):
        """Gets the limits_body_offset_min of this EditorOSSScan.  # noqa: E501


        :return: The limits_body_offset_min of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_body_offset_min

    @limits_body_offset_min.setter
    def limits_body_offset_min(self, limits_body_offset_min):
        """Sets the limits_body_offset_min of this EditorOSSScan.


        :param limits_body_offset_min: The limits_body_offset_min of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_body_offset_min = limits_body_offset_min

    @property
    def limits_body_offset_max(self):
        """Gets the limits_body_offset_max of this EditorOSSScan.  # noqa: E501


        :return: The limits_body_offset_max of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_body_offset_max

    @limits_body_offset_max.setter
    def limits_body_offset_max(self, limits_body_offset_max):
        """Sets the limits_body_offset_max of this EditorOSSScan.


        :param limits_body_offset_max: The limits_body_offset_max of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_body_offset_max = limits_body_offset_max

    @property
    def pass_fails_body_offset(self):
        """Gets the pass_fails_body_offset of this EditorOSSScan.  # noqa: E501


        :return: The pass_fails_body_offset of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._pass_fails_body_offset

    @pass_fails_body_offset.setter
    def pass_fails_body_offset(self, pass_fails_body_offset):
        """Sets the pass_fails_body_offset of this EditorOSSScan.


        :param pass_fails_body_offset: The pass_fails_body_offset of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._pass_fails_body_offset = pass_fails_body_offset

    @property
    def results_body_offset(self):
        """Gets the results_body_offset of this EditorOSSScan.  # noqa: E501


        :return: The results_body_offset of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_body_offset

    @results_body_offset.setter
    def results_body_offset(self, results_body_offset):
        """Sets the results_body_offset of this EditorOSSScan.


        :param results_body_offset: The results_body_offset of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._results_body_offset = results_body_offset

    @property
    def limits_camber_lf_min(self):
        """Gets the limits_camber_lf_min of this EditorOSSScan.  # noqa: E501


        :return: The limits_camber_lf_min of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_camber_lf_min

    @limits_camber_lf_min.setter
    def limits_camber_lf_min(self, limits_camber_lf_min):
        """Sets the limits_camber_lf_min of this EditorOSSScan.


        :param limits_camber_lf_min: The limits_camber_lf_min of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_camber_lf_min = limits_camber_lf_min

    @property
    def limits_camber_lf_max(self):
        """Gets the limits_camber_lf_max of this EditorOSSScan.  # noqa: E501


        :return: The limits_camber_lf_max of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_camber_lf_max

    @limits_camber_lf_max.setter
    def limits_camber_lf_max(self, limits_camber_lf_max):
        """Sets the limits_camber_lf_max of this EditorOSSScan.


        :param limits_camber_lf_max: The limits_camber_lf_max of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_camber_lf_max = limits_camber_lf_max

    @property
    def pass_fails_camber_lf(self):
        """Gets the pass_fails_camber_lf of this EditorOSSScan.  # noqa: E501


        :return: The pass_fails_camber_lf of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._pass_fails_camber_lf

    @pass_fails_camber_lf.setter
    def pass_fails_camber_lf(self, pass_fails_camber_lf):
        """Sets the pass_fails_camber_lf of this EditorOSSScan.


        :param pass_fails_camber_lf: The pass_fails_camber_lf of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._pass_fails_camber_lf = pass_fails_camber_lf

    @property
    def results_camber_lf(self):
        """Gets the results_camber_lf of this EditorOSSScan.  # noqa: E501


        :return: The results_camber_lf of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_camber_lf

    @results_camber_lf.setter
    def results_camber_lf(self, results_camber_lf):
        """Sets the results_camber_lf of this EditorOSSScan.


        :param results_camber_lf: The results_camber_lf of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._results_camber_lf = results_camber_lf

    @property
    def limits_camber_lr_min(self):
        """Gets the limits_camber_lr_min of this EditorOSSScan.  # noqa: E501


        :return: The limits_camber_lr_min of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_camber_lr_min

    @limits_camber_lr_min.setter
    def limits_camber_lr_min(self, limits_camber_lr_min):
        """Sets the limits_camber_lr_min of this EditorOSSScan.


        :param limits_camber_lr_min: The limits_camber_lr_min of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_camber_lr_min = limits_camber_lr_min

    @property
    def limits_camber_lr_max(self):
        """Gets the limits_camber_lr_max of this EditorOSSScan.  # noqa: E501


        :return: The limits_camber_lr_max of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_camber_lr_max

    @limits_camber_lr_max.setter
    def limits_camber_lr_max(self, limits_camber_lr_max):
        """Sets the limits_camber_lr_max of this EditorOSSScan.


        :param limits_camber_lr_max: The limits_camber_lr_max of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_camber_lr_max = limits_camber_lr_max

    @property
    def pass_fails_camber_lr(self):
        """Gets the pass_fails_camber_lr of this EditorOSSScan.  # noqa: E501


        :return: The pass_fails_camber_lr of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._pass_fails_camber_lr

    @pass_fails_camber_lr.setter
    def pass_fails_camber_lr(self, pass_fails_camber_lr):
        """Sets the pass_fails_camber_lr of this EditorOSSScan.


        :param pass_fails_camber_lr: The pass_fails_camber_lr of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._pass_fails_camber_lr = pass_fails_camber_lr

    @property
    def results_camber_lr(self):
        """Gets the results_camber_lr of this EditorOSSScan.  # noqa: E501


        :return: The results_camber_lr of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_camber_lr

    @results_camber_lr.setter
    def results_camber_lr(self, results_camber_lr):
        """Sets the results_camber_lr of this EditorOSSScan.


        :param results_camber_lr: The results_camber_lr of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._results_camber_lr = results_camber_lr

    @property
    def limits_camber_rf_min(self):
        """Gets the limits_camber_rf_min of this EditorOSSScan.  # noqa: E501


        :return: The limits_camber_rf_min of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_camber_rf_min

    @limits_camber_rf_min.setter
    def limits_camber_rf_min(self, limits_camber_rf_min):
        """Sets the limits_camber_rf_min of this EditorOSSScan.


        :param limits_camber_rf_min: The limits_camber_rf_min of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_camber_rf_min = limits_camber_rf_min

    @property
    def limits_camber_rf_max(self):
        """Gets the limits_camber_rf_max of this EditorOSSScan.  # noqa: E501


        :return: The limits_camber_rf_max of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_camber_rf_max

    @limits_camber_rf_max.setter
    def limits_camber_rf_max(self, limits_camber_rf_max):
        """Sets the limits_camber_rf_max of this EditorOSSScan.


        :param limits_camber_rf_max: The limits_camber_rf_max of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_camber_rf_max = limits_camber_rf_max

    @property
    def pass_fails_camber_rf(self):
        """Gets the pass_fails_camber_rf of this EditorOSSScan.  # noqa: E501


        :return: The pass_fails_camber_rf of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._pass_fails_camber_rf

    @pass_fails_camber_rf.setter
    def pass_fails_camber_rf(self, pass_fails_camber_rf):
        """Sets the pass_fails_camber_rf of this EditorOSSScan.


        :param pass_fails_camber_rf: The pass_fails_camber_rf of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._pass_fails_camber_rf = pass_fails_camber_rf

    @property
    def results_camber_rf(self):
        """Gets the results_camber_rf of this EditorOSSScan.  # noqa: E501


        :return: The results_camber_rf of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_camber_rf

    @results_camber_rf.setter
    def results_camber_rf(self, results_camber_rf):
        """Sets the results_camber_rf of this EditorOSSScan.


        :param results_camber_rf: The results_camber_rf of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._results_camber_rf = results_camber_rf

    @property
    def limits_camber_rr_min(self):
        """Gets the limits_camber_rr_min of this EditorOSSScan.  # noqa: E501


        :return: The limits_camber_rr_min of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_camber_rr_min

    @limits_camber_rr_min.setter
    def limits_camber_rr_min(self, limits_camber_rr_min):
        """Sets the limits_camber_rr_min of this EditorOSSScan.


        :param limits_camber_rr_min: The limits_camber_rr_min of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_camber_rr_min = limits_camber_rr_min

    @property
    def limits_camber_rr_max(self):
        """Gets the limits_camber_rr_max of this EditorOSSScan.  # noqa: E501


        :return: The limits_camber_rr_max of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_camber_rr_max

    @limits_camber_rr_max.setter
    def limits_camber_rr_max(self, limits_camber_rr_max):
        """Sets the limits_camber_rr_max of this EditorOSSScan.


        :param limits_camber_rr_max: The limits_camber_rr_max of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_camber_rr_max = limits_camber_rr_max

    @property
    def pass_fails_camber_rr(self):
        """Gets the pass_fails_camber_rr of this EditorOSSScan.  # noqa: E501


        :return: The pass_fails_camber_rr of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._pass_fails_camber_rr

    @pass_fails_camber_rr.setter
    def pass_fails_camber_rr(self, pass_fails_camber_rr):
        """Sets the pass_fails_camber_rr of this EditorOSSScan.


        :param pass_fails_camber_rr: The pass_fails_camber_rr of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._pass_fails_camber_rr = pass_fails_camber_rr

    @property
    def results_camber_rr(self):
        """Gets the results_camber_rr of this EditorOSSScan.  # noqa: E501


        :return: The results_camber_rr of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_camber_rr

    @results_camber_rr.setter
    def results_camber_rr(self, results_camber_rr):
        """Sets the results_camber_rr of this EditorOSSScan.


        :param results_camber_rr: The results_camber_rr of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._results_camber_rr = results_camber_rr

    @property
    def limits_lf_frame_rail_min(self):
        """Gets the limits_lf_frame_rail_min of this EditorOSSScan.  # noqa: E501


        :return: The limits_lf_frame_rail_min of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_lf_frame_rail_min

    @limits_lf_frame_rail_min.setter
    def limits_lf_frame_rail_min(self, limits_lf_frame_rail_min):
        """Sets the limits_lf_frame_rail_min of this EditorOSSScan.


        :param limits_lf_frame_rail_min: The limits_lf_frame_rail_min of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_lf_frame_rail_min = limits_lf_frame_rail_min

    @property
    def limits_lf_frame_rail_max(self):
        """Gets the limits_lf_frame_rail_max of this EditorOSSScan.  # noqa: E501


        :return: The limits_lf_frame_rail_max of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_lf_frame_rail_max

    @limits_lf_frame_rail_max.setter
    def limits_lf_frame_rail_max(self, limits_lf_frame_rail_max):
        """Sets the limits_lf_frame_rail_max of this EditorOSSScan.


        :param limits_lf_frame_rail_max: The limits_lf_frame_rail_max of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_lf_frame_rail_max = limits_lf_frame_rail_max

    @property
    def pass_fails_lf_frame_rail(self):
        """Gets the pass_fails_lf_frame_rail of this EditorOSSScan.  # noqa: E501


        :return: The pass_fails_lf_frame_rail of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._pass_fails_lf_frame_rail

    @pass_fails_lf_frame_rail.setter
    def pass_fails_lf_frame_rail(self, pass_fails_lf_frame_rail):
        """Sets the pass_fails_lf_frame_rail of this EditorOSSScan.


        :param pass_fails_lf_frame_rail: The pass_fails_lf_frame_rail of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._pass_fails_lf_frame_rail = pass_fails_lf_frame_rail

    @property
    def results_lf_frame_rail(self):
        """Gets the results_lf_frame_rail of this EditorOSSScan.  # noqa: E501


        :return: The results_lf_frame_rail of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_lf_frame_rail

    @results_lf_frame_rail.setter
    def results_lf_frame_rail(self, results_lf_frame_rail):
        """Sets the results_lf_frame_rail of this EditorOSSScan.


        :param results_lf_frame_rail: The results_lf_frame_rail of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._results_lf_frame_rail = results_lf_frame_rail

    @property
    def limits_lr_frame_rail_min(self):
        """Gets the limits_lr_frame_rail_min of this EditorOSSScan.  # noqa: E501


        :return: The limits_lr_frame_rail_min of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_lr_frame_rail_min

    @limits_lr_frame_rail_min.setter
    def limits_lr_frame_rail_min(self, limits_lr_frame_rail_min):
        """Sets the limits_lr_frame_rail_min of this EditorOSSScan.


        :param limits_lr_frame_rail_min: The limits_lr_frame_rail_min of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_lr_frame_rail_min = limits_lr_frame_rail_min

    @property
    def limits_lr_frame_rail_max(self):
        """Gets the limits_lr_frame_rail_max of this EditorOSSScan.  # noqa: E501


        :return: The limits_lr_frame_rail_max of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_lr_frame_rail_max

    @limits_lr_frame_rail_max.setter
    def limits_lr_frame_rail_max(self, limits_lr_frame_rail_max):
        """Sets the limits_lr_frame_rail_max of this EditorOSSScan.


        :param limits_lr_frame_rail_max: The limits_lr_frame_rail_max of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_lr_frame_rail_max = limits_lr_frame_rail_max

    @property
    def pass_fails_lr_frame_rail(self):
        """Gets the pass_fails_lr_frame_rail of this EditorOSSScan.  # noqa: E501


        :return: The pass_fails_lr_frame_rail of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._pass_fails_lr_frame_rail

    @pass_fails_lr_frame_rail.setter
    def pass_fails_lr_frame_rail(self, pass_fails_lr_frame_rail):
        """Sets the pass_fails_lr_frame_rail of this EditorOSSScan.


        :param pass_fails_lr_frame_rail: The pass_fails_lr_frame_rail of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._pass_fails_lr_frame_rail = pass_fails_lr_frame_rail

    @property
    def results_lr_frame_rail(self):
        """Gets the results_lr_frame_rail of this EditorOSSScan.  # noqa: E501


        :return: The results_lr_frame_rail of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_lr_frame_rail

    @results_lr_frame_rail.setter
    def results_lr_frame_rail(self, results_lr_frame_rail):
        """Sets the results_lr_frame_rail of this EditorOSSScan.


        :param results_lr_frame_rail: The results_lr_frame_rail of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._results_lr_frame_rail = results_lr_frame_rail

    @property
    def limits_rf_frame_rail_min(self):
        """Gets the limits_rf_frame_rail_min of this EditorOSSScan.  # noqa: E501


        :return: The limits_rf_frame_rail_min of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rf_frame_rail_min

    @limits_rf_frame_rail_min.setter
    def limits_rf_frame_rail_min(self, limits_rf_frame_rail_min):
        """Sets the limits_rf_frame_rail_min of this EditorOSSScan.


        :param limits_rf_frame_rail_min: The limits_rf_frame_rail_min of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rf_frame_rail_min = limits_rf_frame_rail_min

    @property
    def limits_rf_frame_rail_max(self):
        """Gets the limits_rf_frame_rail_max of this EditorOSSScan.  # noqa: E501


        :return: The limits_rf_frame_rail_max of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rf_frame_rail_max

    @limits_rf_frame_rail_max.setter
    def limits_rf_frame_rail_max(self, limits_rf_frame_rail_max):
        """Sets the limits_rf_frame_rail_max of this EditorOSSScan.


        :param limits_rf_frame_rail_max: The limits_rf_frame_rail_max of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rf_frame_rail_max = limits_rf_frame_rail_max

    @property
    def pass_fails_rf_frame_rail(self):
        """Gets the pass_fails_rf_frame_rail of this EditorOSSScan.  # noqa: E501


        :return: The pass_fails_rf_frame_rail of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._pass_fails_rf_frame_rail

    @pass_fails_rf_frame_rail.setter
    def pass_fails_rf_frame_rail(self, pass_fails_rf_frame_rail):
        """Sets the pass_fails_rf_frame_rail of this EditorOSSScan.


        :param pass_fails_rf_frame_rail: The pass_fails_rf_frame_rail of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._pass_fails_rf_frame_rail = pass_fails_rf_frame_rail

    @property
    def results_rf_frame_rail(self):
        """Gets the results_rf_frame_rail of this EditorOSSScan.  # noqa: E501


        :return: The results_rf_frame_rail of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_rf_frame_rail

    @results_rf_frame_rail.setter
    def results_rf_frame_rail(self, results_rf_frame_rail):
        """Sets the results_rf_frame_rail of this EditorOSSScan.


        :param results_rf_frame_rail: The results_rf_frame_rail of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._results_rf_frame_rail = results_rf_frame_rail

    @property
    def limits_rh_location_left_min(self):
        """Gets the limits_rh_location_left_min of this EditorOSSScan.  # noqa: E501


        :return: The limits_rh_location_left_min of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rh_location_left_min

    @limits_rh_location_left_min.setter
    def limits_rh_location_left_min(self, limits_rh_location_left_min):
        """Sets the limits_rh_location_left_min of this EditorOSSScan.


        :param limits_rh_location_left_min: The limits_rh_location_left_min of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rh_location_left_min = limits_rh_location_left_min

    @property
    def limits_rh_location_left_max(self):
        """Gets the limits_rh_location_left_max of this EditorOSSScan.  # noqa: E501


        :return: The limits_rh_location_left_max of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rh_location_left_max

    @limits_rh_location_left_max.setter
    def limits_rh_location_left_max(self, limits_rh_location_left_max):
        """Sets the limits_rh_location_left_max of this EditorOSSScan.


        :param limits_rh_location_left_max: The limits_rh_location_left_max of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rh_location_left_max = limits_rh_location_left_max

    @property
    def pass_fails_rh_location_left(self):
        """Gets the pass_fails_rh_location_left of this EditorOSSScan.  # noqa: E501


        :return: The pass_fails_rh_location_left of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._pass_fails_rh_location_left

    @pass_fails_rh_location_left.setter
    def pass_fails_rh_location_left(self, pass_fails_rh_location_left):
        """Sets the pass_fails_rh_location_left of this EditorOSSScan.


        :param pass_fails_rh_location_left: The pass_fails_rh_location_left of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._pass_fails_rh_location_left = pass_fails_rh_location_left

    @property
    def results_rh_location_left(self):
        """Gets the results_rh_location_left of this EditorOSSScan.  # noqa: E501


        :return: The results_rh_location_left of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_rh_location_left

    @results_rh_location_left.setter
    def results_rh_location_left(self, results_rh_location_left):
        """Sets the results_rh_location_left of this EditorOSSScan.


        :param results_rh_location_left: The results_rh_location_left of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._results_rh_location_left = results_rh_location_left

    @property
    def limits_rh_location_right_min(self):
        """Gets the limits_rh_location_right_min of this EditorOSSScan.  # noqa: E501


        :return: The limits_rh_location_right_min of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rh_location_right_min

    @limits_rh_location_right_min.setter
    def limits_rh_location_right_min(self, limits_rh_location_right_min):
        """Sets the limits_rh_location_right_min of this EditorOSSScan.


        :param limits_rh_location_right_min: The limits_rh_location_right_min of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rh_location_right_min = limits_rh_location_right_min

    @property
    def limits_rh_location_right_max(self):
        """Gets the limits_rh_location_right_max of this EditorOSSScan.  # noqa: E501


        :return: The limits_rh_location_right_max of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rh_location_right_max

    @limits_rh_location_right_max.setter
    def limits_rh_location_right_max(self, limits_rh_location_right_max):
        """Sets the limits_rh_location_right_max of this EditorOSSScan.


        :param limits_rh_location_right_max: The limits_rh_location_right_max of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rh_location_right_max = limits_rh_location_right_max

    @property
    def pass_fails_rh_location_right(self):
        """Gets the pass_fails_rh_location_right of this EditorOSSScan.  # noqa: E501


        :return: The pass_fails_rh_location_right of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._pass_fails_rh_location_right

    @pass_fails_rh_location_right.setter
    def pass_fails_rh_location_right(self, pass_fails_rh_location_right):
        """Sets the pass_fails_rh_location_right of this EditorOSSScan.


        :param pass_fails_rh_location_right: The pass_fails_rh_location_right of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._pass_fails_rh_location_right = pass_fails_rh_location_right

    @property
    def results_rh_location_right(self):
        """Gets the results_rh_location_right of this EditorOSSScan.  # noqa: E501


        :return: The results_rh_location_right of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_rh_location_right

    @results_rh_location_right.setter
    def results_rh_location_right(self, results_rh_location_right):
        """Sets the results_rh_location_right of this EditorOSSScan.


        :param results_rh_location_right: The results_rh_location_right of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._results_rh_location_right = results_rh_location_right

    @property
    def limits_rh_skew_min(self):
        """Gets the limits_rh_skew_min of this EditorOSSScan.  # noqa: E501


        :return: The limits_rh_skew_min of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rh_skew_min

    @limits_rh_skew_min.setter
    def limits_rh_skew_min(self, limits_rh_skew_min):
        """Sets the limits_rh_skew_min of this EditorOSSScan.


        :param limits_rh_skew_min: The limits_rh_skew_min of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rh_skew_min = limits_rh_skew_min

    @property
    def limits_rh_skew_max(self):
        """Gets the limits_rh_skew_max of this EditorOSSScan.  # noqa: E501


        :return: The limits_rh_skew_max of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rh_skew_max

    @limits_rh_skew_max.setter
    def limits_rh_skew_max(self, limits_rh_skew_max):
        """Sets the limits_rh_skew_max of this EditorOSSScan.


        :param limits_rh_skew_max: The limits_rh_skew_max of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rh_skew_max = limits_rh_skew_max

    @property
    def pass_fails_rh_skew(self):
        """Gets the pass_fails_rh_skew of this EditorOSSScan.  # noqa: E501


        :return: The pass_fails_rh_skew of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._pass_fails_rh_skew

    @pass_fails_rh_skew.setter
    def pass_fails_rh_skew(self, pass_fails_rh_skew):
        """Sets the pass_fails_rh_skew of this EditorOSSScan.


        :param pass_fails_rh_skew: The pass_fails_rh_skew of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._pass_fails_rh_skew = pass_fails_rh_skew

    @property
    def results_rh_skew(self):
        """Gets the results_rh_skew of this EditorOSSScan.  # noqa: E501


        :return: The results_rh_skew of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_rh_skew

    @results_rh_skew.setter
    def results_rh_skew(self, results_rh_skew):
        """Sets the results_rh_skew of this EditorOSSScan.


        :param results_rh_skew: The results_rh_skew of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._results_rh_skew = results_rh_skew

    @property
    def limits_rr_frame_rail_min(self):
        """Gets the limits_rr_frame_rail_min of this EditorOSSScan.  # noqa: E501


        :return: The limits_rr_frame_rail_min of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rr_frame_rail_min

    @limits_rr_frame_rail_min.setter
    def limits_rr_frame_rail_min(self, limits_rr_frame_rail_min):
        """Sets the limits_rr_frame_rail_min of this EditorOSSScan.


        :param limits_rr_frame_rail_min: The limits_rr_frame_rail_min of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rr_frame_rail_min = limits_rr_frame_rail_min

    @property
    def limits_rr_frame_rail_max(self):
        """Gets the limits_rr_frame_rail_max of this EditorOSSScan.  # noqa: E501


        :return: The limits_rr_frame_rail_max of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rr_frame_rail_max

    @limits_rr_frame_rail_max.setter
    def limits_rr_frame_rail_max(self, limits_rr_frame_rail_max):
        """Sets the limits_rr_frame_rail_max of this EditorOSSScan.


        :param limits_rr_frame_rail_max: The limits_rr_frame_rail_max of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rr_frame_rail_max = limits_rr_frame_rail_max

    @property
    def pass_fails_rr_frame_rail(self):
        """Gets the pass_fails_rr_frame_rail of this EditorOSSScan.  # noqa: E501


        :return: The pass_fails_rr_frame_rail of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._pass_fails_rr_frame_rail

    @pass_fails_rr_frame_rail.setter
    def pass_fails_rr_frame_rail(self, pass_fails_rr_frame_rail):
        """Sets the pass_fails_rr_frame_rail of this EditorOSSScan.


        :param pass_fails_rr_frame_rail: The pass_fails_rr_frame_rail of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._pass_fails_rr_frame_rail = pass_fails_rr_frame_rail

    @property
    def results_rr_frame_rail(self):
        """Gets the results_rr_frame_rail of this EditorOSSScan.  # noqa: E501


        :return: The results_rr_frame_rail of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_rr_frame_rail

    @results_rr_frame_rail.setter
    def results_rr_frame_rail(self, results_rr_frame_rail):
        """Sets the results_rr_frame_rail of this EditorOSSScan.


        :param results_rr_frame_rail: The results_rr_frame_rail of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._results_rr_frame_rail = results_rr_frame_rail

    @property
    def limits_right_parallel_min(self):
        """Gets the limits_right_parallel_min of this EditorOSSScan.  # noqa: E501


        :return: The limits_right_parallel_min of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_right_parallel_min

    @limits_right_parallel_min.setter
    def limits_right_parallel_min(self, limits_right_parallel_min):
        """Sets the limits_right_parallel_min of this EditorOSSScan.


        :param limits_right_parallel_min: The limits_right_parallel_min of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_right_parallel_min = limits_right_parallel_min

    @property
    def limits_right_parallel_max(self):
        """Gets the limits_right_parallel_max of this EditorOSSScan.  # noqa: E501


        :return: The limits_right_parallel_max of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_right_parallel_max

    @limits_right_parallel_max.setter
    def limits_right_parallel_max(self, limits_right_parallel_max):
        """Sets the limits_right_parallel_max of this EditorOSSScan.


        :param limits_right_parallel_max: The limits_right_parallel_max of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_right_parallel_max = limits_right_parallel_max

    @property
    def pass_fails_right_parallel(self):
        """Gets the pass_fails_right_parallel of this EditorOSSScan.  # noqa: E501


        :return: The pass_fails_right_parallel of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._pass_fails_right_parallel

    @pass_fails_right_parallel.setter
    def pass_fails_right_parallel(self, pass_fails_right_parallel):
        """Sets the pass_fails_right_parallel of this EditorOSSScan.


        :param pass_fails_right_parallel: The pass_fails_right_parallel of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._pass_fails_right_parallel = pass_fails_right_parallel

    @property
    def results_right_parallel(self):
        """Gets the results_right_parallel of this EditorOSSScan.  # noqa: E501


        :return: The results_right_parallel of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_right_parallel

    @results_right_parallel.setter
    def results_right_parallel(self, results_right_parallel):
        """Sets the results_right_parallel of this EditorOSSScan.


        :param results_right_parallel: The results_right_parallel of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._results_right_parallel = results_right_parallel

    @property
    def limits_treadwidth_front_min(self):
        """Gets the limits_treadwidth_front_min of this EditorOSSScan.  # noqa: E501


        :return: The limits_treadwidth_front_min of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_treadwidth_front_min

    @limits_treadwidth_front_min.setter
    def limits_treadwidth_front_min(self, limits_treadwidth_front_min):
        """Sets the limits_treadwidth_front_min of this EditorOSSScan.


        :param limits_treadwidth_front_min: The limits_treadwidth_front_min of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_treadwidth_front_min = limits_treadwidth_front_min

    @property
    def limits_treadwidth_front_max(self):
        """Gets the limits_treadwidth_front_max of this EditorOSSScan.  # noqa: E501


        :return: The limits_treadwidth_front_max of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_treadwidth_front_max

    @limits_treadwidth_front_max.setter
    def limits_treadwidth_front_max(self, limits_treadwidth_front_max):
        """Sets the limits_treadwidth_front_max of this EditorOSSScan.


        :param limits_treadwidth_front_max: The limits_treadwidth_front_max of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_treadwidth_front_max = limits_treadwidth_front_max

    @property
    def pass_fails_treadwidth_front(self):
        """Gets the pass_fails_treadwidth_front of this EditorOSSScan.  # noqa: E501


        :return: The pass_fails_treadwidth_front of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._pass_fails_treadwidth_front

    @pass_fails_treadwidth_front.setter
    def pass_fails_treadwidth_front(self, pass_fails_treadwidth_front):
        """Sets the pass_fails_treadwidth_front of this EditorOSSScan.


        :param pass_fails_treadwidth_front: The pass_fails_treadwidth_front of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._pass_fails_treadwidth_front = pass_fails_treadwidth_front

    @property
    def results_treadwidth_front(self):
        """Gets the results_treadwidth_front of this EditorOSSScan.  # noqa: E501


        :return: The results_treadwidth_front of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_treadwidth_front

    @results_treadwidth_front.setter
    def results_treadwidth_front(self, results_treadwidth_front):
        """Sets the results_treadwidth_front of this EditorOSSScan.


        :param results_treadwidth_front: The results_treadwidth_front of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._results_treadwidth_front = results_treadwidth_front

    @property
    def limits_treadwidth_rear_min(self):
        """Gets the limits_treadwidth_rear_min of this EditorOSSScan.  # noqa: E501


        :return: The limits_treadwidth_rear_min of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_treadwidth_rear_min

    @limits_treadwidth_rear_min.setter
    def limits_treadwidth_rear_min(self, limits_treadwidth_rear_min):
        """Sets the limits_treadwidth_rear_min of this EditorOSSScan.


        :param limits_treadwidth_rear_min: The limits_treadwidth_rear_min of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_treadwidth_rear_min = limits_treadwidth_rear_min

    @property
    def limits_treadwidth_rear_max(self):
        """Gets the limits_treadwidth_rear_max of this EditorOSSScan.  # noqa: E501


        :return: The limits_treadwidth_rear_max of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_treadwidth_rear_max

    @limits_treadwidth_rear_max.setter
    def limits_treadwidth_rear_max(self, limits_treadwidth_rear_max):
        """Sets the limits_treadwidth_rear_max of this EditorOSSScan.


        :param limits_treadwidth_rear_max: The limits_treadwidth_rear_max of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_treadwidth_rear_max = limits_treadwidth_rear_max

    @property
    def pass_fails_treadwidth_rear(self):
        """Gets the pass_fails_treadwidth_rear of this EditorOSSScan.  # noqa: E501


        :return: The pass_fails_treadwidth_rear of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._pass_fails_treadwidth_rear

    @pass_fails_treadwidth_rear.setter
    def pass_fails_treadwidth_rear(self, pass_fails_treadwidth_rear):
        """Sets the pass_fails_treadwidth_rear of this EditorOSSScan.


        :param pass_fails_treadwidth_rear: The pass_fails_treadwidth_rear of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._pass_fails_treadwidth_rear = pass_fails_treadwidth_rear

    @property
    def results_treadwidth_rear(self):
        """Gets the results_treadwidth_rear of this EditorOSSScan.  # noqa: E501


        :return: The results_treadwidth_rear of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_treadwidth_rear

    @results_treadwidth_rear.setter
    def results_treadwidth_rear(self, results_treadwidth_rear):
        """Sets the results_treadwidth_rear of this EditorOSSScan.


        :param results_treadwidth_rear: The results_treadwidth_rear of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._results_treadwidth_rear = results_treadwidth_rear

    @property
    def limits_wheel_base_left_min(self):
        """Gets the limits_wheel_base_left_min of this EditorOSSScan.  # noqa: E501


        :return: The limits_wheel_base_left_min of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_wheel_base_left_min

    @limits_wheel_base_left_min.setter
    def limits_wheel_base_left_min(self, limits_wheel_base_left_min):
        """Sets the limits_wheel_base_left_min of this EditorOSSScan.


        :param limits_wheel_base_left_min: The limits_wheel_base_left_min of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_wheel_base_left_min = limits_wheel_base_left_min

    @property
    def limits_wheel_base_left_max(self):
        """Gets the limits_wheel_base_left_max of this EditorOSSScan.  # noqa: E501


        :return: The limits_wheel_base_left_max of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_wheel_base_left_max

    @limits_wheel_base_left_max.setter
    def limits_wheel_base_left_max(self, limits_wheel_base_left_max):
        """Sets the limits_wheel_base_left_max of this EditorOSSScan.


        :param limits_wheel_base_left_max: The limits_wheel_base_left_max of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_wheel_base_left_max = limits_wheel_base_left_max

    @property
    def pass_fails_wheel_base_left(self):
        """Gets the pass_fails_wheel_base_left of this EditorOSSScan.  # noqa: E501


        :return: The pass_fails_wheel_base_left of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._pass_fails_wheel_base_left

    @pass_fails_wheel_base_left.setter
    def pass_fails_wheel_base_left(self, pass_fails_wheel_base_left):
        """Sets the pass_fails_wheel_base_left of this EditorOSSScan.


        :param pass_fails_wheel_base_left: The pass_fails_wheel_base_left of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._pass_fails_wheel_base_left = pass_fails_wheel_base_left

    @property
    def results_wheel_base_left(self):
        """Gets the results_wheel_base_left of this EditorOSSScan.  # noqa: E501


        :return: The results_wheel_base_left of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_wheel_base_left

    @results_wheel_base_left.setter
    def results_wheel_base_left(self, results_wheel_base_left):
        """Sets the results_wheel_base_left of this EditorOSSScan.


        :param results_wheel_base_left: The results_wheel_base_left of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._results_wheel_base_left = results_wheel_base_left

    @property
    def limits_wheelbase_right_min(self):
        """Gets the limits_wheelbase_right_min of this EditorOSSScan.  # noqa: E501


        :return: The limits_wheelbase_right_min of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_wheelbase_right_min

    @limits_wheelbase_right_min.setter
    def limits_wheelbase_right_min(self, limits_wheelbase_right_min):
        """Sets the limits_wheelbase_right_min of this EditorOSSScan.


        :param limits_wheelbase_right_min: The limits_wheelbase_right_min of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_wheelbase_right_min = limits_wheelbase_right_min

    @property
    def limits_wheelbase_right_max(self):
        """Gets the limits_wheelbase_right_max of this EditorOSSScan.  # noqa: E501


        :return: The limits_wheelbase_right_max of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_wheelbase_right_max

    @limits_wheelbase_right_max.setter
    def limits_wheelbase_right_max(self, limits_wheelbase_right_max):
        """Sets the limits_wheelbase_right_max of this EditorOSSScan.


        :param limits_wheelbase_right_max: The limits_wheelbase_right_max of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_wheelbase_right_max = limits_wheelbase_right_max

    @property
    def pass_fails_wheelbase_right(self):
        """Gets the pass_fails_wheelbase_right of this EditorOSSScan.  # noqa: E501


        :return: The pass_fails_wheelbase_right of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._pass_fails_wheelbase_right

    @pass_fails_wheelbase_right.setter
    def pass_fails_wheelbase_right(self, pass_fails_wheelbase_right):
        """Sets the pass_fails_wheelbase_right of this EditorOSSScan.


        :param pass_fails_wheelbase_right: The pass_fails_wheelbase_right of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._pass_fails_wheelbase_right = pass_fails_wheelbase_right

    @property
    def results_wheelbase_right(self):
        """Gets the results_wheelbase_right of this EditorOSSScan.  # noqa: E501


        :return: The results_wheelbase_right of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_wheelbase_right

    @results_wheelbase_right.setter
    def results_wheelbase_right(self, results_wheelbase_right):
        """Sets the results_wheelbase_right of this EditorOSSScan.


        :param results_wheelbase_right: The results_wheelbase_right of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._results_wheelbase_right = results_wheelbase_right

    @property
    def limits_toe_lr_min(self):
        """Gets the limits_toe_lr_min of this EditorOSSScan.  # noqa: E501


        :return: The limits_toe_lr_min of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_toe_lr_min

    @limits_toe_lr_min.setter
    def limits_toe_lr_min(self, limits_toe_lr_min):
        """Sets the limits_toe_lr_min of this EditorOSSScan.


        :param limits_toe_lr_min: The limits_toe_lr_min of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_toe_lr_min = limits_toe_lr_min

    @property
    def limits_toe_lr_max(self):
        """Gets the limits_toe_lr_max of this EditorOSSScan.  # noqa: E501


        :return: The limits_toe_lr_max of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_toe_lr_max

    @limits_toe_lr_max.setter
    def limits_toe_lr_max(self, limits_toe_lr_max):
        """Sets the limits_toe_lr_max of this EditorOSSScan.


        :param limits_toe_lr_max: The limits_toe_lr_max of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_toe_lr_max = limits_toe_lr_max

    @property
    def pass_fails_toe_lr(self):
        """Gets the pass_fails_toe_lr of this EditorOSSScan.  # noqa: E501


        :return: The pass_fails_toe_lr of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._pass_fails_toe_lr

    @pass_fails_toe_lr.setter
    def pass_fails_toe_lr(self, pass_fails_toe_lr):
        """Sets the pass_fails_toe_lr of this EditorOSSScan.


        :param pass_fails_toe_lr: The pass_fails_toe_lr of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._pass_fails_toe_lr = pass_fails_toe_lr

    @property
    def results_toe_lr(self):
        """Gets the results_toe_lr of this EditorOSSScan.  # noqa: E501


        :return: The results_toe_lr of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_toe_lr

    @results_toe_lr.setter
    def results_toe_lr(self, results_toe_lr):
        """Sets the results_toe_lr of this EditorOSSScan.


        :param results_toe_lr: The results_toe_lr of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._results_toe_lr = results_toe_lr

    @property
    def limits_toe_rr_min(self):
        """Gets the limits_toe_rr_min of this EditorOSSScan.  # noqa: E501


        :return: The limits_toe_rr_min of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_toe_rr_min

    @limits_toe_rr_min.setter
    def limits_toe_rr_min(self, limits_toe_rr_min):
        """Sets the limits_toe_rr_min of this EditorOSSScan.


        :param limits_toe_rr_min: The limits_toe_rr_min of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_toe_rr_min = limits_toe_rr_min

    @property
    def limits_toe_rr_max(self):
        """Gets the limits_toe_rr_max of this EditorOSSScan.  # noqa: E501


        :return: The limits_toe_rr_max of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_toe_rr_max

    @limits_toe_rr_max.setter
    def limits_toe_rr_max(self, limits_toe_rr_max):
        """Sets the limits_toe_rr_max of this EditorOSSScan.


        :param limits_toe_rr_max: The limits_toe_rr_max of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._limits_toe_rr_max = limits_toe_rr_max

    @property
    def pass_fails_toe_rr(self):
        """Gets the pass_fails_toe_rr of this EditorOSSScan.  # noqa: E501


        :return: The pass_fails_toe_rr of this EditorOSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._pass_fails_toe_rr

    @pass_fails_toe_rr.setter
    def pass_fails_toe_rr(self, pass_fails_toe_rr):
        """Sets the pass_fails_toe_rr of this EditorOSSScan.


        :param pass_fails_toe_rr: The pass_fails_toe_rr of this EditorOSSScan.  # noqa: E501
        :type: bool
        """

        self._pass_fails_toe_rr = pass_fails_toe_rr

    @property
    def results_toe_rr(self):
        """Gets the results_toe_rr of this EditorOSSScan.  # noqa: E501


        :return: The results_toe_rr of this EditorOSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_toe_rr

    @results_toe_rr.setter
    def results_toe_rr(self, results_toe_rr):
        """Sets the results_toe_rr of this EditorOSSScan.


        :param results_toe_rr: The results_toe_rr of this EditorOSSScan.  # noqa: E501
        :type: float
        """

        self._results_toe_rr = results_toe_rr

    @property
    def filename(self):
        """Gets the filename of this EditorOSSScan.  # noqa: E501


        :return: The filename of this EditorOSSScan.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this EditorOSSScan.


        :param filename: The filename of this EditorOSSScan.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def inspection_date_time(self):
        """Gets the inspection_date_time of this EditorOSSScan.  # noqa: E501


        :return: The inspection_date_time of this EditorOSSScan.  # noqa: E501
        :rtype: datetime
        """
        return self._inspection_date_time

    @inspection_date_time.setter
    def inspection_date_time(self, inspection_date_time):
        """Sets the inspection_date_time of this EditorOSSScan.


        :param inspection_date_time: The inspection_date_time of this EditorOSSScan.  # noqa: E501
        :type: datetime
        """

        self._inspection_date_time = inspection_date_time

    @property
    def upload_date(self):
        """Gets the upload_date of this EditorOSSScan.  # noqa: E501


        :return: The upload_date of this EditorOSSScan.  # noqa: E501
        :rtype: datetime
        """
        return self._upload_date

    @upload_date.setter
    def upload_date(self, upload_date):
        """Sets the upload_date of this EditorOSSScan.


        :param upload_date: The upload_date of this EditorOSSScan.  # noqa: E501
        :type: datetime
        """

        self._upload_date = upload_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditorOSSScan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditorOSSScan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
