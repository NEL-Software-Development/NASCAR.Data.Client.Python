# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class EditorPitstop(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'publish_state': 'PublishState',
        'id': 'int',
        'tracking_id': 'str',
        'in_data_warehouse': 'bool',
        'manually_set': 'bool',
        'last_update': 'datetime',
        'last_updated_by': 'str',
        'nascar_one_race_id': 'int',
        'timing_run_id': 'int',
        'pitstop_id': 'int',
        'history_driver_id': 'int',
        'vehicle_number': 'str',
        'adjustment_left': 'bool',
        'adjustment_right': 'bool',
        'body_repairs': 'bool',
        'fuel_cans': 'int',
        'lap': 'int',
        'leader_lap': 'int',
        'flag_state_on_entry': 'int',
        'left_front_tire_changed': 'bool',
        'left_rear_tire_changed': 'bool',
        'right_front_tire_changed': 'bool',
        'right_rear_tire_changed': 'bool',
        'infraction': 'str',
        'video_path': 'str',
        'race_time_on_entry': 'float',
        'race_time_on_box_entry': 'float',
        'travel_duration_on_entry': 'float',
        'travel_duration_on_exit': 'float',
        'total_duration': 'float',
        'flag_state_on_exit': 'int',
        'race_time_on_exit': 'float',
        'race_time_on_box_exit': 'float'
    }

    attribute_map = {
        'publish_state': 'PublishState',
        'id': 'id',
        'tracking_id': 'tracking_id',
        'in_data_warehouse': 'InDataWarehouse',
        'manually_set': 'Manually_Set',
        'last_update': 'LastUpdate',
        'last_updated_by': 'LastUpdatedBy',
        'nascar_one_race_id': 'NascarOne_RaceId',
        'timing_run_id': 'Timing_RunId',
        'pitstop_id': 'PitstopId',
        'history_driver_id': 'History_DriverId',
        'vehicle_number': 'VehicleNumber',
        'adjustment_left': 'AdjustmentLeft',
        'adjustment_right': 'AdjustmentRight',
        'body_repairs': 'BodyRepairs',
        'fuel_cans': 'FuelCans',
        'lap': 'Lap',
        'leader_lap': 'LeaderLap',
        'flag_state_on_entry': 'FlagState_OnEntry',
        'left_front_tire_changed': 'LeftFront_TireChanged',
        'left_rear_tire_changed': 'LeftRear_TireChanged',
        'right_front_tire_changed': 'RightFront_TireChanged',
        'right_rear_tire_changed': 'RightRear_TireChanged',
        'infraction': 'Infraction',
        'video_path': 'VideoPath',
        'race_time_on_entry': 'RaceTime_OnEntry',
        'race_time_on_box_entry': 'RaceTime_OnBoxEntry',
        'travel_duration_on_entry': 'TravelDuration_OnEntry',
        'travel_duration_on_exit': 'TravelDuration_OnExit',
        'total_duration': 'TotalDuration',
        'flag_state_on_exit': 'FlagState_OnExit',
        'race_time_on_exit': 'RaceTime_OnExit',
        'race_time_on_box_exit': 'RaceTime_OnBoxExit'
    }

    def __init__(self, publish_state=None, id=None, tracking_id=None, in_data_warehouse=None, manually_set=None, last_update=None, last_updated_by=None, nascar_one_race_id=None, timing_run_id=None, pitstop_id=None, history_driver_id=None, vehicle_number=None, adjustment_left=None, adjustment_right=None, body_repairs=None, fuel_cans=None, lap=None, leader_lap=None, flag_state_on_entry=None, left_front_tire_changed=None, left_rear_tire_changed=None, right_front_tire_changed=None, right_rear_tire_changed=None, infraction=None, video_path=None, race_time_on_entry=None, race_time_on_box_entry=None, travel_duration_on_entry=None, travel_duration_on_exit=None, total_duration=None, flag_state_on_exit=None, race_time_on_exit=None, race_time_on_box_exit=None):  # noqa: E501
        """EditorPitstop - a model defined in Swagger"""  # noqa: E501
        self._publish_state = None
        self._id = None
        self._tracking_id = None
        self._in_data_warehouse = None
        self._manually_set = None
        self._last_update = None
        self._last_updated_by = None
        self._nascar_one_race_id = None
        self._timing_run_id = None
        self._pitstop_id = None
        self._history_driver_id = None
        self._vehicle_number = None
        self._adjustment_left = None
        self._adjustment_right = None
        self._body_repairs = None
        self._fuel_cans = None
        self._lap = None
        self._leader_lap = None
        self._flag_state_on_entry = None
        self._left_front_tire_changed = None
        self._left_rear_tire_changed = None
        self._right_front_tire_changed = None
        self._right_rear_tire_changed = None
        self._infraction = None
        self._video_path = None
        self._race_time_on_entry = None
        self._race_time_on_box_entry = None
        self._travel_duration_on_entry = None
        self._travel_duration_on_exit = None
        self._total_duration = None
        self._flag_state_on_exit = None
        self._race_time_on_exit = None
        self._race_time_on_box_exit = None
        self.discriminator = None
        if publish_state is not None:
            self.publish_state = publish_state
        if id is not None:
            self.id = id
        if tracking_id is not None:
            self.tracking_id = tracking_id
        if in_data_warehouse is not None:
            self.in_data_warehouse = in_data_warehouse
        if manually_set is not None:
            self.manually_set = manually_set
        if last_update is not None:
            self.last_update = last_update
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if nascar_one_race_id is not None:
            self.nascar_one_race_id = nascar_one_race_id
        if timing_run_id is not None:
            self.timing_run_id = timing_run_id
        if pitstop_id is not None:
            self.pitstop_id = pitstop_id
        if history_driver_id is not None:
            self.history_driver_id = history_driver_id
        if vehicle_number is not None:
            self.vehicle_number = vehicle_number
        if adjustment_left is not None:
            self.adjustment_left = adjustment_left
        if adjustment_right is not None:
            self.adjustment_right = adjustment_right
        if body_repairs is not None:
            self.body_repairs = body_repairs
        if fuel_cans is not None:
            self.fuel_cans = fuel_cans
        if lap is not None:
            self.lap = lap
        if leader_lap is not None:
            self.leader_lap = leader_lap
        if flag_state_on_entry is not None:
            self.flag_state_on_entry = flag_state_on_entry
        if left_front_tire_changed is not None:
            self.left_front_tire_changed = left_front_tire_changed
        if left_rear_tire_changed is not None:
            self.left_rear_tire_changed = left_rear_tire_changed
        if right_front_tire_changed is not None:
            self.right_front_tire_changed = right_front_tire_changed
        if right_rear_tire_changed is not None:
            self.right_rear_tire_changed = right_rear_tire_changed
        if infraction is not None:
            self.infraction = infraction
        if video_path is not None:
            self.video_path = video_path
        if race_time_on_entry is not None:
            self.race_time_on_entry = race_time_on_entry
        if race_time_on_box_entry is not None:
            self.race_time_on_box_entry = race_time_on_box_entry
        if travel_duration_on_entry is not None:
            self.travel_duration_on_entry = travel_duration_on_entry
        if travel_duration_on_exit is not None:
            self.travel_duration_on_exit = travel_duration_on_exit
        if total_duration is not None:
            self.total_duration = total_duration
        if flag_state_on_exit is not None:
            self.flag_state_on_exit = flag_state_on_exit
        if race_time_on_exit is not None:
            self.race_time_on_exit = race_time_on_exit
        if race_time_on_box_exit is not None:
            self.race_time_on_box_exit = race_time_on_box_exit

    @property
    def publish_state(self):
        """Gets the publish_state of this EditorPitstop.  # noqa: E501


        :return: The publish_state of this EditorPitstop.  # noqa: E501
        :rtype: PublishState
        """
        return self._publish_state

    @publish_state.setter
    def publish_state(self, publish_state):
        """Sets the publish_state of this EditorPitstop.


        :param publish_state: The publish_state of this EditorPitstop.  # noqa: E501
        :type: PublishState
        """

        self._publish_state = publish_state

    @property
    def id(self):
        """Gets the id of this EditorPitstop.  # noqa: E501


        :return: The id of this EditorPitstop.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EditorPitstop.


        :param id: The id of this EditorPitstop.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tracking_id(self):
        """Gets the tracking_id of this EditorPitstop.  # noqa: E501


        :return: The tracking_id of this EditorPitstop.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this EditorPitstop.


        :param tracking_id: The tracking_id of this EditorPitstop.  # noqa: E501
        :type: str
        """

        self._tracking_id = tracking_id

    @property
    def in_data_warehouse(self):
        """Gets the in_data_warehouse of this EditorPitstop.  # noqa: E501


        :return: The in_data_warehouse of this EditorPitstop.  # noqa: E501
        :rtype: bool
        """
        return self._in_data_warehouse

    @in_data_warehouse.setter
    def in_data_warehouse(self, in_data_warehouse):
        """Sets the in_data_warehouse of this EditorPitstop.


        :param in_data_warehouse: The in_data_warehouse of this EditorPitstop.  # noqa: E501
        :type: bool
        """

        self._in_data_warehouse = in_data_warehouse

    @property
    def manually_set(self):
        """Gets the manually_set of this EditorPitstop.  # noqa: E501


        :return: The manually_set of this EditorPitstop.  # noqa: E501
        :rtype: bool
        """
        return self._manually_set

    @manually_set.setter
    def manually_set(self, manually_set):
        """Sets the manually_set of this EditorPitstop.


        :param manually_set: The manually_set of this EditorPitstop.  # noqa: E501
        :type: bool
        """

        self._manually_set = manually_set

    @property
    def last_update(self):
        """Gets the last_update of this EditorPitstop.  # noqa: E501


        :return: The last_update of this EditorPitstop.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this EditorPitstop.


        :param last_update: The last_update of this EditorPitstop.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this EditorPitstop.  # noqa: E501


        :return: The last_updated_by of this EditorPitstop.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this EditorPitstop.


        :param last_updated_by: The last_updated_by of this EditorPitstop.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def nascar_one_race_id(self):
        """Gets the nascar_one_race_id of this EditorPitstop.  # noqa: E501


        :return: The nascar_one_race_id of this EditorPitstop.  # noqa: E501
        :rtype: int
        """
        return self._nascar_one_race_id

    @nascar_one_race_id.setter
    def nascar_one_race_id(self, nascar_one_race_id):
        """Sets the nascar_one_race_id of this EditorPitstop.


        :param nascar_one_race_id: The nascar_one_race_id of this EditorPitstop.  # noqa: E501
        :type: int
        """

        self._nascar_one_race_id = nascar_one_race_id

    @property
    def timing_run_id(self):
        """Gets the timing_run_id of this EditorPitstop.  # noqa: E501


        :return: The timing_run_id of this EditorPitstop.  # noqa: E501
        :rtype: int
        """
        return self._timing_run_id

    @timing_run_id.setter
    def timing_run_id(self, timing_run_id):
        """Sets the timing_run_id of this EditorPitstop.


        :param timing_run_id: The timing_run_id of this EditorPitstop.  # noqa: E501
        :type: int
        """

        self._timing_run_id = timing_run_id

    @property
    def pitstop_id(self):
        """Gets the pitstop_id of this EditorPitstop.  # noqa: E501


        :return: The pitstop_id of this EditorPitstop.  # noqa: E501
        :rtype: int
        """
        return self._pitstop_id

    @pitstop_id.setter
    def pitstop_id(self, pitstop_id):
        """Sets the pitstop_id of this EditorPitstop.


        :param pitstop_id: The pitstop_id of this EditorPitstop.  # noqa: E501
        :type: int
        """

        self._pitstop_id = pitstop_id

    @property
    def history_driver_id(self):
        """Gets the history_driver_id of this EditorPitstop.  # noqa: E501


        :return: The history_driver_id of this EditorPitstop.  # noqa: E501
        :rtype: int
        """
        return self._history_driver_id

    @history_driver_id.setter
    def history_driver_id(self, history_driver_id):
        """Sets the history_driver_id of this EditorPitstop.


        :param history_driver_id: The history_driver_id of this EditorPitstop.  # noqa: E501
        :type: int
        """

        self._history_driver_id = history_driver_id

    @property
    def vehicle_number(self):
        """Gets the vehicle_number of this EditorPitstop.  # noqa: E501


        :return: The vehicle_number of this EditorPitstop.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_number

    @vehicle_number.setter
    def vehicle_number(self, vehicle_number):
        """Sets the vehicle_number of this EditorPitstop.


        :param vehicle_number: The vehicle_number of this EditorPitstop.  # noqa: E501
        :type: str
        """

        self._vehicle_number = vehicle_number

    @property
    def adjustment_left(self):
        """Gets the adjustment_left of this EditorPitstop.  # noqa: E501


        :return: The adjustment_left of this EditorPitstop.  # noqa: E501
        :rtype: bool
        """
        return self._adjustment_left

    @adjustment_left.setter
    def adjustment_left(self, adjustment_left):
        """Sets the adjustment_left of this EditorPitstop.


        :param adjustment_left: The adjustment_left of this EditorPitstop.  # noqa: E501
        :type: bool
        """

        self._adjustment_left = adjustment_left

    @property
    def adjustment_right(self):
        """Gets the adjustment_right of this EditorPitstop.  # noqa: E501


        :return: The adjustment_right of this EditorPitstop.  # noqa: E501
        :rtype: bool
        """
        return self._adjustment_right

    @adjustment_right.setter
    def adjustment_right(self, adjustment_right):
        """Sets the adjustment_right of this EditorPitstop.


        :param adjustment_right: The adjustment_right of this EditorPitstop.  # noqa: E501
        :type: bool
        """

        self._adjustment_right = adjustment_right

    @property
    def body_repairs(self):
        """Gets the body_repairs of this EditorPitstop.  # noqa: E501


        :return: The body_repairs of this EditorPitstop.  # noqa: E501
        :rtype: bool
        """
        return self._body_repairs

    @body_repairs.setter
    def body_repairs(self, body_repairs):
        """Sets the body_repairs of this EditorPitstop.


        :param body_repairs: The body_repairs of this EditorPitstop.  # noqa: E501
        :type: bool
        """

        self._body_repairs = body_repairs

    @property
    def fuel_cans(self):
        """Gets the fuel_cans of this EditorPitstop.  # noqa: E501


        :return: The fuel_cans of this EditorPitstop.  # noqa: E501
        :rtype: int
        """
        return self._fuel_cans

    @fuel_cans.setter
    def fuel_cans(self, fuel_cans):
        """Sets the fuel_cans of this EditorPitstop.


        :param fuel_cans: The fuel_cans of this EditorPitstop.  # noqa: E501
        :type: int
        """

        self._fuel_cans = fuel_cans

    @property
    def lap(self):
        """Gets the lap of this EditorPitstop.  # noqa: E501


        :return: The lap of this EditorPitstop.  # noqa: E501
        :rtype: int
        """
        return self._lap

    @lap.setter
    def lap(self, lap):
        """Sets the lap of this EditorPitstop.


        :param lap: The lap of this EditorPitstop.  # noqa: E501
        :type: int
        """

        self._lap = lap

    @property
    def leader_lap(self):
        """Gets the leader_lap of this EditorPitstop.  # noqa: E501


        :return: The leader_lap of this EditorPitstop.  # noqa: E501
        :rtype: int
        """
        return self._leader_lap

    @leader_lap.setter
    def leader_lap(self, leader_lap):
        """Sets the leader_lap of this EditorPitstop.


        :param leader_lap: The leader_lap of this EditorPitstop.  # noqa: E501
        :type: int
        """

        self._leader_lap = leader_lap

    @property
    def flag_state_on_entry(self):
        """Gets the flag_state_on_entry of this EditorPitstop.  # noqa: E501


        :return: The flag_state_on_entry of this EditorPitstop.  # noqa: E501
        :rtype: int
        """
        return self._flag_state_on_entry

    @flag_state_on_entry.setter
    def flag_state_on_entry(self, flag_state_on_entry):
        """Sets the flag_state_on_entry of this EditorPitstop.


        :param flag_state_on_entry: The flag_state_on_entry of this EditorPitstop.  # noqa: E501
        :type: int
        """

        self._flag_state_on_entry = flag_state_on_entry

    @property
    def left_front_tire_changed(self):
        """Gets the left_front_tire_changed of this EditorPitstop.  # noqa: E501


        :return: The left_front_tire_changed of this EditorPitstop.  # noqa: E501
        :rtype: bool
        """
        return self._left_front_tire_changed

    @left_front_tire_changed.setter
    def left_front_tire_changed(self, left_front_tire_changed):
        """Sets the left_front_tire_changed of this EditorPitstop.


        :param left_front_tire_changed: The left_front_tire_changed of this EditorPitstop.  # noqa: E501
        :type: bool
        """

        self._left_front_tire_changed = left_front_tire_changed

    @property
    def left_rear_tire_changed(self):
        """Gets the left_rear_tire_changed of this EditorPitstop.  # noqa: E501


        :return: The left_rear_tire_changed of this EditorPitstop.  # noqa: E501
        :rtype: bool
        """
        return self._left_rear_tire_changed

    @left_rear_tire_changed.setter
    def left_rear_tire_changed(self, left_rear_tire_changed):
        """Sets the left_rear_tire_changed of this EditorPitstop.


        :param left_rear_tire_changed: The left_rear_tire_changed of this EditorPitstop.  # noqa: E501
        :type: bool
        """

        self._left_rear_tire_changed = left_rear_tire_changed

    @property
    def right_front_tire_changed(self):
        """Gets the right_front_tire_changed of this EditorPitstop.  # noqa: E501


        :return: The right_front_tire_changed of this EditorPitstop.  # noqa: E501
        :rtype: bool
        """
        return self._right_front_tire_changed

    @right_front_tire_changed.setter
    def right_front_tire_changed(self, right_front_tire_changed):
        """Sets the right_front_tire_changed of this EditorPitstop.


        :param right_front_tire_changed: The right_front_tire_changed of this EditorPitstop.  # noqa: E501
        :type: bool
        """

        self._right_front_tire_changed = right_front_tire_changed

    @property
    def right_rear_tire_changed(self):
        """Gets the right_rear_tire_changed of this EditorPitstop.  # noqa: E501


        :return: The right_rear_tire_changed of this EditorPitstop.  # noqa: E501
        :rtype: bool
        """
        return self._right_rear_tire_changed

    @right_rear_tire_changed.setter
    def right_rear_tire_changed(self, right_rear_tire_changed):
        """Sets the right_rear_tire_changed of this EditorPitstop.


        :param right_rear_tire_changed: The right_rear_tire_changed of this EditorPitstop.  # noqa: E501
        :type: bool
        """

        self._right_rear_tire_changed = right_rear_tire_changed

    @property
    def infraction(self):
        """Gets the infraction of this EditorPitstop.  # noqa: E501


        :return: The infraction of this EditorPitstop.  # noqa: E501
        :rtype: str
        """
        return self._infraction

    @infraction.setter
    def infraction(self, infraction):
        """Sets the infraction of this EditorPitstop.


        :param infraction: The infraction of this EditorPitstop.  # noqa: E501
        :type: str
        """

        self._infraction = infraction

    @property
    def video_path(self):
        """Gets the video_path of this EditorPitstop.  # noqa: E501


        :return: The video_path of this EditorPitstop.  # noqa: E501
        :rtype: str
        """
        return self._video_path

    @video_path.setter
    def video_path(self, video_path):
        """Sets the video_path of this EditorPitstop.


        :param video_path: The video_path of this EditorPitstop.  # noqa: E501
        :type: str
        """

        self._video_path = video_path

    @property
    def race_time_on_entry(self):
        """Gets the race_time_on_entry of this EditorPitstop.  # noqa: E501


        :return: The race_time_on_entry of this EditorPitstop.  # noqa: E501
        :rtype: float
        """
        return self._race_time_on_entry

    @race_time_on_entry.setter
    def race_time_on_entry(self, race_time_on_entry):
        """Sets the race_time_on_entry of this EditorPitstop.


        :param race_time_on_entry: The race_time_on_entry of this EditorPitstop.  # noqa: E501
        :type: float
        """

        self._race_time_on_entry = race_time_on_entry

    @property
    def race_time_on_box_entry(self):
        """Gets the race_time_on_box_entry of this EditorPitstop.  # noqa: E501


        :return: The race_time_on_box_entry of this EditorPitstop.  # noqa: E501
        :rtype: float
        """
        return self._race_time_on_box_entry

    @race_time_on_box_entry.setter
    def race_time_on_box_entry(self, race_time_on_box_entry):
        """Sets the race_time_on_box_entry of this EditorPitstop.


        :param race_time_on_box_entry: The race_time_on_box_entry of this EditorPitstop.  # noqa: E501
        :type: float
        """

        self._race_time_on_box_entry = race_time_on_box_entry

    @property
    def travel_duration_on_entry(self):
        """Gets the travel_duration_on_entry of this EditorPitstop.  # noqa: E501


        :return: The travel_duration_on_entry of this EditorPitstop.  # noqa: E501
        :rtype: float
        """
        return self._travel_duration_on_entry

    @travel_duration_on_entry.setter
    def travel_duration_on_entry(self, travel_duration_on_entry):
        """Sets the travel_duration_on_entry of this EditorPitstop.


        :param travel_duration_on_entry: The travel_duration_on_entry of this EditorPitstop.  # noqa: E501
        :type: float
        """

        self._travel_duration_on_entry = travel_duration_on_entry

    @property
    def travel_duration_on_exit(self):
        """Gets the travel_duration_on_exit of this EditorPitstop.  # noqa: E501


        :return: The travel_duration_on_exit of this EditorPitstop.  # noqa: E501
        :rtype: float
        """
        return self._travel_duration_on_exit

    @travel_duration_on_exit.setter
    def travel_duration_on_exit(self, travel_duration_on_exit):
        """Sets the travel_duration_on_exit of this EditorPitstop.


        :param travel_duration_on_exit: The travel_duration_on_exit of this EditorPitstop.  # noqa: E501
        :type: float
        """

        self._travel_duration_on_exit = travel_duration_on_exit

    @property
    def total_duration(self):
        """Gets the total_duration of this EditorPitstop.  # noqa: E501


        :return: The total_duration of this EditorPitstop.  # noqa: E501
        :rtype: float
        """
        return self._total_duration

    @total_duration.setter
    def total_duration(self, total_duration):
        """Sets the total_duration of this EditorPitstop.


        :param total_duration: The total_duration of this EditorPitstop.  # noqa: E501
        :type: float
        """

        self._total_duration = total_duration

    @property
    def flag_state_on_exit(self):
        """Gets the flag_state_on_exit of this EditorPitstop.  # noqa: E501


        :return: The flag_state_on_exit of this EditorPitstop.  # noqa: E501
        :rtype: int
        """
        return self._flag_state_on_exit

    @flag_state_on_exit.setter
    def flag_state_on_exit(self, flag_state_on_exit):
        """Sets the flag_state_on_exit of this EditorPitstop.


        :param flag_state_on_exit: The flag_state_on_exit of this EditorPitstop.  # noqa: E501
        :type: int
        """

        self._flag_state_on_exit = flag_state_on_exit

    @property
    def race_time_on_exit(self):
        """Gets the race_time_on_exit of this EditorPitstop.  # noqa: E501


        :return: The race_time_on_exit of this EditorPitstop.  # noqa: E501
        :rtype: float
        """
        return self._race_time_on_exit

    @race_time_on_exit.setter
    def race_time_on_exit(self, race_time_on_exit):
        """Sets the race_time_on_exit of this EditorPitstop.


        :param race_time_on_exit: The race_time_on_exit of this EditorPitstop.  # noqa: E501
        :type: float
        """

        self._race_time_on_exit = race_time_on_exit

    @property
    def race_time_on_box_exit(self):
        """Gets the race_time_on_box_exit of this EditorPitstop.  # noqa: E501


        :return: The race_time_on_box_exit of this EditorPitstop.  # noqa: E501
        :rtype: float
        """
        return self._race_time_on_box_exit

    @race_time_on_box_exit.setter
    def race_time_on_box_exit(self, race_time_on_box_exit):
        """Sets the race_time_on_box_exit of this EditorPitstop.


        :param race_time_on_box_exit: The race_time_on_box_exit of this EditorPitstop.  # noqa: E501
        :type: float
        """

        self._race_time_on_box_exit = race_time_on_box_exit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditorPitstop, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditorPitstop):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
