# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class EditorRaceResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'publish_state': 'PublishState',
        'id': 'int',
        'tracking_id': 'str',
        'in_data_warehouse': 'bool',
        'manually_set': 'bool',
        'last_update': 'datetime',
        'last_updated_by': 'str',
        'entry_id': 'int',
        'finish_position': 'int',
        'best_time': 'int',
        'best_speed': 'float',
        'last_lap_time': 'int',
        'delta_next_time': 'int',
        'delta_next_laps': 'int',
        'delta_leader_time': 'int',
        'delta_leader_laps': 'int',
        'best_lap': 'int',
        'laps': 'int',
        'vehicle_number': 'str',
        'driver_name': 'str',
        'on_track': 'bool',
        'status': 'str',
        'comment': 'str',
        'run_name': 'str',
        'run_state': 'str',
        'nascar_one_race_id': 'int',
        'timing_run_id': 'int',
        'etl_run_id': 'int',
        'start_position': 'int',
        'pit_box': 'int'
    }

    attribute_map = {
        'publish_state': 'PublishState',
        'id': 'id',
        'tracking_id': 'tracking_id',
        'in_data_warehouse': 'InDataWarehouse',
        'manually_set': 'Manually_Set',
        'last_update': 'LastUpdate',
        'last_updated_by': 'LastUpdatedBy',
        'entry_id': 'EntryId',
        'finish_position': 'FinishPosition',
        'best_time': 'BestTime',
        'best_speed': 'BestSpeed',
        'last_lap_time': 'LastLapTime',
        'delta_next_time': 'DeltaNextTime',
        'delta_next_laps': 'DeltaNextLaps',
        'delta_leader_time': 'DeltaLeaderTime',
        'delta_leader_laps': 'DeltaLeaderLaps',
        'best_lap': 'BestLap',
        'laps': 'Laps',
        'vehicle_number': 'VehicleNumber',
        'driver_name': 'DriverName',
        'on_track': 'OnTrack',
        'status': 'Status',
        'comment': 'Comment',
        'run_name': 'RunName',
        'run_state': 'RunState',
        'nascar_one_race_id': 'NascarOne_RaceId',
        'timing_run_id': 'Timing_RunId',
        'etl_run_id': 'ETL_RunId',
        'start_position': 'StartPosition',
        'pit_box': 'PitBox'
    }

    def __init__(self, publish_state=None, id=None, tracking_id=None, in_data_warehouse=None, manually_set=None, last_update=None, last_updated_by=None, entry_id=None, finish_position=None, best_time=None, best_speed=None, last_lap_time=None, delta_next_time=None, delta_next_laps=None, delta_leader_time=None, delta_leader_laps=None, best_lap=None, laps=None, vehicle_number=None, driver_name=None, on_track=None, status=None, comment=None, run_name=None, run_state=None, nascar_one_race_id=None, timing_run_id=None, etl_run_id=None, start_position=None, pit_box=None):  # noqa: E501
        """EditorRaceResult - a model defined in Swagger"""  # noqa: E501
        self._publish_state = None
        self._id = None
        self._tracking_id = None
        self._in_data_warehouse = None
        self._manually_set = None
        self._last_update = None
        self._last_updated_by = None
        self._entry_id = None
        self._finish_position = None
        self._best_time = None
        self._best_speed = None
        self._last_lap_time = None
        self._delta_next_time = None
        self._delta_next_laps = None
        self._delta_leader_time = None
        self._delta_leader_laps = None
        self._best_lap = None
        self._laps = None
        self._vehicle_number = None
        self._driver_name = None
        self._on_track = None
        self._status = None
        self._comment = None
        self._run_name = None
        self._run_state = None
        self._nascar_one_race_id = None
        self._timing_run_id = None
        self._etl_run_id = None
        self._start_position = None
        self._pit_box = None
        self.discriminator = None
        if publish_state is not None:
            self.publish_state = publish_state
        if id is not None:
            self.id = id
        if tracking_id is not None:
            self.tracking_id = tracking_id
        if in_data_warehouse is not None:
            self.in_data_warehouse = in_data_warehouse
        if manually_set is not None:
            self.manually_set = manually_set
        if last_update is not None:
            self.last_update = last_update
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if entry_id is not None:
            self.entry_id = entry_id
        if finish_position is not None:
            self.finish_position = finish_position
        if best_time is not None:
            self.best_time = best_time
        if best_speed is not None:
            self.best_speed = best_speed
        if last_lap_time is not None:
            self.last_lap_time = last_lap_time
        if delta_next_time is not None:
            self.delta_next_time = delta_next_time
        if delta_next_laps is not None:
            self.delta_next_laps = delta_next_laps
        if delta_leader_time is not None:
            self.delta_leader_time = delta_leader_time
        if delta_leader_laps is not None:
            self.delta_leader_laps = delta_leader_laps
        if best_lap is not None:
            self.best_lap = best_lap
        if laps is not None:
            self.laps = laps
        if vehicle_number is not None:
            self.vehicle_number = vehicle_number
        if driver_name is not None:
            self.driver_name = driver_name
        if on_track is not None:
            self.on_track = on_track
        if status is not None:
            self.status = status
        if comment is not None:
            self.comment = comment
        if run_name is not None:
            self.run_name = run_name
        if run_state is not None:
            self.run_state = run_state
        if nascar_one_race_id is not None:
            self.nascar_one_race_id = nascar_one_race_id
        if timing_run_id is not None:
            self.timing_run_id = timing_run_id
        if etl_run_id is not None:
            self.etl_run_id = etl_run_id
        if start_position is not None:
            self.start_position = start_position
        if pit_box is not None:
            self.pit_box = pit_box

    @property
    def publish_state(self):
        """Gets the publish_state of this EditorRaceResult.  # noqa: E501


        :return: The publish_state of this EditorRaceResult.  # noqa: E501
        :rtype: PublishState
        """
        return self._publish_state

    @publish_state.setter
    def publish_state(self, publish_state):
        """Sets the publish_state of this EditorRaceResult.


        :param publish_state: The publish_state of this EditorRaceResult.  # noqa: E501
        :type: PublishState
        """

        self._publish_state = publish_state

    @property
    def id(self):
        """Gets the id of this EditorRaceResult.  # noqa: E501


        :return: The id of this EditorRaceResult.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EditorRaceResult.


        :param id: The id of this EditorRaceResult.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tracking_id(self):
        """Gets the tracking_id of this EditorRaceResult.  # noqa: E501


        :return: The tracking_id of this EditorRaceResult.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this EditorRaceResult.


        :param tracking_id: The tracking_id of this EditorRaceResult.  # noqa: E501
        :type: str
        """

        self._tracking_id = tracking_id

    @property
    def in_data_warehouse(self):
        """Gets the in_data_warehouse of this EditorRaceResult.  # noqa: E501


        :return: The in_data_warehouse of this EditorRaceResult.  # noqa: E501
        :rtype: bool
        """
        return self._in_data_warehouse

    @in_data_warehouse.setter
    def in_data_warehouse(self, in_data_warehouse):
        """Sets the in_data_warehouse of this EditorRaceResult.


        :param in_data_warehouse: The in_data_warehouse of this EditorRaceResult.  # noqa: E501
        :type: bool
        """

        self._in_data_warehouse = in_data_warehouse

    @property
    def manually_set(self):
        """Gets the manually_set of this EditorRaceResult.  # noqa: E501


        :return: The manually_set of this EditorRaceResult.  # noqa: E501
        :rtype: bool
        """
        return self._manually_set

    @manually_set.setter
    def manually_set(self, manually_set):
        """Sets the manually_set of this EditorRaceResult.


        :param manually_set: The manually_set of this EditorRaceResult.  # noqa: E501
        :type: bool
        """

        self._manually_set = manually_set

    @property
    def last_update(self):
        """Gets the last_update of this EditorRaceResult.  # noqa: E501


        :return: The last_update of this EditorRaceResult.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this EditorRaceResult.


        :param last_update: The last_update of this EditorRaceResult.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this EditorRaceResult.  # noqa: E501


        :return: The last_updated_by of this EditorRaceResult.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this EditorRaceResult.


        :param last_updated_by: The last_updated_by of this EditorRaceResult.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def entry_id(self):
        """Gets the entry_id of this EditorRaceResult.  # noqa: E501


        :return: The entry_id of this EditorRaceResult.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this EditorRaceResult.


        :param entry_id: The entry_id of this EditorRaceResult.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def finish_position(self):
        """Gets the finish_position of this EditorRaceResult.  # noqa: E501


        :return: The finish_position of this EditorRaceResult.  # noqa: E501
        :rtype: int
        """
        return self._finish_position

    @finish_position.setter
    def finish_position(self, finish_position):
        """Sets the finish_position of this EditorRaceResult.


        :param finish_position: The finish_position of this EditorRaceResult.  # noqa: E501
        :type: int
        """

        self._finish_position = finish_position

    @property
    def best_time(self):
        """Gets the best_time of this EditorRaceResult.  # noqa: E501


        :return: The best_time of this EditorRaceResult.  # noqa: E501
        :rtype: int
        """
        return self._best_time

    @best_time.setter
    def best_time(self, best_time):
        """Sets the best_time of this EditorRaceResult.


        :param best_time: The best_time of this EditorRaceResult.  # noqa: E501
        :type: int
        """

        self._best_time = best_time

    @property
    def best_speed(self):
        """Gets the best_speed of this EditorRaceResult.  # noqa: E501


        :return: The best_speed of this EditorRaceResult.  # noqa: E501
        :rtype: float
        """
        return self._best_speed

    @best_speed.setter
    def best_speed(self, best_speed):
        """Sets the best_speed of this EditorRaceResult.


        :param best_speed: The best_speed of this EditorRaceResult.  # noqa: E501
        :type: float
        """

        self._best_speed = best_speed

    @property
    def last_lap_time(self):
        """Gets the last_lap_time of this EditorRaceResult.  # noqa: E501


        :return: The last_lap_time of this EditorRaceResult.  # noqa: E501
        :rtype: int
        """
        return self._last_lap_time

    @last_lap_time.setter
    def last_lap_time(self, last_lap_time):
        """Sets the last_lap_time of this EditorRaceResult.


        :param last_lap_time: The last_lap_time of this EditorRaceResult.  # noqa: E501
        :type: int
        """

        self._last_lap_time = last_lap_time

    @property
    def delta_next_time(self):
        """Gets the delta_next_time of this EditorRaceResult.  # noqa: E501


        :return: The delta_next_time of this EditorRaceResult.  # noqa: E501
        :rtype: int
        """
        return self._delta_next_time

    @delta_next_time.setter
    def delta_next_time(self, delta_next_time):
        """Sets the delta_next_time of this EditorRaceResult.


        :param delta_next_time: The delta_next_time of this EditorRaceResult.  # noqa: E501
        :type: int
        """

        self._delta_next_time = delta_next_time

    @property
    def delta_next_laps(self):
        """Gets the delta_next_laps of this EditorRaceResult.  # noqa: E501


        :return: The delta_next_laps of this EditorRaceResult.  # noqa: E501
        :rtype: int
        """
        return self._delta_next_laps

    @delta_next_laps.setter
    def delta_next_laps(self, delta_next_laps):
        """Sets the delta_next_laps of this EditorRaceResult.


        :param delta_next_laps: The delta_next_laps of this EditorRaceResult.  # noqa: E501
        :type: int
        """

        self._delta_next_laps = delta_next_laps

    @property
    def delta_leader_time(self):
        """Gets the delta_leader_time of this EditorRaceResult.  # noqa: E501


        :return: The delta_leader_time of this EditorRaceResult.  # noqa: E501
        :rtype: int
        """
        return self._delta_leader_time

    @delta_leader_time.setter
    def delta_leader_time(self, delta_leader_time):
        """Sets the delta_leader_time of this EditorRaceResult.


        :param delta_leader_time: The delta_leader_time of this EditorRaceResult.  # noqa: E501
        :type: int
        """

        self._delta_leader_time = delta_leader_time

    @property
    def delta_leader_laps(self):
        """Gets the delta_leader_laps of this EditorRaceResult.  # noqa: E501


        :return: The delta_leader_laps of this EditorRaceResult.  # noqa: E501
        :rtype: int
        """
        return self._delta_leader_laps

    @delta_leader_laps.setter
    def delta_leader_laps(self, delta_leader_laps):
        """Sets the delta_leader_laps of this EditorRaceResult.


        :param delta_leader_laps: The delta_leader_laps of this EditorRaceResult.  # noqa: E501
        :type: int
        """

        self._delta_leader_laps = delta_leader_laps

    @property
    def best_lap(self):
        """Gets the best_lap of this EditorRaceResult.  # noqa: E501


        :return: The best_lap of this EditorRaceResult.  # noqa: E501
        :rtype: int
        """
        return self._best_lap

    @best_lap.setter
    def best_lap(self, best_lap):
        """Sets the best_lap of this EditorRaceResult.


        :param best_lap: The best_lap of this EditorRaceResult.  # noqa: E501
        :type: int
        """

        self._best_lap = best_lap

    @property
    def laps(self):
        """Gets the laps of this EditorRaceResult.  # noqa: E501


        :return: The laps of this EditorRaceResult.  # noqa: E501
        :rtype: int
        """
        return self._laps

    @laps.setter
    def laps(self, laps):
        """Sets the laps of this EditorRaceResult.


        :param laps: The laps of this EditorRaceResult.  # noqa: E501
        :type: int
        """

        self._laps = laps

    @property
    def vehicle_number(self):
        """Gets the vehicle_number of this EditorRaceResult.  # noqa: E501


        :return: The vehicle_number of this EditorRaceResult.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_number

    @vehicle_number.setter
    def vehicle_number(self, vehicle_number):
        """Sets the vehicle_number of this EditorRaceResult.


        :param vehicle_number: The vehicle_number of this EditorRaceResult.  # noqa: E501
        :type: str
        """

        self._vehicle_number = vehicle_number

    @property
    def driver_name(self):
        """Gets the driver_name of this EditorRaceResult.  # noqa: E501


        :return: The driver_name of this EditorRaceResult.  # noqa: E501
        :rtype: str
        """
        return self._driver_name

    @driver_name.setter
    def driver_name(self, driver_name):
        """Sets the driver_name of this EditorRaceResult.


        :param driver_name: The driver_name of this EditorRaceResult.  # noqa: E501
        :type: str
        """

        self._driver_name = driver_name

    @property
    def on_track(self):
        """Gets the on_track of this EditorRaceResult.  # noqa: E501


        :return: The on_track of this EditorRaceResult.  # noqa: E501
        :rtype: bool
        """
        return self._on_track

    @on_track.setter
    def on_track(self, on_track):
        """Sets the on_track of this EditorRaceResult.


        :param on_track: The on_track of this EditorRaceResult.  # noqa: E501
        :type: bool
        """

        self._on_track = on_track

    @property
    def status(self):
        """Gets the status of this EditorRaceResult.  # noqa: E501


        :return: The status of this EditorRaceResult.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EditorRaceResult.


        :param status: The status of this EditorRaceResult.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def comment(self):
        """Gets the comment of this EditorRaceResult.  # noqa: E501


        :return: The comment of this EditorRaceResult.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this EditorRaceResult.


        :param comment: The comment of this EditorRaceResult.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def run_name(self):
        """Gets the run_name of this EditorRaceResult.  # noqa: E501


        :return: The run_name of this EditorRaceResult.  # noqa: E501
        :rtype: str
        """
        return self._run_name

    @run_name.setter
    def run_name(self, run_name):
        """Sets the run_name of this EditorRaceResult.


        :param run_name: The run_name of this EditorRaceResult.  # noqa: E501
        :type: str
        """

        self._run_name = run_name

    @property
    def run_state(self):
        """Gets the run_state of this EditorRaceResult.  # noqa: E501


        :return: The run_state of this EditorRaceResult.  # noqa: E501
        :rtype: str
        """
        return self._run_state

    @run_state.setter
    def run_state(self, run_state):
        """Sets the run_state of this EditorRaceResult.


        :param run_state: The run_state of this EditorRaceResult.  # noqa: E501
        :type: str
        """

        self._run_state = run_state

    @property
    def nascar_one_race_id(self):
        """Gets the nascar_one_race_id of this EditorRaceResult.  # noqa: E501


        :return: The nascar_one_race_id of this EditorRaceResult.  # noqa: E501
        :rtype: int
        """
        return self._nascar_one_race_id

    @nascar_one_race_id.setter
    def nascar_one_race_id(self, nascar_one_race_id):
        """Sets the nascar_one_race_id of this EditorRaceResult.


        :param nascar_one_race_id: The nascar_one_race_id of this EditorRaceResult.  # noqa: E501
        :type: int
        """

        self._nascar_one_race_id = nascar_one_race_id

    @property
    def timing_run_id(self):
        """Gets the timing_run_id of this EditorRaceResult.  # noqa: E501


        :return: The timing_run_id of this EditorRaceResult.  # noqa: E501
        :rtype: int
        """
        return self._timing_run_id

    @timing_run_id.setter
    def timing_run_id(self, timing_run_id):
        """Sets the timing_run_id of this EditorRaceResult.


        :param timing_run_id: The timing_run_id of this EditorRaceResult.  # noqa: E501
        :type: int
        """

        self._timing_run_id = timing_run_id

    @property
    def etl_run_id(self):
        """Gets the etl_run_id of this EditorRaceResult.  # noqa: E501


        :return: The etl_run_id of this EditorRaceResult.  # noqa: E501
        :rtype: int
        """
        return self._etl_run_id

    @etl_run_id.setter
    def etl_run_id(self, etl_run_id):
        """Sets the etl_run_id of this EditorRaceResult.


        :param etl_run_id: The etl_run_id of this EditorRaceResult.  # noqa: E501
        :type: int
        """

        self._etl_run_id = etl_run_id

    @property
    def start_position(self):
        """Gets the start_position of this EditorRaceResult.  # noqa: E501


        :return: The start_position of this EditorRaceResult.  # noqa: E501
        :rtype: int
        """
        return self._start_position

    @start_position.setter
    def start_position(self, start_position):
        """Sets the start_position of this EditorRaceResult.


        :param start_position: The start_position of this EditorRaceResult.  # noqa: E501
        :type: int
        """

        self._start_position = start_position

    @property
    def pit_box(self):
        """Gets the pit_box of this EditorRaceResult.  # noqa: E501


        :return: The pit_box of this EditorRaceResult.  # noqa: E501
        :rtype: int
        """
        return self._pit_box

    @pit_box.setter
    def pit_box(self, pit_box):
        """Sets the pit_box of this EditorRaceResult.


        :param pit_box: The pit_box of this EditorRaceResult.  # noqa: E501
        :type: int
        """

        self._pit_box = pit_box

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditorRaceResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditorRaceResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
