# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class EditorRaceWeek(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'publish_state': 'PublishState',
        'id': 'int',
        'tracking_id': 'str',
        'in_data_warehouse': 'bool',
        'manually_set': 'bool',
        'last_update': 'datetime',
        'last_updated_by': 'str',
        'season': 'int',
        'venue': 'str',
        'running_series': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'is_live': 'bool',
        'display_name': 'str'
    }

    attribute_map = {
        'publish_state': 'PublishState',
        'id': 'id',
        'tracking_id': 'tracking_id',
        'in_data_warehouse': 'InDataWarehouse',
        'manually_set': 'Manually_Set',
        'last_update': 'LastUpdate',
        'last_updated_by': 'LastUpdatedBy',
        'season': 'Season',
        'venue': 'Venue',
        'running_series': 'RunningSeries',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'is_live': 'IsLive',
        'display_name': 'DisplayName'
    }

    def __init__(self, publish_state=None, id=None, tracking_id=None, in_data_warehouse=None, manually_set=None, last_update=None, last_updated_by=None, season=None, venue=None, running_series=None, start_date=None, end_date=None, is_live=None, display_name=None):  # noqa: E501
        """EditorRaceWeek - a model defined in Swagger"""  # noqa: E501
        self._publish_state = None
        self._id = None
        self._tracking_id = None
        self._in_data_warehouse = None
        self._manually_set = None
        self._last_update = None
        self._last_updated_by = None
        self._season = None
        self._venue = None
        self._running_series = None
        self._start_date = None
        self._end_date = None
        self._is_live = None
        self._display_name = None
        self.discriminator = None
        if publish_state is not None:
            self.publish_state = publish_state
        if id is not None:
            self.id = id
        if tracking_id is not None:
            self.tracking_id = tracking_id
        if in_data_warehouse is not None:
            self.in_data_warehouse = in_data_warehouse
        if manually_set is not None:
            self.manually_set = manually_set
        if last_update is not None:
            self.last_update = last_update
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if season is not None:
            self.season = season
        if venue is not None:
            self.venue = venue
        if running_series is not None:
            self.running_series = running_series
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if is_live is not None:
            self.is_live = is_live
        if display_name is not None:
            self.display_name = display_name

    @property
    def publish_state(self):
        """Gets the publish_state of this EditorRaceWeek.  # noqa: E501


        :return: The publish_state of this EditorRaceWeek.  # noqa: E501
        :rtype: PublishState
        """
        return self._publish_state

    @publish_state.setter
    def publish_state(self, publish_state):
        """Sets the publish_state of this EditorRaceWeek.


        :param publish_state: The publish_state of this EditorRaceWeek.  # noqa: E501
        :type: PublishState
        """

        self._publish_state = publish_state

    @property
    def id(self):
        """Gets the id of this EditorRaceWeek.  # noqa: E501


        :return: The id of this EditorRaceWeek.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EditorRaceWeek.


        :param id: The id of this EditorRaceWeek.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tracking_id(self):
        """Gets the tracking_id of this EditorRaceWeek.  # noqa: E501


        :return: The tracking_id of this EditorRaceWeek.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this EditorRaceWeek.


        :param tracking_id: The tracking_id of this EditorRaceWeek.  # noqa: E501
        :type: str
        """

        self._tracking_id = tracking_id

    @property
    def in_data_warehouse(self):
        """Gets the in_data_warehouse of this EditorRaceWeek.  # noqa: E501


        :return: The in_data_warehouse of this EditorRaceWeek.  # noqa: E501
        :rtype: bool
        """
        return self._in_data_warehouse

    @in_data_warehouse.setter
    def in_data_warehouse(self, in_data_warehouse):
        """Sets the in_data_warehouse of this EditorRaceWeek.


        :param in_data_warehouse: The in_data_warehouse of this EditorRaceWeek.  # noqa: E501
        :type: bool
        """

        self._in_data_warehouse = in_data_warehouse

    @property
    def manually_set(self):
        """Gets the manually_set of this EditorRaceWeek.  # noqa: E501


        :return: The manually_set of this EditorRaceWeek.  # noqa: E501
        :rtype: bool
        """
        return self._manually_set

    @manually_set.setter
    def manually_set(self, manually_set):
        """Sets the manually_set of this EditorRaceWeek.


        :param manually_set: The manually_set of this EditorRaceWeek.  # noqa: E501
        :type: bool
        """

        self._manually_set = manually_set

    @property
    def last_update(self):
        """Gets the last_update of this EditorRaceWeek.  # noqa: E501


        :return: The last_update of this EditorRaceWeek.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this EditorRaceWeek.


        :param last_update: The last_update of this EditorRaceWeek.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this EditorRaceWeek.  # noqa: E501


        :return: The last_updated_by of this EditorRaceWeek.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this EditorRaceWeek.


        :param last_updated_by: The last_updated_by of this EditorRaceWeek.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def season(self):
        """Gets the season of this EditorRaceWeek.  # noqa: E501


        :return: The season of this EditorRaceWeek.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this EditorRaceWeek.


        :param season: The season of this EditorRaceWeek.  # noqa: E501
        :type: int
        """

        self._season = season

    @property
    def venue(self):
        """Gets the venue of this EditorRaceWeek.  # noqa: E501


        :return: The venue of this EditorRaceWeek.  # noqa: E501
        :rtype: str
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this EditorRaceWeek.


        :param venue: The venue of this EditorRaceWeek.  # noqa: E501
        :type: str
        """

        self._venue = venue

    @property
    def running_series(self):
        """Gets the running_series of this EditorRaceWeek.  # noqa: E501


        :return: The running_series of this EditorRaceWeek.  # noqa: E501
        :rtype: str
        """
        return self._running_series

    @running_series.setter
    def running_series(self, running_series):
        """Sets the running_series of this EditorRaceWeek.


        :param running_series: The running_series of this EditorRaceWeek.  # noqa: E501
        :type: str
        """

        self._running_series = running_series

    @property
    def start_date(self):
        """Gets the start_date of this EditorRaceWeek.  # noqa: E501


        :return: The start_date of this EditorRaceWeek.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this EditorRaceWeek.


        :param start_date: The start_date of this EditorRaceWeek.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this EditorRaceWeek.  # noqa: E501


        :return: The end_date of this EditorRaceWeek.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EditorRaceWeek.


        :param end_date: The end_date of this EditorRaceWeek.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def is_live(self):
        """Gets the is_live of this EditorRaceWeek.  # noqa: E501


        :return: The is_live of this EditorRaceWeek.  # noqa: E501
        :rtype: bool
        """
        return self._is_live

    @is_live.setter
    def is_live(self, is_live):
        """Sets the is_live of this EditorRaceWeek.


        :param is_live: The is_live of this EditorRaceWeek.  # noqa: E501
        :type: bool
        """

        self._is_live = is_live

    @property
    def display_name(self):
        """Gets the display_name of this EditorRaceWeek.  # noqa: E501


        :return: The display_name of this EditorRaceWeek.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this EditorRaceWeek.


        :param display_name: The display_name of this EditorRaceWeek.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditorRaceWeek, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditorRaceWeek):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
