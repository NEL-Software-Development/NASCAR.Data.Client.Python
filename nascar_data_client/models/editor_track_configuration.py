# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class EditorTrackConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'publish_state': 'PublishState',
        'id': 'int',
        'tracking_id': 'str',
        'in_data_warehouse': 'bool',
        'manually_set': 'bool',
        'last_update': 'datetime',
        'last_updated_by': 'str',
        'history_track_configuration_id': 'int',
        'history_track_id': 'int',
        'track_name': 'str',
        'altitude': 'float',
        'northwest_latitude': 'float',
        'northwest_longitude': 'float',
        'southeast_latitude': 'float',
        'southeast_longitude': 'float',
        'heading': 'float',
        'finish_line_rotation': 'float',
        'finish_line_translate_x': 'float',
        'finish_line_translate_y': 'float',
        'pit_finish_line_rotation': 'float',
        'pit_finish_line_translate_x': 'float',
        'pit_finish_line_translate_y': 'float'
    }

    attribute_map = {
        'publish_state': 'PublishState',
        'id': 'id',
        'tracking_id': 'tracking_id',
        'in_data_warehouse': 'InDataWarehouse',
        'manually_set': 'Manually_Set',
        'last_update': 'LastUpdate',
        'last_updated_by': 'LastUpdatedBy',
        'history_track_configuration_id': 'History_TrackConfigurationId',
        'history_track_id': 'History_TrackId',
        'track_name': 'TrackName',
        'altitude': 'Altitude',
        'northwest_latitude': 'NorthwestLatitude',
        'northwest_longitude': 'NorthwestLongitude',
        'southeast_latitude': 'SoutheastLatitude',
        'southeast_longitude': 'SoutheastLongitude',
        'heading': 'Heading',
        'finish_line_rotation': 'FinishLineRotation',
        'finish_line_translate_x': 'FinishLineTranslateX',
        'finish_line_translate_y': 'FinishLineTranslateY',
        'pit_finish_line_rotation': 'PitFinishLineRotation',
        'pit_finish_line_translate_x': 'PitFinishLineTranslateX',
        'pit_finish_line_translate_y': 'PitFinishLineTranslateY'
    }

    def __init__(self, publish_state=None, id=None, tracking_id=None, in_data_warehouse=None, manually_set=None, last_update=None, last_updated_by=None, history_track_configuration_id=None, history_track_id=None, track_name=None, altitude=None, northwest_latitude=None, northwest_longitude=None, southeast_latitude=None, southeast_longitude=None, heading=None, finish_line_rotation=None, finish_line_translate_x=None, finish_line_translate_y=None, pit_finish_line_rotation=None, pit_finish_line_translate_x=None, pit_finish_line_translate_y=None):  # noqa: E501
        """EditorTrackConfiguration - a model defined in Swagger"""  # noqa: E501
        self._publish_state = None
        self._id = None
        self._tracking_id = None
        self._in_data_warehouse = None
        self._manually_set = None
        self._last_update = None
        self._last_updated_by = None
        self._history_track_configuration_id = None
        self._history_track_id = None
        self._track_name = None
        self._altitude = None
        self._northwest_latitude = None
        self._northwest_longitude = None
        self._southeast_latitude = None
        self._southeast_longitude = None
        self._heading = None
        self._finish_line_rotation = None
        self._finish_line_translate_x = None
        self._finish_line_translate_y = None
        self._pit_finish_line_rotation = None
        self._pit_finish_line_translate_x = None
        self._pit_finish_line_translate_y = None
        self.discriminator = None
        if publish_state is not None:
            self.publish_state = publish_state
        if id is not None:
            self.id = id
        if tracking_id is not None:
            self.tracking_id = tracking_id
        if in_data_warehouse is not None:
            self.in_data_warehouse = in_data_warehouse
        if manually_set is not None:
            self.manually_set = manually_set
        if last_update is not None:
            self.last_update = last_update
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if history_track_configuration_id is not None:
            self.history_track_configuration_id = history_track_configuration_id
        if history_track_id is not None:
            self.history_track_id = history_track_id
        if track_name is not None:
            self.track_name = track_name
        if altitude is not None:
            self.altitude = altitude
        if northwest_latitude is not None:
            self.northwest_latitude = northwest_latitude
        if northwest_longitude is not None:
            self.northwest_longitude = northwest_longitude
        if southeast_latitude is not None:
            self.southeast_latitude = southeast_latitude
        if southeast_longitude is not None:
            self.southeast_longitude = southeast_longitude
        if heading is not None:
            self.heading = heading
        if finish_line_rotation is not None:
            self.finish_line_rotation = finish_line_rotation
        if finish_line_translate_x is not None:
            self.finish_line_translate_x = finish_line_translate_x
        if finish_line_translate_y is not None:
            self.finish_line_translate_y = finish_line_translate_y
        if pit_finish_line_rotation is not None:
            self.pit_finish_line_rotation = pit_finish_line_rotation
        if pit_finish_line_translate_x is not None:
            self.pit_finish_line_translate_x = pit_finish_line_translate_x
        if pit_finish_line_translate_y is not None:
            self.pit_finish_line_translate_y = pit_finish_line_translate_y

    @property
    def publish_state(self):
        """Gets the publish_state of this EditorTrackConfiguration.  # noqa: E501


        :return: The publish_state of this EditorTrackConfiguration.  # noqa: E501
        :rtype: PublishState
        """
        return self._publish_state

    @publish_state.setter
    def publish_state(self, publish_state):
        """Sets the publish_state of this EditorTrackConfiguration.


        :param publish_state: The publish_state of this EditorTrackConfiguration.  # noqa: E501
        :type: PublishState
        """

        self._publish_state = publish_state

    @property
    def id(self):
        """Gets the id of this EditorTrackConfiguration.  # noqa: E501


        :return: The id of this EditorTrackConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EditorTrackConfiguration.


        :param id: The id of this EditorTrackConfiguration.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tracking_id(self):
        """Gets the tracking_id of this EditorTrackConfiguration.  # noqa: E501


        :return: The tracking_id of this EditorTrackConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this EditorTrackConfiguration.


        :param tracking_id: The tracking_id of this EditorTrackConfiguration.  # noqa: E501
        :type: str
        """

        self._tracking_id = tracking_id

    @property
    def in_data_warehouse(self):
        """Gets the in_data_warehouse of this EditorTrackConfiguration.  # noqa: E501


        :return: The in_data_warehouse of this EditorTrackConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._in_data_warehouse

    @in_data_warehouse.setter
    def in_data_warehouse(self, in_data_warehouse):
        """Sets the in_data_warehouse of this EditorTrackConfiguration.


        :param in_data_warehouse: The in_data_warehouse of this EditorTrackConfiguration.  # noqa: E501
        :type: bool
        """

        self._in_data_warehouse = in_data_warehouse

    @property
    def manually_set(self):
        """Gets the manually_set of this EditorTrackConfiguration.  # noqa: E501


        :return: The manually_set of this EditorTrackConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._manually_set

    @manually_set.setter
    def manually_set(self, manually_set):
        """Sets the manually_set of this EditorTrackConfiguration.


        :param manually_set: The manually_set of this EditorTrackConfiguration.  # noqa: E501
        :type: bool
        """

        self._manually_set = manually_set

    @property
    def last_update(self):
        """Gets the last_update of this EditorTrackConfiguration.  # noqa: E501


        :return: The last_update of this EditorTrackConfiguration.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this EditorTrackConfiguration.


        :param last_update: The last_update of this EditorTrackConfiguration.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this EditorTrackConfiguration.  # noqa: E501


        :return: The last_updated_by of this EditorTrackConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this EditorTrackConfiguration.


        :param last_updated_by: The last_updated_by of this EditorTrackConfiguration.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def history_track_configuration_id(self):
        """Gets the history_track_configuration_id of this EditorTrackConfiguration.  # noqa: E501


        :return: The history_track_configuration_id of this EditorTrackConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._history_track_configuration_id

    @history_track_configuration_id.setter
    def history_track_configuration_id(self, history_track_configuration_id):
        """Sets the history_track_configuration_id of this EditorTrackConfiguration.


        :param history_track_configuration_id: The history_track_configuration_id of this EditorTrackConfiguration.  # noqa: E501
        :type: int
        """

        self._history_track_configuration_id = history_track_configuration_id

    @property
    def history_track_id(self):
        """Gets the history_track_id of this EditorTrackConfiguration.  # noqa: E501


        :return: The history_track_id of this EditorTrackConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._history_track_id

    @history_track_id.setter
    def history_track_id(self, history_track_id):
        """Sets the history_track_id of this EditorTrackConfiguration.


        :param history_track_id: The history_track_id of this EditorTrackConfiguration.  # noqa: E501
        :type: int
        """

        self._history_track_id = history_track_id

    @property
    def track_name(self):
        """Gets the track_name of this EditorTrackConfiguration.  # noqa: E501


        :return: The track_name of this EditorTrackConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._track_name

    @track_name.setter
    def track_name(self, track_name):
        """Sets the track_name of this EditorTrackConfiguration.


        :param track_name: The track_name of this EditorTrackConfiguration.  # noqa: E501
        :type: str
        """

        self._track_name = track_name

    @property
    def altitude(self):
        """Gets the altitude of this EditorTrackConfiguration.  # noqa: E501


        :return: The altitude of this EditorTrackConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this EditorTrackConfiguration.


        :param altitude: The altitude of this EditorTrackConfiguration.  # noqa: E501
        :type: float
        """

        self._altitude = altitude

    @property
    def northwest_latitude(self):
        """Gets the northwest_latitude of this EditorTrackConfiguration.  # noqa: E501


        :return: The northwest_latitude of this EditorTrackConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._northwest_latitude

    @northwest_latitude.setter
    def northwest_latitude(self, northwest_latitude):
        """Sets the northwest_latitude of this EditorTrackConfiguration.


        :param northwest_latitude: The northwest_latitude of this EditorTrackConfiguration.  # noqa: E501
        :type: float
        """

        self._northwest_latitude = northwest_latitude

    @property
    def northwest_longitude(self):
        """Gets the northwest_longitude of this EditorTrackConfiguration.  # noqa: E501


        :return: The northwest_longitude of this EditorTrackConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._northwest_longitude

    @northwest_longitude.setter
    def northwest_longitude(self, northwest_longitude):
        """Sets the northwest_longitude of this EditorTrackConfiguration.


        :param northwest_longitude: The northwest_longitude of this EditorTrackConfiguration.  # noqa: E501
        :type: float
        """

        self._northwest_longitude = northwest_longitude

    @property
    def southeast_latitude(self):
        """Gets the southeast_latitude of this EditorTrackConfiguration.  # noqa: E501


        :return: The southeast_latitude of this EditorTrackConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._southeast_latitude

    @southeast_latitude.setter
    def southeast_latitude(self, southeast_latitude):
        """Sets the southeast_latitude of this EditorTrackConfiguration.


        :param southeast_latitude: The southeast_latitude of this EditorTrackConfiguration.  # noqa: E501
        :type: float
        """

        self._southeast_latitude = southeast_latitude

    @property
    def southeast_longitude(self):
        """Gets the southeast_longitude of this EditorTrackConfiguration.  # noqa: E501


        :return: The southeast_longitude of this EditorTrackConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._southeast_longitude

    @southeast_longitude.setter
    def southeast_longitude(self, southeast_longitude):
        """Sets the southeast_longitude of this EditorTrackConfiguration.


        :param southeast_longitude: The southeast_longitude of this EditorTrackConfiguration.  # noqa: E501
        :type: float
        """

        self._southeast_longitude = southeast_longitude

    @property
    def heading(self):
        """Gets the heading of this EditorTrackConfiguration.  # noqa: E501


        :return: The heading of this EditorTrackConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this EditorTrackConfiguration.


        :param heading: The heading of this EditorTrackConfiguration.  # noqa: E501
        :type: float
        """

        self._heading = heading

    @property
    def finish_line_rotation(self):
        """Gets the finish_line_rotation of this EditorTrackConfiguration.  # noqa: E501


        :return: The finish_line_rotation of this EditorTrackConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._finish_line_rotation

    @finish_line_rotation.setter
    def finish_line_rotation(self, finish_line_rotation):
        """Sets the finish_line_rotation of this EditorTrackConfiguration.


        :param finish_line_rotation: The finish_line_rotation of this EditorTrackConfiguration.  # noqa: E501
        :type: float
        """

        self._finish_line_rotation = finish_line_rotation

    @property
    def finish_line_translate_x(self):
        """Gets the finish_line_translate_x of this EditorTrackConfiguration.  # noqa: E501


        :return: The finish_line_translate_x of this EditorTrackConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._finish_line_translate_x

    @finish_line_translate_x.setter
    def finish_line_translate_x(self, finish_line_translate_x):
        """Sets the finish_line_translate_x of this EditorTrackConfiguration.


        :param finish_line_translate_x: The finish_line_translate_x of this EditorTrackConfiguration.  # noqa: E501
        :type: float
        """

        self._finish_line_translate_x = finish_line_translate_x

    @property
    def finish_line_translate_y(self):
        """Gets the finish_line_translate_y of this EditorTrackConfiguration.  # noqa: E501


        :return: The finish_line_translate_y of this EditorTrackConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._finish_line_translate_y

    @finish_line_translate_y.setter
    def finish_line_translate_y(self, finish_line_translate_y):
        """Sets the finish_line_translate_y of this EditorTrackConfiguration.


        :param finish_line_translate_y: The finish_line_translate_y of this EditorTrackConfiguration.  # noqa: E501
        :type: float
        """

        self._finish_line_translate_y = finish_line_translate_y

    @property
    def pit_finish_line_rotation(self):
        """Gets the pit_finish_line_rotation of this EditorTrackConfiguration.  # noqa: E501


        :return: The pit_finish_line_rotation of this EditorTrackConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._pit_finish_line_rotation

    @pit_finish_line_rotation.setter
    def pit_finish_line_rotation(self, pit_finish_line_rotation):
        """Sets the pit_finish_line_rotation of this EditorTrackConfiguration.


        :param pit_finish_line_rotation: The pit_finish_line_rotation of this EditorTrackConfiguration.  # noqa: E501
        :type: float
        """

        self._pit_finish_line_rotation = pit_finish_line_rotation

    @property
    def pit_finish_line_translate_x(self):
        """Gets the pit_finish_line_translate_x of this EditorTrackConfiguration.  # noqa: E501


        :return: The pit_finish_line_translate_x of this EditorTrackConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._pit_finish_line_translate_x

    @pit_finish_line_translate_x.setter
    def pit_finish_line_translate_x(self, pit_finish_line_translate_x):
        """Sets the pit_finish_line_translate_x of this EditorTrackConfiguration.


        :param pit_finish_line_translate_x: The pit_finish_line_translate_x of this EditorTrackConfiguration.  # noqa: E501
        :type: float
        """

        self._pit_finish_line_translate_x = pit_finish_line_translate_x

    @property
    def pit_finish_line_translate_y(self):
        """Gets the pit_finish_line_translate_y of this EditorTrackConfiguration.  # noqa: E501


        :return: The pit_finish_line_translate_y of this EditorTrackConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._pit_finish_line_translate_y

    @pit_finish_line_translate_y.setter
    def pit_finish_line_translate_y(self, pit_finish_line_translate_y):
        """Sets the pit_finish_line_translate_y of this EditorTrackConfiguration.


        :param pit_finish_line_translate_y: The pit_finish_line_translate_y of this EditorTrackConfiguration.  # noqa: E501
        :type: float
        """

        self._pit_finish_line_translate_y = pit_finish_line_translate_y

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditorTrackConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditorTrackConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
