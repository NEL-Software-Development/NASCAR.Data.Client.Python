# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ERDPDatapoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'datapoint_id': 'str',
        'name': 'str',
        'description': 'str',
        'can_id': 'int',
        'most_significant_bit': 'int',
        'length': 'int',
        'gain': 'float',
        'offset': 'float',
        'signed': 'bool',
        'range_min': 'int',
        'range_max': 'int',
        'mux_most_significant_bit': 'int',
        'mux_length': 'int',
        'mux_id': 'int',
        'is_active': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'datapoint_id': 'datapoint_id',
        'name': 'name',
        'description': 'description',
        'can_id': 'can_id',
        'most_significant_bit': 'most_significant_bit',
        'length': 'length',
        'gain': 'gain',
        'offset': 'offset',
        'signed': 'signed',
        'range_min': 'range_min',
        'range_max': 'range_max',
        'mux_most_significant_bit': 'mux_most_significant_bit',
        'mux_length': 'mux_length',
        'mux_id': 'mux_id',
        'is_active': 'is_active'
    }

    def __init__(self, id=None, datapoint_id=None, name=None, description=None, can_id=None, most_significant_bit=None, length=None, gain=None, offset=None, signed=None, range_min=None, range_max=None, mux_most_significant_bit=None, mux_length=None, mux_id=None, is_active=None):  # noqa: E501
        """ERDPDatapoint - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._datapoint_id = None
        self._name = None
        self._description = None
        self._can_id = None
        self._most_significant_bit = None
        self._length = None
        self._gain = None
        self._offset = None
        self._signed = None
        self._range_min = None
        self._range_max = None
        self._mux_most_significant_bit = None
        self._mux_length = None
        self._mux_id = None
        self._is_active = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if datapoint_id is not None:
            self.datapoint_id = datapoint_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if can_id is not None:
            self.can_id = can_id
        if most_significant_bit is not None:
            self.most_significant_bit = most_significant_bit
        if length is not None:
            self.length = length
        if gain is not None:
            self.gain = gain
        if offset is not None:
            self.offset = offset
        if signed is not None:
            self.signed = signed
        if range_min is not None:
            self.range_min = range_min
        if range_max is not None:
            self.range_max = range_max
        if mux_most_significant_bit is not None:
            self.mux_most_significant_bit = mux_most_significant_bit
        if mux_length is not None:
            self.mux_length = mux_length
        if mux_id is not None:
            self.mux_id = mux_id
        if is_active is not None:
            self.is_active = is_active

    @property
    def id(self):
        """Gets the id of this ERDPDatapoint.  # noqa: E501


        :return: The id of this ERDPDatapoint.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ERDPDatapoint.


        :param id: The id of this ERDPDatapoint.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def datapoint_id(self):
        """Gets the datapoint_id of this ERDPDatapoint.  # noqa: E501


        :return: The datapoint_id of this ERDPDatapoint.  # noqa: E501
        :rtype: str
        """
        return self._datapoint_id

    @datapoint_id.setter
    def datapoint_id(self, datapoint_id):
        """Sets the datapoint_id of this ERDPDatapoint.


        :param datapoint_id: The datapoint_id of this ERDPDatapoint.  # noqa: E501
        :type: str
        """

        self._datapoint_id = datapoint_id

    @property
    def name(self):
        """Gets the name of this ERDPDatapoint.  # noqa: E501


        :return: The name of this ERDPDatapoint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ERDPDatapoint.


        :param name: The name of this ERDPDatapoint.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ERDPDatapoint.  # noqa: E501


        :return: The description of this ERDPDatapoint.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ERDPDatapoint.


        :param description: The description of this ERDPDatapoint.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def can_id(self):
        """Gets the can_id of this ERDPDatapoint.  # noqa: E501


        :return: The can_id of this ERDPDatapoint.  # noqa: E501
        :rtype: int
        """
        return self._can_id

    @can_id.setter
    def can_id(self, can_id):
        """Sets the can_id of this ERDPDatapoint.


        :param can_id: The can_id of this ERDPDatapoint.  # noqa: E501
        :type: int
        """

        self._can_id = can_id

    @property
    def most_significant_bit(self):
        """Gets the most_significant_bit of this ERDPDatapoint.  # noqa: E501


        :return: The most_significant_bit of this ERDPDatapoint.  # noqa: E501
        :rtype: int
        """
        return self._most_significant_bit

    @most_significant_bit.setter
    def most_significant_bit(self, most_significant_bit):
        """Sets the most_significant_bit of this ERDPDatapoint.


        :param most_significant_bit: The most_significant_bit of this ERDPDatapoint.  # noqa: E501
        :type: int
        """

        self._most_significant_bit = most_significant_bit

    @property
    def length(self):
        """Gets the length of this ERDPDatapoint.  # noqa: E501


        :return: The length of this ERDPDatapoint.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ERDPDatapoint.


        :param length: The length of this ERDPDatapoint.  # noqa: E501
        :type: int
        """

        self._length = length

    @property
    def gain(self):
        """Gets the gain of this ERDPDatapoint.  # noqa: E501


        :return: The gain of this ERDPDatapoint.  # noqa: E501
        :rtype: float
        """
        return self._gain

    @gain.setter
    def gain(self, gain):
        """Sets the gain of this ERDPDatapoint.


        :param gain: The gain of this ERDPDatapoint.  # noqa: E501
        :type: float
        """

        self._gain = gain

    @property
    def offset(self):
        """Gets the offset of this ERDPDatapoint.  # noqa: E501


        :return: The offset of this ERDPDatapoint.  # noqa: E501
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ERDPDatapoint.


        :param offset: The offset of this ERDPDatapoint.  # noqa: E501
        :type: float
        """

        self._offset = offset

    @property
    def signed(self):
        """Gets the signed of this ERDPDatapoint.  # noqa: E501


        :return: The signed of this ERDPDatapoint.  # noqa: E501
        :rtype: bool
        """
        return self._signed

    @signed.setter
    def signed(self, signed):
        """Sets the signed of this ERDPDatapoint.


        :param signed: The signed of this ERDPDatapoint.  # noqa: E501
        :type: bool
        """

        self._signed = signed

    @property
    def range_min(self):
        """Gets the range_min of this ERDPDatapoint.  # noqa: E501


        :return: The range_min of this ERDPDatapoint.  # noqa: E501
        :rtype: int
        """
        return self._range_min

    @range_min.setter
    def range_min(self, range_min):
        """Sets the range_min of this ERDPDatapoint.


        :param range_min: The range_min of this ERDPDatapoint.  # noqa: E501
        :type: int
        """

        self._range_min = range_min

    @property
    def range_max(self):
        """Gets the range_max of this ERDPDatapoint.  # noqa: E501


        :return: The range_max of this ERDPDatapoint.  # noqa: E501
        :rtype: int
        """
        return self._range_max

    @range_max.setter
    def range_max(self, range_max):
        """Sets the range_max of this ERDPDatapoint.


        :param range_max: The range_max of this ERDPDatapoint.  # noqa: E501
        :type: int
        """

        self._range_max = range_max

    @property
    def mux_most_significant_bit(self):
        """Gets the mux_most_significant_bit of this ERDPDatapoint.  # noqa: E501


        :return: The mux_most_significant_bit of this ERDPDatapoint.  # noqa: E501
        :rtype: int
        """
        return self._mux_most_significant_bit

    @mux_most_significant_bit.setter
    def mux_most_significant_bit(self, mux_most_significant_bit):
        """Sets the mux_most_significant_bit of this ERDPDatapoint.


        :param mux_most_significant_bit: The mux_most_significant_bit of this ERDPDatapoint.  # noqa: E501
        :type: int
        """

        self._mux_most_significant_bit = mux_most_significant_bit

    @property
    def mux_length(self):
        """Gets the mux_length of this ERDPDatapoint.  # noqa: E501


        :return: The mux_length of this ERDPDatapoint.  # noqa: E501
        :rtype: int
        """
        return self._mux_length

    @mux_length.setter
    def mux_length(self, mux_length):
        """Sets the mux_length of this ERDPDatapoint.


        :param mux_length: The mux_length of this ERDPDatapoint.  # noqa: E501
        :type: int
        """

        self._mux_length = mux_length

    @property
    def mux_id(self):
        """Gets the mux_id of this ERDPDatapoint.  # noqa: E501


        :return: The mux_id of this ERDPDatapoint.  # noqa: E501
        :rtype: int
        """
        return self._mux_id

    @mux_id.setter
    def mux_id(self, mux_id):
        """Sets the mux_id of this ERDPDatapoint.


        :param mux_id: The mux_id of this ERDPDatapoint.  # noqa: E501
        :type: int
        """

        self._mux_id = mux_id

    @property
    def is_active(self):
        """Gets the is_active of this ERDPDatapoint.  # noqa: E501


        :return: The is_active of this ERDPDatapoint.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ERDPDatapoint.


        :param is_active: The is_active of this ERDPDatapoint.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ERDPDatapoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ERDPDatapoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
