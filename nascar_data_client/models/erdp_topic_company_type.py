# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ERDPTopicCompanyType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'company_type_id': 'int',
        'topic': 'ERDPTopic',
        'is_active': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'company_type_id': 'company_type_id',
        'topic': 'topic',
        'is_active': 'is_active'
    }

    def __init__(self, name=None, company_type_id=None, topic=None, is_active=None):  # noqa: E501
        """ERDPTopicCompanyType - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._company_type_id = None
        self._topic = None
        self._is_active = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if company_type_id is not None:
            self.company_type_id = company_type_id
        if topic is not None:
            self.topic = topic
        if is_active is not None:
            self.is_active = is_active

    @property
    def name(self):
        """Gets the name of this ERDPTopicCompanyType.  # noqa: E501


        :return: The name of this ERDPTopicCompanyType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ERDPTopicCompanyType.


        :param name: The name of this ERDPTopicCompanyType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def company_type_id(self):
        """Gets the company_type_id of this ERDPTopicCompanyType.  # noqa: E501


        :return: The company_type_id of this ERDPTopicCompanyType.  # noqa: E501
        :rtype: int
        """
        return self._company_type_id

    @company_type_id.setter
    def company_type_id(self, company_type_id):
        """Sets the company_type_id of this ERDPTopicCompanyType.


        :param company_type_id: The company_type_id of this ERDPTopicCompanyType.  # noqa: E501
        :type: int
        """

        self._company_type_id = company_type_id

    @property
    def topic(self):
        """Gets the topic of this ERDPTopicCompanyType.  # noqa: E501


        :return: The topic of this ERDPTopicCompanyType.  # noqa: E501
        :rtype: ERDPTopic
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this ERDPTopicCompanyType.


        :param topic: The topic of this ERDPTopicCompanyType.  # noqa: E501
        :type: ERDPTopic
        """

        self._topic = topic

    @property
    def is_active(self):
        """Gets the is_active of this ERDPTopicCompanyType.  # noqa: E501


        :return: The is_active of this ERDPTopicCompanyType.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ERDPTopicCompanyType.


        :param is_active: The is_active of this ERDPTopicCompanyType.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ERDPTopicCompanyType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ERDPTopicCompanyType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
