# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Flag(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_lap': 'int',
        'finish_lap': 'int',
        'number_of_laps': 'int',
        'elapsed_time': 'int',
        'time': 'datetime',
        'duration': 'int',
        'flag_state': 'str',
        'comment': 'str'
    }

    attribute_map = {
        'start_lap': 'start_lap',
        'finish_lap': 'finish_lap',
        'number_of_laps': 'number_of_laps',
        'elapsed_time': 'elapsed_time',
        'time': 'time',
        'duration': 'duration',
        'flag_state': 'flag_state',
        'comment': 'comment'
    }

    def __init__(self, start_lap=None, finish_lap=None, number_of_laps=None, elapsed_time=None, time=None, duration=None, flag_state=None, comment=None):  # noqa: E501
        """Flag - a model defined in Swagger"""  # noqa: E501
        self._start_lap = None
        self._finish_lap = None
        self._number_of_laps = None
        self._elapsed_time = None
        self._time = None
        self._duration = None
        self._flag_state = None
        self._comment = None
        self.discriminator = None
        if start_lap is not None:
            self.start_lap = start_lap
        if finish_lap is not None:
            self.finish_lap = finish_lap
        if number_of_laps is not None:
            self.number_of_laps = number_of_laps
        if elapsed_time is not None:
            self.elapsed_time = elapsed_time
        if time is not None:
            self.time = time
        if duration is not None:
            self.duration = duration
        if flag_state is not None:
            self.flag_state = flag_state
        if comment is not None:
            self.comment = comment

    @property
    def start_lap(self):
        """Gets the start_lap of this Flag.  # noqa: E501

        The flag's first lap  # noqa: E501

        :return: The start_lap of this Flag.  # noqa: E501
        :rtype: int
        """
        return self._start_lap

    @start_lap.setter
    def start_lap(self, start_lap):
        """Sets the start_lap of this Flag.

        The flag's first lap  # noqa: E501

        :param start_lap: The start_lap of this Flag.  # noqa: E501
        :type: int
        """

        self._start_lap = start_lap

    @property
    def finish_lap(self):
        """Gets the finish_lap of this Flag.  # noqa: E501

        The flag's last lap  # noqa: E501

        :return: The finish_lap of this Flag.  # noqa: E501
        :rtype: int
        """
        return self._finish_lap

    @finish_lap.setter
    def finish_lap(self, finish_lap):
        """Sets the finish_lap of this Flag.

        The flag's last lap  # noqa: E501

        :param finish_lap: The finish_lap of this Flag.  # noqa: E501
        :type: int
        """

        self._finish_lap = finish_lap

    @property
    def number_of_laps(self):
        """Gets the number_of_laps of this Flag.  # noqa: E501

        Total number of laps  # noqa: E501

        :return: The number_of_laps of this Flag.  # noqa: E501
        :rtype: int
        """
        return self._number_of_laps

    @number_of_laps.setter
    def number_of_laps(self, number_of_laps):
        """Sets the number_of_laps of this Flag.

        Total number of laps  # noqa: E501

        :param number_of_laps: The number_of_laps of this Flag.  # noqa: E501
        :type: int
        """

        self._number_of_laps = number_of_laps

    @property
    def elapsed_time(self):
        """Gets the elapsed_time of this Flag.  # noqa: E501

        Elapsed race time in milliseconds  # noqa: E501

        :return: The elapsed_time of this Flag.  # noqa: E501
        :rtype: int
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """Sets the elapsed_time of this Flag.

        Elapsed race time in milliseconds  # noqa: E501

        :param elapsed_time: The elapsed_time of this Flag.  # noqa: E501
        :type: int
        """

        self._elapsed_time = elapsed_time

    @property
    def time(self):
        """Gets the time of this Flag.  # noqa: E501

        Time of flag  # noqa: E501

        :return: The time of this Flag.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Flag.

        Time of flag  # noqa: E501

        :param time: The time of this Flag.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def duration(self):
        """Gets the duration of this Flag.  # noqa: E501

        Duration in seconds  # noqa: E501

        :return: The duration of this Flag.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Flag.

        Duration in seconds  # noqa: E501

        :param duration: The duration of this Flag.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def flag_state(self):
        """Gets the flag_state of this Flag.  # noqa: E501

        Flag stage:  (NONE, WARMUP, GREEN, YELLOW, RED, WHITE, FINISH, EXTRA)  # noqa: E501

        :return: The flag_state of this Flag.  # noqa: E501
        :rtype: str
        """
        return self._flag_state

    @flag_state.setter
    def flag_state(self, flag_state):
        """Sets the flag_state of this Flag.

        Flag stage:  (NONE, WARMUP, GREEN, YELLOW, RED, WHITE, FINISH, EXTRA)  # noqa: E501

        :param flag_state: The flag_state of this Flag.  # noqa: E501
        :type: str
        """

        self._flag_state = flag_state

    @property
    def comment(self):
        """Gets the comment of this Flag.  # noqa: E501

        Comments  # noqa: E501

        :return: The comment of this Flag.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Flag.

        Comments  # noqa: E501

        :param comment: The comment of this Flag.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Flag, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Flag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
