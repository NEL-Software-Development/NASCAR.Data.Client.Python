# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LapLeader(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_lap': 'int',
        'end_lap': 'int',
        'laps_led': 'int',
        'vehicle_number': 'str'
    }

    attribute_map = {
        'start_lap': 'start_lap',
        'end_lap': 'end_lap',
        'laps_led': 'laps_led',
        'vehicle_number': 'vehicle_number'
    }

    def __init__(self, start_lap=None, end_lap=None, laps_led=None, vehicle_number=None):  # noqa: E501
        """LapLeader - a model defined in Swagger"""  # noqa: E501
        self._start_lap = None
        self._end_lap = None
        self._laps_led = None
        self._vehicle_number = None
        self.discriminator = None
        if start_lap is not None:
            self.start_lap = start_lap
        if end_lap is not None:
            self.end_lap = end_lap
        if laps_led is not None:
            self.laps_led = laps_led
        if vehicle_number is not None:
            self.vehicle_number = vehicle_number

    @property
    def start_lap(self):
        """Gets the start_lap of this LapLeader.  # noqa: E501


        :return: The start_lap of this LapLeader.  # noqa: E501
        :rtype: int
        """
        return self._start_lap

    @start_lap.setter
    def start_lap(self, start_lap):
        """Sets the start_lap of this LapLeader.


        :param start_lap: The start_lap of this LapLeader.  # noqa: E501
        :type: int
        """

        self._start_lap = start_lap

    @property
    def end_lap(self):
        """Gets the end_lap of this LapLeader.  # noqa: E501


        :return: The end_lap of this LapLeader.  # noqa: E501
        :rtype: int
        """
        return self._end_lap

    @end_lap.setter
    def end_lap(self, end_lap):
        """Sets the end_lap of this LapLeader.


        :param end_lap: The end_lap of this LapLeader.  # noqa: E501
        :type: int
        """

        self._end_lap = end_lap

    @property
    def laps_led(self):
        """Gets the laps_led of this LapLeader.  # noqa: E501


        :return: The laps_led of this LapLeader.  # noqa: E501
        :rtype: int
        """
        return self._laps_led

    @laps_led.setter
    def laps_led(self, laps_led):
        """Sets the laps_led of this LapLeader.


        :param laps_led: The laps_led of this LapLeader.  # noqa: E501
        :type: int
        """

        self._laps_led = laps_led

    @property
    def vehicle_number(self):
        """Gets the vehicle_number of this LapLeader.  # noqa: E501


        :return: The vehicle_number of this LapLeader.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_number

    @vehicle_number.setter
    def vehicle_number(self, vehicle_number):
        """Sets the vehicle_number of this LapLeader.


        :param vehicle_number: The vehicle_number of this LapLeader.  # noqa: E501
        :type: str
        """

        self._vehicle_number = vehicle_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LapLeader, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LapLeader):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
