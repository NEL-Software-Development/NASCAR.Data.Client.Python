# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ManufacturerPoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'position': 'int',
        'manufacturer': 'str',
        'points': 'int',
        'wins': 'int',
        'best_finish': 'datetime'
    }

    attribute_map = {
        'position': 'position',
        'manufacturer': 'manufacturer',
        'points': 'points',
        'wins': 'wins',
        'best_finish': 'best_finish'
    }

    def __init__(self, position=None, manufacturer=None, points=None, wins=None, best_finish=None):  # noqa: E501
        """ManufacturerPoint - a model defined in Swagger"""  # noqa: E501
        self._position = None
        self._manufacturer = None
        self._points = None
        self._wins = None
        self._best_finish = None
        self.discriminator = None
        if position is not None:
            self.position = position
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if points is not None:
            self.points = points
        if wins is not None:
            self.wins = wins
        if best_finish is not None:
            self.best_finish = best_finish

    @property
    def position(self):
        """Gets the position of this ManufacturerPoint.  # noqa: E501

        Points position  # noqa: E501

        :return: The position of this ManufacturerPoint.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ManufacturerPoint.

        Points position  # noqa: E501

        :param position: The position of this ManufacturerPoint.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def manufacturer(self):
        """Gets the manufacturer of this ManufacturerPoint.  # noqa: E501

        Manufacturer name  # noqa: E501

        :return: The manufacturer of this ManufacturerPoint.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this ManufacturerPoint.

        Manufacturer name  # noqa: E501

        :param manufacturer: The manufacturer of this ManufacturerPoint.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def points(self):
        """Gets the points of this ManufacturerPoint.  # noqa: E501

        Number of points earned  # noqa: E501

        :return: The points of this ManufacturerPoint.  # noqa: E501
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this ManufacturerPoint.

        Number of points earned  # noqa: E501

        :param points: The points of this ManufacturerPoint.  # noqa: E501
        :type: int
        """

        self._points = points

    @property
    def wins(self):
        """Gets the wins of this ManufacturerPoint.  # noqa: E501

        Total wins in season  # noqa: E501

        :return: The wins of this ManufacturerPoint.  # noqa: E501
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this ManufacturerPoint.

        Total wins in season  # noqa: E501

        :param wins: The wins of this ManufacturerPoint.  # noqa: E501
        :type: int
        """

        self._wins = wins

    @property
    def best_finish(self):
        """Gets the best_finish of this ManufacturerPoint.  # noqa: E501

        Best finish date  # noqa: E501

        :return: The best_finish of this ManufacturerPoint.  # noqa: E501
        :rtype: datetime
        """
        return self._best_finish

    @best_finish.setter
    def best_finish(self, best_finish):
        """Sets the best_finish of this ManufacturerPoint.

        Best finish date  # noqa: E501

        :param best_finish: The best_finish of this ManufacturerPoint.  # noqa: E501
        :type: datetime
        """

        self._best_finish = best_finish

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ManufacturerPoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManufacturerPoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
