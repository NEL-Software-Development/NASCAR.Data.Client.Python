# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class OSSScan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vehicle_number': 'str',
        'chassis': 'str',
        'limits_bodyoffset_min': 'float',
        'limits_bodyoffset_max': 'float',
        'passfails_bodyoffset': 'bool',
        'results_bodyoffset': 'float',
        'limits_camber_lf_min': 'float',
        'limits_camber_lf_max': 'float',
        'passfails_camber_lf': 'bool',
        'results_camber_lf': 'float',
        'limits_camber_lr_min': 'float',
        'limits_camber_lr_max': 'float',
        'passfails_camber_lr': 'bool',
        'results_camber_lr': 'float',
        'limits_camber_rf_min': 'float',
        'limits_camber_rf_max': 'float',
        'passfails_camber_rf': 'bool',
        'results_camber_rf': 'float',
        'limits_camber_rr_min': 'float',
        'limits_camber_rr_max': 'float',
        'passfails_camber_rr': 'bool',
        'results_camber_rr': 'float',
        'limits_lf_framerail_min': 'float',
        'limits_lf_framerail_max': 'float',
        'passfails_lf_framerail': 'bool',
        'results_lf_framerail': 'float',
        'limits_lr_framerail_min': 'float',
        'limits_lr_framerail_max': 'float',
        'passfails_lr_framerail': 'bool',
        'results_lr_framerail': 'float',
        'limits_rf_framerail_min': 'float',
        'limits_rf_framerail_max': 'float',
        'passfails_rf_framerail': 'bool',
        'results_rf_framerail': 'float',
        'limits_rh_location_left_min': 'float',
        'limits_rh_location_left_max': 'float',
        'passfails_rh_location_left': 'bool',
        'results_rh_location_left': 'float',
        'limits_rh_location_right_min': 'float',
        'limits_rh_location_right_max': 'float',
        'passfails_rh_location_right': 'bool',
        'results_rh_location_right': 'float',
        'limits_rh_skew_min': 'float',
        'limits_rh_skew_max': 'float',
        'passfails_rh_skew': 'bool',
        'results_rh_skew': 'float',
        'limits_rr_framerail_min': 'float',
        'limits_rr_framerail_max': 'float',
        'passfails_rr_framerail': 'bool',
        'results_rr_framerail': 'float',
        'limits_right_parallel_min': 'float',
        'limits_right_parallel_max': 'float',
        'passfails_right_parallel': 'bool',
        'results_right_parallel': 'float',
        'limits_treadwidth_front_min': 'float',
        'limits_treadwidth_front_max': 'float',
        'passfails_treadwidth_front': 'bool',
        'results_treadwidth_front': 'float',
        'limits_treadwidth_rear_min': 'float',
        'limits_treadwidth_rear_max': 'float',
        'passfails_treadwidth_rear': 'bool',
        'results_treadwidth_rear': 'float',
        'limits_wheelbase_left_min': 'float',
        'limits_wheelbase_left_max': 'float',
        'passfails_wheelbase_left': 'bool',
        'results_wheelbase_left': 'float',
        'limits_wheelbase_right_min': 'float',
        'limits_wheelbase_right_max': 'float',
        'passfails_wheelbase_right': 'bool',
        'results_wheelbase_right': 'float',
        'limits_toe_lr_min': 'float',
        'limits_toe_lr_max': 'float',
        'passfails_toe_lr': 'bool',
        'results_toe_lr': 'float',
        'limits_toe_rr_min': 'float',
        'limits_toe_rr_max': 'float',
        'passfails_toe_rr': 'bool',
        'results_toe_rr': 'float',
        'inspection_date': 'datetime'
    }

    attribute_map = {
        'vehicle_number': 'vehicle_number',
        'chassis': 'chassis',
        'limits_bodyoffset_min': 'limits_bodyoffset_min',
        'limits_bodyoffset_max': 'limits_bodyoffset_max',
        'passfails_bodyoffset': 'passfails_bodyoffset',
        'results_bodyoffset': 'results_bodyoffset',
        'limits_camber_lf_min': 'limits_camber_lf_min',
        'limits_camber_lf_max': 'limits_camber_lf_max',
        'passfails_camber_lf': 'passfails_camber_lf',
        'results_camber_lf': 'results_camber_lf',
        'limits_camber_lr_min': 'limits_camber_lr_min',
        'limits_camber_lr_max': 'limits_camber_lr_max',
        'passfails_camber_lr': 'passfails_camber_lr',
        'results_camber_lr': 'results_camber_lr',
        'limits_camber_rf_min': 'limits_camber_rf_min',
        'limits_camber_rf_max': 'limits_camber_rf_max',
        'passfails_camber_rf': 'passfails_camber_rf',
        'results_camber_rf': 'results_camber_rf',
        'limits_camber_rr_min': 'limits_camber_rr_min',
        'limits_camber_rr_max': 'limits_camber_rr_max',
        'passfails_camber_rr': 'passfails_camber_rr',
        'results_camber_rr': 'results_camber_rr',
        'limits_lf_framerail_min': 'limits_lf_framerail_min',
        'limits_lf_framerail_max': 'limits_lf_framerail_max',
        'passfails_lf_framerail': 'passfails_lf_framerail',
        'results_lf_framerail': 'results_lf_framerail',
        'limits_lr_framerail_min': 'limits_lr_framerail_min',
        'limits_lr_framerail_max': 'limits_lr_framerail_max',
        'passfails_lr_framerail': 'passfails_lr_framerail',
        'results_lr_framerail': 'results_lr_framerail',
        'limits_rf_framerail_min': 'limits_rf_framerail_min',
        'limits_rf_framerail_max': 'limits_rf_framerail_max',
        'passfails_rf_framerail': 'passfails_rf_framerail',
        'results_rf_framerail': 'results_rf_framerail',
        'limits_rh_location_left_min': 'limits_rh_location_left_min',
        'limits_rh_location_left_max': 'limits_rh_location_left_max',
        'passfails_rh_location_left': 'passfails_rh_location_left',
        'results_rh_location_left': 'results_rh_location_left',
        'limits_rh_location_right_min': 'limits_rh_location_right_min',
        'limits_rh_location_right_max': 'limits_rh_location_right_max',
        'passfails_rh_location_right': 'passfails_rh_location_right',
        'results_rh_location_right': 'results_rh_location_right',
        'limits_rh_skew_min': 'limits_rh_skew_min',
        'limits_rh_skew_max': 'limits_rh_skew_max',
        'passfails_rh_skew': 'passfails_rh_skew',
        'results_rh_skew': 'results_rh_skew',
        'limits_rr_framerail_min': 'limits_rr_framerail_min',
        'limits_rr_framerail_max': 'limits_rr_framerail_max',
        'passfails_rr_framerail': 'passfails_rr_framerail',
        'results_rr_framerail': 'results_rr_framerail',
        'limits_right_parallel_min': 'limits_right_parallel_min',
        'limits_right_parallel_max': 'limits_right_parallel_max',
        'passfails_right_parallel': 'passfails_right_parallel',
        'results_right_parallel': 'results_right_parallel',
        'limits_treadwidth_front_min': 'limits_treadwidth_front_min',
        'limits_treadwidth_front_max': 'limits_treadwidth_front_max',
        'passfails_treadwidth_front': 'passfails_treadwidth_front',
        'results_treadwidth_front': 'results_treadwidth_front',
        'limits_treadwidth_rear_min': 'limits_treadwidth_rear_min',
        'limits_treadwidth_rear_max': 'limits_treadwidth_rear_max',
        'passfails_treadwidth_rear': 'passfails_treadwidth_rear',
        'results_treadwidth_rear': 'results_treadwidth_rear',
        'limits_wheelbase_left_min': 'limits_wheelbase_left_min',
        'limits_wheelbase_left_max': 'limits_wheelbase_left_max',
        'passfails_wheelbase_left': 'passfails_wheelbase_left',
        'results_wheelbase_left': 'results_wheelbase_left',
        'limits_wheelbase_right_min': 'limits_wheelbase_right_min',
        'limits_wheelbase_right_max': 'limits_wheelbase_right_max',
        'passfails_wheelbase_right': 'passfails_wheelbase_right',
        'results_wheelbase_right': 'results_wheelbase_right',
        'limits_toe_lr_min': 'limits_toe_lr_min',
        'limits_toe_lr_max': 'limits_toe_lr_max',
        'passfails_toe_lr': 'passfails_toe_lr',
        'results_toe_lr': 'results_toe_lr',
        'limits_toe_rr_min': 'limits_toe_rr_min',
        'limits_toe_rr_max': 'limits_toe_rr_max',
        'passfails_toe_rr': 'passfails_toe_rr',
        'results_toe_rr': 'results_toe_rr',
        'inspection_date': 'inspection_date'
    }

    def __init__(self, vehicle_number=None, chassis=None, limits_bodyoffset_min=None, limits_bodyoffset_max=None, passfails_bodyoffset=None, results_bodyoffset=None, limits_camber_lf_min=None, limits_camber_lf_max=None, passfails_camber_lf=None, results_camber_lf=None, limits_camber_lr_min=None, limits_camber_lr_max=None, passfails_camber_lr=None, results_camber_lr=None, limits_camber_rf_min=None, limits_camber_rf_max=None, passfails_camber_rf=None, results_camber_rf=None, limits_camber_rr_min=None, limits_camber_rr_max=None, passfails_camber_rr=None, results_camber_rr=None, limits_lf_framerail_min=None, limits_lf_framerail_max=None, passfails_lf_framerail=None, results_lf_framerail=None, limits_lr_framerail_min=None, limits_lr_framerail_max=None, passfails_lr_framerail=None, results_lr_framerail=None, limits_rf_framerail_min=None, limits_rf_framerail_max=None, passfails_rf_framerail=None, results_rf_framerail=None, limits_rh_location_left_min=None, limits_rh_location_left_max=None, passfails_rh_location_left=None, results_rh_location_left=None, limits_rh_location_right_min=None, limits_rh_location_right_max=None, passfails_rh_location_right=None, results_rh_location_right=None, limits_rh_skew_min=None, limits_rh_skew_max=None, passfails_rh_skew=None, results_rh_skew=None, limits_rr_framerail_min=None, limits_rr_framerail_max=None, passfails_rr_framerail=None, results_rr_framerail=None, limits_right_parallel_min=None, limits_right_parallel_max=None, passfails_right_parallel=None, results_right_parallel=None, limits_treadwidth_front_min=None, limits_treadwidth_front_max=None, passfails_treadwidth_front=None, results_treadwidth_front=None, limits_treadwidth_rear_min=None, limits_treadwidth_rear_max=None, passfails_treadwidth_rear=None, results_treadwidth_rear=None, limits_wheelbase_left_min=None, limits_wheelbase_left_max=None, passfails_wheelbase_left=None, results_wheelbase_left=None, limits_wheelbase_right_min=None, limits_wheelbase_right_max=None, passfails_wheelbase_right=None, results_wheelbase_right=None, limits_toe_lr_min=None, limits_toe_lr_max=None, passfails_toe_lr=None, results_toe_lr=None, limits_toe_rr_min=None, limits_toe_rr_max=None, passfails_toe_rr=None, results_toe_rr=None, inspection_date=None):  # noqa: E501
        """OSSScan - a model defined in Swagger"""  # noqa: E501
        self._vehicle_number = None
        self._chassis = None
        self._limits_bodyoffset_min = None
        self._limits_bodyoffset_max = None
        self._passfails_bodyoffset = None
        self._results_bodyoffset = None
        self._limits_camber_lf_min = None
        self._limits_camber_lf_max = None
        self._passfails_camber_lf = None
        self._results_camber_lf = None
        self._limits_camber_lr_min = None
        self._limits_camber_lr_max = None
        self._passfails_camber_lr = None
        self._results_camber_lr = None
        self._limits_camber_rf_min = None
        self._limits_camber_rf_max = None
        self._passfails_camber_rf = None
        self._results_camber_rf = None
        self._limits_camber_rr_min = None
        self._limits_camber_rr_max = None
        self._passfails_camber_rr = None
        self._results_camber_rr = None
        self._limits_lf_framerail_min = None
        self._limits_lf_framerail_max = None
        self._passfails_lf_framerail = None
        self._results_lf_framerail = None
        self._limits_lr_framerail_min = None
        self._limits_lr_framerail_max = None
        self._passfails_lr_framerail = None
        self._results_lr_framerail = None
        self._limits_rf_framerail_min = None
        self._limits_rf_framerail_max = None
        self._passfails_rf_framerail = None
        self._results_rf_framerail = None
        self._limits_rh_location_left_min = None
        self._limits_rh_location_left_max = None
        self._passfails_rh_location_left = None
        self._results_rh_location_left = None
        self._limits_rh_location_right_min = None
        self._limits_rh_location_right_max = None
        self._passfails_rh_location_right = None
        self._results_rh_location_right = None
        self._limits_rh_skew_min = None
        self._limits_rh_skew_max = None
        self._passfails_rh_skew = None
        self._results_rh_skew = None
        self._limits_rr_framerail_min = None
        self._limits_rr_framerail_max = None
        self._passfails_rr_framerail = None
        self._results_rr_framerail = None
        self._limits_right_parallel_min = None
        self._limits_right_parallel_max = None
        self._passfails_right_parallel = None
        self._results_right_parallel = None
        self._limits_treadwidth_front_min = None
        self._limits_treadwidth_front_max = None
        self._passfails_treadwidth_front = None
        self._results_treadwidth_front = None
        self._limits_treadwidth_rear_min = None
        self._limits_treadwidth_rear_max = None
        self._passfails_treadwidth_rear = None
        self._results_treadwidth_rear = None
        self._limits_wheelbase_left_min = None
        self._limits_wheelbase_left_max = None
        self._passfails_wheelbase_left = None
        self._results_wheelbase_left = None
        self._limits_wheelbase_right_min = None
        self._limits_wheelbase_right_max = None
        self._passfails_wheelbase_right = None
        self._results_wheelbase_right = None
        self._limits_toe_lr_min = None
        self._limits_toe_lr_max = None
        self._passfails_toe_lr = None
        self._results_toe_lr = None
        self._limits_toe_rr_min = None
        self._limits_toe_rr_max = None
        self._passfails_toe_rr = None
        self._results_toe_rr = None
        self._inspection_date = None
        self.discriminator = None
        if vehicle_number is not None:
            self.vehicle_number = vehicle_number
        if chassis is not None:
            self.chassis = chassis
        if limits_bodyoffset_min is not None:
            self.limits_bodyoffset_min = limits_bodyoffset_min
        if limits_bodyoffset_max is not None:
            self.limits_bodyoffset_max = limits_bodyoffset_max
        if passfails_bodyoffset is not None:
            self.passfails_bodyoffset = passfails_bodyoffset
        if results_bodyoffset is not None:
            self.results_bodyoffset = results_bodyoffset
        if limits_camber_lf_min is not None:
            self.limits_camber_lf_min = limits_camber_lf_min
        if limits_camber_lf_max is not None:
            self.limits_camber_lf_max = limits_camber_lf_max
        if passfails_camber_lf is not None:
            self.passfails_camber_lf = passfails_camber_lf
        if results_camber_lf is not None:
            self.results_camber_lf = results_camber_lf
        if limits_camber_lr_min is not None:
            self.limits_camber_lr_min = limits_camber_lr_min
        if limits_camber_lr_max is not None:
            self.limits_camber_lr_max = limits_camber_lr_max
        if passfails_camber_lr is not None:
            self.passfails_camber_lr = passfails_camber_lr
        if results_camber_lr is not None:
            self.results_camber_lr = results_camber_lr
        if limits_camber_rf_min is not None:
            self.limits_camber_rf_min = limits_camber_rf_min
        if limits_camber_rf_max is not None:
            self.limits_camber_rf_max = limits_camber_rf_max
        if passfails_camber_rf is not None:
            self.passfails_camber_rf = passfails_camber_rf
        if results_camber_rf is not None:
            self.results_camber_rf = results_camber_rf
        if limits_camber_rr_min is not None:
            self.limits_camber_rr_min = limits_camber_rr_min
        if limits_camber_rr_max is not None:
            self.limits_camber_rr_max = limits_camber_rr_max
        if passfails_camber_rr is not None:
            self.passfails_camber_rr = passfails_camber_rr
        if results_camber_rr is not None:
            self.results_camber_rr = results_camber_rr
        if limits_lf_framerail_min is not None:
            self.limits_lf_framerail_min = limits_lf_framerail_min
        if limits_lf_framerail_max is not None:
            self.limits_lf_framerail_max = limits_lf_framerail_max
        if passfails_lf_framerail is not None:
            self.passfails_lf_framerail = passfails_lf_framerail
        if results_lf_framerail is not None:
            self.results_lf_framerail = results_lf_framerail
        if limits_lr_framerail_min is not None:
            self.limits_lr_framerail_min = limits_lr_framerail_min
        if limits_lr_framerail_max is not None:
            self.limits_lr_framerail_max = limits_lr_framerail_max
        if passfails_lr_framerail is not None:
            self.passfails_lr_framerail = passfails_lr_framerail
        if results_lr_framerail is not None:
            self.results_lr_framerail = results_lr_framerail
        if limits_rf_framerail_min is not None:
            self.limits_rf_framerail_min = limits_rf_framerail_min
        if limits_rf_framerail_max is not None:
            self.limits_rf_framerail_max = limits_rf_framerail_max
        if passfails_rf_framerail is not None:
            self.passfails_rf_framerail = passfails_rf_framerail
        if results_rf_framerail is not None:
            self.results_rf_framerail = results_rf_framerail
        if limits_rh_location_left_min is not None:
            self.limits_rh_location_left_min = limits_rh_location_left_min
        if limits_rh_location_left_max is not None:
            self.limits_rh_location_left_max = limits_rh_location_left_max
        if passfails_rh_location_left is not None:
            self.passfails_rh_location_left = passfails_rh_location_left
        if results_rh_location_left is not None:
            self.results_rh_location_left = results_rh_location_left
        if limits_rh_location_right_min is not None:
            self.limits_rh_location_right_min = limits_rh_location_right_min
        if limits_rh_location_right_max is not None:
            self.limits_rh_location_right_max = limits_rh_location_right_max
        if passfails_rh_location_right is not None:
            self.passfails_rh_location_right = passfails_rh_location_right
        if results_rh_location_right is not None:
            self.results_rh_location_right = results_rh_location_right
        if limits_rh_skew_min is not None:
            self.limits_rh_skew_min = limits_rh_skew_min
        if limits_rh_skew_max is not None:
            self.limits_rh_skew_max = limits_rh_skew_max
        if passfails_rh_skew is not None:
            self.passfails_rh_skew = passfails_rh_skew
        if results_rh_skew is not None:
            self.results_rh_skew = results_rh_skew
        if limits_rr_framerail_min is not None:
            self.limits_rr_framerail_min = limits_rr_framerail_min
        if limits_rr_framerail_max is not None:
            self.limits_rr_framerail_max = limits_rr_framerail_max
        if passfails_rr_framerail is not None:
            self.passfails_rr_framerail = passfails_rr_framerail
        if results_rr_framerail is not None:
            self.results_rr_framerail = results_rr_framerail
        if limits_right_parallel_min is not None:
            self.limits_right_parallel_min = limits_right_parallel_min
        if limits_right_parallel_max is not None:
            self.limits_right_parallel_max = limits_right_parallel_max
        if passfails_right_parallel is not None:
            self.passfails_right_parallel = passfails_right_parallel
        if results_right_parallel is not None:
            self.results_right_parallel = results_right_parallel
        if limits_treadwidth_front_min is not None:
            self.limits_treadwidth_front_min = limits_treadwidth_front_min
        if limits_treadwidth_front_max is not None:
            self.limits_treadwidth_front_max = limits_treadwidth_front_max
        if passfails_treadwidth_front is not None:
            self.passfails_treadwidth_front = passfails_treadwidth_front
        if results_treadwidth_front is not None:
            self.results_treadwidth_front = results_treadwidth_front
        if limits_treadwidth_rear_min is not None:
            self.limits_treadwidth_rear_min = limits_treadwidth_rear_min
        if limits_treadwidth_rear_max is not None:
            self.limits_treadwidth_rear_max = limits_treadwidth_rear_max
        if passfails_treadwidth_rear is not None:
            self.passfails_treadwidth_rear = passfails_treadwidth_rear
        if results_treadwidth_rear is not None:
            self.results_treadwidth_rear = results_treadwidth_rear
        if limits_wheelbase_left_min is not None:
            self.limits_wheelbase_left_min = limits_wheelbase_left_min
        if limits_wheelbase_left_max is not None:
            self.limits_wheelbase_left_max = limits_wheelbase_left_max
        if passfails_wheelbase_left is not None:
            self.passfails_wheelbase_left = passfails_wheelbase_left
        if results_wheelbase_left is not None:
            self.results_wheelbase_left = results_wheelbase_left
        if limits_wheelbase_right_min is not None:
            self.limits_wheelbase_right_min = limits_wheelbase_right_min
        if limits_wheelbase_right_max is not None:
            self.limits_wheelbase_right_max = limits_wheelbase_right_max
        if passfails_wheelbase_right is not None:
            self.passfails_wheelbase_right = passfails_wheelbase_right
        if results_wheelbase_right is not None:
            self.results_wheelbase_right = results_wheelbase_right
        if limits_toe_lr_min is not None:
            self.limits_toe_lr_min = limits_toe_lr_min
        if limits_toe_lr_max is not None:
            self.limits_toe_lr_max = limits_toe_lr_max
        if passfails_toe_lr is not None:
            self.passfails_toe_lr = passfails_toe_lr
        if results_toe_lr is not None:
            self.results_toe_lr = results_toe_lr
        if limits_toe_rr_min is not None:
            self.limits_toe_rr_min = limits_toe_rr_min
        if limits_toe_rr_max is not None:
            self.limits_toe_rr_max = limits_toe_rr_max
        if passfails_toe_rr is not None:
            self.passfails_toe_rr = passfails_toe_rr
        if results_toe_rr is not None:
            self.results_toe_rr = results_toe_rr
        if inspection_date is not None:
            self.inspection_date = inspection_date

    @property
    def vehicle_number(self):
        """Gets the vehicle_number of this OSSScan.  # noqa: E501

        Vehicle number  # noqa: E501

        :return: The vehicle_number of this OSSScan.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_number

    @vehicle_number.setter
    def vehicle_number(self, vehicle_number):
        """Sets the vehicle_number of this OSSScan.

        Vehicle number  # noqa: E501

        :param vehicle_number: The vehicle_number of this OSSScan.  # noqa: E501
        :type: str
        """

        self._vehicle_number = vehicle_number

    @property
    def chassis(self):
        """Gets the chassis of this OSSScan.  # noqa: E501

        Chassis  # noqa: E501

        :return: The chassis of this OSSScan.  # noqa: E501
        :rtype: str
        """
        return self._chassis

    @chassis.setter
    def chassis(self, chassis):
        """Sets the chassis of this OSSScan.

        Chassis  # noqa: E501

        :param chassis: The chassis of this OSSScan.  # noqa: E501
        :type: str
        """

        self._chassis = chassis

    @property
    def limits_bodyoffset_min(self):
        """Gets the limits_bodyoffset_min of this OSSScan.  # noqa: E501

        Body offset minimum  # noqa: E501

        :return: The limits_bodyoffset_min of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_bodyoffset_min

    @limits_bodyoffset_min.setter
    def limits_bodyoffset_min(self, limits_bodyoffset_min):
        """Sets the limits_bodyoffset_min of this OSSScan.

        Body offset minimum  # noqa: E501

        :param limits_bodyoffset_min: The limits_bodyoffset_min of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_bodyoffset_min = limits_bodyoffset_min

    @property
    def limits_bodyoffset_max(self):
        """Gets the limits_bodyoffset_max of this OSSScan.  # noqa: E501

        Body offset maximum  # noqa: E501

        :return: The limits_bodyoffset_max of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_bodyoffset_max

    @limits_bodyoffset_max.setter
    def limits_bodyoffset_max(self, limits_bodyoffset_max):
        """Sets the limits_bodyoffset_max of this OSSScan.

        Body offset maximum  # noqa: E501

        :param limits_bodyoffset_max: The limits_bodyoffset_max of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_bodyoffset_max = limits_bodyoffset_max

    @property
    def passfails_bodyoffset(self):
        """Gets the passfails_bodyoffset of this OSSScan.  # noqa: E501

        Body offset pass/fails  # noqa: E501

        :return: The passfails_bodyoffset of this OSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._passfails_bodyoffset

    @passfails_bodyoffset.setter
    def passfails_bodyoffset(self, passfails_bodyoffset):
        """Sets the passfails_bodyoffset of this OSSScan.

        Body offset pass/fails  # noqa: E501

        :param passfails_bodyoffset: The passfails_bodyoffset of this OSSScan.  # noqa: E501
        :type: bool
        """

        self._passfails_bodyoffset = passfails_bodyoffset

    @property
    def results_bodyoffset(self):
        """Gets the results_bodyoffset of this OSSScan.  # noqa: E501

        Results body offset  # noqa: E501

        :return: The results_bodyoffset of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_bodyoffset

    @results_bodyoffset.setter
    def results_bodyoffset(self, results_bodyoffset):
        """Sets the results_bodyoffset of this OSSScan.

        Results body offset  # noqa: E501

        :param results_bodyoffset: The results_bodyoffset of this OSSScan.  # noqa: E501
        :type: float
        """

        self._results_bodyoffset = results_bodyoffset

    @property
    def limits_camber_lf_min(self):
        """Gets the limits_camber_lf_min of this OSSScan.  # noqa: E501

        Left front camber minimum  # noqa: E501

        :return: The limits_camber_lf_min of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_camber_lf_min

    @limits_camber_lf_min.setter
    def limits_camber_lf_min(self, limits_camber_lf_min):
        """Sets the limits_camber_lf_min of this OSSScan.

        Left front camber minimum  # noqa: E501

        :param limits_camber_lf_min: The limits_camber_lf_min of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_camber_lf_min = limits_camber_lf_min

    @property
    def limits_camber_lf_max(self):
        """Gets the limits_camber_lf_max of this OSSScan.  # noqa: E501

        Left front camber maximum  # noqa: E501

        :return: The limits_camber_lf_max of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_camber_lf_max

    @limits_camber_lf_max.setter
    def limits_camber_lf_max(self, limits_camber_lf_max):
        """Sets the limits_camber_lf_max of this OSSScan.

        Left front camber maximum  # noqa: E501

        :param limits_camber_lf_max: The limits_camber_lf_max of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_camber_lf_max = limits_camber_lf_max

    @property
    def passfails_camber_lf(self):
        """Gets the passfails_camber_lf of this OSSScan.  # noqa: E501

        Left front camber pass/fails  # noqa: E501

        :return: The passfails_camber_lf of this OSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._passfails_camber_lf

    @passfails_camber_lf.setter
    def passfails_camber_lf(self, passfails_camber_lf):
        """Sets the passfails_camber_lf of this OSSScan.

        Left front camber pass/fails  # noqa: E501

        :param passfails_camber_lf: The passfails_camber_lf of this OSSScan.  # noqa: E501
        :type: bool
        """

        self._passfails_camber_lf = passfails_camber_lf

    @property
    def results_camber_lf(self):
        """Gets the results_camber_lf of this OSSScan.  # noqa: E501

        Left front camber results  # noqa: E501

        :return: The results_camber_lf of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_camber_lf

    @results_camber_lf.setter
    def results_camber_lf(self, results_camber_lf):
        """Sets the results_camber_lf of this OSSScan.

        Left front camber results  # noqa: E501

        :param results_camber_lf: The results_camber_lf of this OSSScan.  # noqa: E501
        :type: float
        """

        self._results_camber_lf = results_camber_lf

    @property
    def limits_camber_lr_min(self):
        """Gets the limits_camber_lr_min of this OSSScan.  # noqa: E501

        Left rear camber minimum  # noqa: E501

        :return: The limits_camber_lr_min of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_camber_lr_min

    @limits_camber_lr_min.setter
    def limits_camber_lr_min(self, limits_camber_lr_min):
        """Sets the limits_camber_lr_min of this OSSScan.

        Left rear camber minimum  # noqa: E501

        :param limits_camber_lr_min: The limits_camber_lr_min of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_camber_lr_min = limits_camber_lr_min

    @property
    def limits_camber_lr_max(self):
        """Gets the limits_camber_lr_max of this OSSScan.  # noqa: E501

        Left rear camber maximum  # noqa: E501

        :return: The limits_camber_lr_max of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_camber_lr_max

    @limits_camber_lr_max.setter
    def limits_camber_lr_max(self, limits_camber_lr_max):
        """Sets the limits_camber_lr_max of this OSSScan.

        Left rear camber maximum  # noqa: E501

        :param limits_camber_lr_max: The limits_camber_lr_max of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_camber_lr_max = limits_camber_lr_max

    @property
    def passfails_camber_lr(self):
        """Gets the passfails_camber_lr of this OSSScan.  # noqa: E501

        Left rear camber pass/fails  # noqa: E501

        :return: The passfails_camber_lr of this OSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._passfails_camber_lr

    @passfails_camber_lr.setter
    def passfails_camber_lr(self, passfails_camber_lr):
        """Sets the passfails_camber_lr of this OSSScan.

        Left rear camber pass/fails  # noqa: E501

        :param passfails_camber_lr: The passfails_camber_lr of this OSSScan.  # noqa: E501
        :type: bool
        """

        self._passfails_camber_lr = passfails_camber_lr

    @property
    def results_camber_lr(self):
        """Gets the results_camber_lr of this OSSScan.  # noqa: E501

        Left rear camber results  # noqa: E501

        :return: The results_camber_lr of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_camber_lr

    @results_camber_lr.setter
    def results_camber_lr(self, results_camber_lr):
        """Sets the results_camber_lr of this OSSScan.

        Left rear camber results  # noqa: E501

        :param results_camber_lr: The results_camber_lr of this OSSScan.  # noqa: E501
        :type: float
        """

        self._results_camber_lr = results_camber_lr

    @property
    def limits_camber_rf_min(self):
        """Gets the limits_camber_rf_min of this OSSScan.  # noqa: E501

        Right front camber minimum  # noqa: E501

        :return: The limits_camber_rf_min of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_camber_rf_min

    @limits_camber_rf_min.setter
    def limits_camber_rf_min(self, limits_camber_rf_min):
        """Sets the limits_camber_rf_min of this OSSScan.

        Right front camber minimum  # noqa: E501

        :param limits_camber_rf_min: The limits_camber_rf_min of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_camber_rf_min = limits_camber_rf_min

    @property
    def limits_camber_rf_max(self):
        """Gets the limits_camber_rf_max of this OSSScan.  # noqa: E501

        Right front camber maximum  # noqa: E501

        :return: The limits_camber_rf_max of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_camber_rf_max

    @limits_camber_rf_max.setter
    def limits_camber_rf_max(self, limits_camber_rf_max):
        """Sets the limits_camber_rf_max of this OSSScan.

        Right front camber maximum  # noqa: E501

        :param limits_camber_rf_max: The limits_camber_rf_max of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_camber_rf_max = limits_camber_rf_max

    @property
    def passfails_camber_rf(self):
        """Gets the passfails_camber_rf of this OSSScan.  # noqa: E501

        Right front camber pass/fails  # noqa: E501

        :return: The passfails_camber_rf of this OSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._passfails_camber_rf

    @passfails_camber_rf.setter
    def passfails_camber_rf(self, passfails_camber_rf):
        """Sets the passfails_camber_rf of this OSSScan.

        Right front camber pass/fails  # noqa: E501

        :param passfails_camber_rf: The passfails_camber_rf of this OSSScan.  # noqa: E501
        :type: bool
        """

        self._passfails_camber_rf = passfails_camber_rf

    @property
    def results_camber_rf(self):
        """Gets the results_camber_rf of this OSSScan.  # noqa: E501

        Right front camber results  # noqa: E501

        :return: The results_camber_rf of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_camber_rf

    @results_camber_rf.setter
    def results_camber_rf(self, results_camber_rf):
        """Sets the results_camber_rf of this OSSScan.

        Right front camber results  # noqa: E501

        :param results_camber_rf: The results_camber_rf of this OSSScan.  # noqa: E501
        :type: float
        """

        self._results_camber_rf = results_camber_rf

    @property
    def limits_camber_rr_min(self):
        """Gets the limits_camber_rr_min of this OSSScan.  # noqa: E501

        Right rear camber minimum  # noqa: E501

        :return: The limits_camber_rr_min of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_camber_rr_min

    @limits_camber_rr_min.setter
    def limits_camber_rr_min(self, limits_camber_rr_min):
        """Sets the limits_camber_rr_min of this OSSScan.

        Right rear camber minimum  # noqa: E501

        :param limits_camber_rr_min: The limits_camber_rr_min of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_camber_rr_min = limits_camber_rr_min

    @property
    def limits_camber_rr_max(self):
        """Gets the limits_camber_rr_max of this OSSScan.  # noqa: E501

        Right rear camber maximum  # noqa: E501

        :return: The limits_camber_rr_max of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_camber_rr_max

    @limits_camber_rr_max.setter
    def limits_camber_rr_max(self, limits_camber_rr_max):
        """Sets the limits_camber_rr_max of this OSSScan.

        Right rear camber maximum  # noqa: E501

        :param limits_camber_rr_max: The limits_camber_rr_max of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_camber_rr_max = limits_camber_rr_max

    @property
    def passfails_camber_rr(self):
        """Gets the passfails_camber_rr of this OSSScan.  # noqa: E501

        Right rear camber pass/fails  # noqa: E501

        :return: The passfails_camber_rr of this OSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._passfails_camber_rr

    @passfails_camber_rr.setter
    def passfails_camber_rr(self, passfails_camber_rr):
        """Sets the passfails_camber_rr of this OSSScan.

        Right rear camber pass/fails  # noqa: E501

        :param passfails_camber_rr: The passfails_camber_rr of this OSSScan.  # noqa: E501
        :type: bool
        """

        self._passfails_camber_rr = passfails_camber_rr

    @property
    def results_camber_rr(self):
        """Gets the results_camber_rr of this OSSScan.  # noqa: E501

        Right rear camber results  # noqa: E501

        :return: The results_camber_rr of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_camber_rr

    @results_camber_rr.setter
    def results_camber_rr(self, results_camber_rr):
        """Sets the results_camber_rr of this OSSScan.

        Right rear camber results  # noqa: E501

        :param results_camber_rr: The results_camber_rr of this OSSScan.  # noqa: E501
        :type: float
        """

        self._results_camber_rr = results_camber_rr

    @property
    def limits_lf_framerail_min(self):
        """Gets the limits_lf_framerail_min of this OSSScan.  # noqa: E501

        Left front framerail minimum  # noqa: E501

        :return: The limits_lf_framerail_min of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_lf_framerail_min

    @limits_lf_framerail_min.setter
    def limits_lf_framerail_min(self, limits_lf_framerail_min):
        """Sets the limits_lf_framerail_min of this OSSScan.

        Left front framerail minimum  # noqa: E501

        :param limits_lf_framerail_min: The limits_lf_framerail_min of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_lf_framerail_min = limits_lf_framerail_min

    @property
    def limits_lf_framerail_max(self):
        """Gets the limits_lf_framerail_max of this OSSScan.  # noqa: E501

        Left front framework maximum  # noqa: E501

        :return: The limits_lf_framerail_max of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_lf_framerail_max

    @limits_lf_framerail_max.setter
    def limits_lf_framerail_max(self, limits_lf_framerail_max):
        """Sets the limits_lf_framerail_max of this OSSScan.

        Left front framework maximum  # noqa: E501

        :param limits_lf_framerail_max: The limits_lf_framerail_max of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_lf_framerail_max = limits_lf_framerail_max

    @property
    def passfails_lf_framerail(self):
        """Gets the passfails_lf_framerail of this OSSScan.  # noqa: E501

        Left front framerail pass/fails  # noqa: E501

        :return: The passfails_lf_framerail of this OSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._passfails_lf_framerail

    @passfails_lf_framerail.setter
    def passfails_lf_framerail(self, passfails_lf_framerail):
        """Sets the passfails_lf_framerail of this OSSScan.

        Left front framerail pass/fails  # noqa: E501

        :param passfails_lf_framerail: The passfails_lf_framerail of this OSSScan.  # noqa: E501
        :type: bool
        """

        self._passfails_lf_framerail = passfails_lf_framerail

    @property
    def results_lf_framerail(self):
        """Gets the results_lf_framerail of this OSSScan.  # noqa: E501

        Left front framework results  # noqa: E501

        :return: The results_lf_framerail of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_lf_framerail

    @results_lf_framerail.setter
    def results_lf_framerail(self, results_lf_framerail):
        """Sets the results_lf_framerail of this OSSScan.

        Left front framework results  # noqa: E501

        :param results_lf_framerail: The results_lf_framerail of this OSSScan.  # noqa: E501
        :type: float
        """

        self._results_lf_framerail = results_lf_framerail

    @property
    def limits_lr_framerail_min(self):
        """Gets the limits_lr_framerail_min of this OSSScan.  # noqa: E501

        Left rear framerail minimum  # noqa: E501

        :return: The limits_lr_framerail_min of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_lr_framerail_min

    @limits_lr_framerail_min.setter
    def limits_lr_framerail_min(self, limits_lr_framerail_min):
        """Sets the limits_lr_framerail_min of this OSSScan.

        Left rear framerail minimum  # noqa: E501

        :param limits_lr_framerail_min: The limits_lr_framerail_min of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_lr_framerail_min = limits_lr_framerail_min

    @property
    def limits_lr_framerail_max(self):
        """Gets the limits_lr_framerail_max of this OSSScan.  # noqa: E501

        Left rear framerail maximum  # noqa: E501

        :return: The limits_lr_framerail_max of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_lr_framerail_max

    @limits_lr_framerail_max.setter
    def limits_lr_framerail_max(self, limits_lr_framerail_max):
        """Sets the limits_lr_framerail_max of this OSSScan.

        Left rear framerail maximum  # noqa: E501

        :param limits_lr_framerail_max: The limits_lr_framerail_max of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_lr_framerail_max = limits_lr_framerail_max

    @property
    def passfails_lr_framerail(self):
        """Gets the passfails_lr_framerail of this OSSScan.  # noqa: E501

        Left rear framerail pass/fails  # noqa: E501

        :return: The passfails_lr_framerail of this OSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._passfails_lr_framerail

    @passfails_lr_framerail.setter
    def passfails_lr_framerail(self, passfails_lr_framerail):
        """Sets the passfails_lr_framerail of this OSSScan.

        Left rear framerail pass/fails  # noqa: E501

        :param passfails_lr_framerail: The passfails_lr_framerail of this OSSScan.  # noqa: E501
        :type: bool
        """

        self._passfails_lr_framerail = passfails_lr_framerail

    @property
    def results_lr_framerail(self):
        """Gets the results_lr_framerail of this OSSScan.  # noqa: E501

        Left rear framerail results  # noqa: E501

        :return: The results_lr_framerail of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_lr_framerail

    @results_lr_framerail.setter
    def results_lr_framerail(self, results_lr_framerail):
        """Sets the results_lr_framerail of this OSSScan.

        Left rear framerail results  # noqa: E501

        :param results_lr_framerail: The results_lr_framerail of this OSSScan.  # noqa: E501
        :type: float
        """

        self._results_lr_framerail = results_lr_framerail

    @property
    def limits_rf_framerail_min(self):
        """Gets the limits_rf_framerail_min of this OSSScan.  # noqa: E501

        Right front framerail minimum  # noqa: E501

        :return: The limits_rf_framerail_min of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rf_framerail_min

    @limits_rf_framerail_min.setter
    def limits_rf_framerail_min(self, limits_rf_framerail_min):
        """Sets the limits_rf_framerail_min of this OSSScan.

        Right front framerail minimum  # noqa: E501

        :param limits_rf_framerail_min: The limits_rf_framerail_min of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rf_framerail_min = limits_rf_framerail_min

    @property
    def limits_rf_framerail_max(self):
        """Gets the limits_rf_framerail_max of this OSSScan.  # noqa: E501

        Right front framerail maximum  # noqa: E501

        :return: The limits_rf_framerail_max of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rf_framerail_max

    @limits_rf_framerail_max.setter
    def limits_rf_framerail_max(self, limits_rf_framerail_max):
        """Sets the limits_rf_framerail_max of this OSSScan.

        Right front framerail maximum  # noqa: E501

        :param limits_rf_framerail_max: The limits_rf_framerail_max of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rf_framerail_max = limits_rf_framerail_max

    @property
    def passfails_rf_framerail(self):
        """Gets the passfails_rf_framerail of this OSSScan.  # noqa: E501

        Right front framerail pass/fails  # noqa: E501

        :return: The passfails_rf_framerail of this OSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._passfails_rf_framerail

    @passfails_rf_framerail.setter
    def passfails_rf_framerail(self, passfails_rf_framerail):
        """Sets the passfails_rf_framerail of this OSSScan.

        Right front framerail pass/fails  # noqa: E501

        :param passfails_rf_framerail: The passfails_rf_framerail of this OSSScan.  # noqa: E501
        :type: bool
        """

        self._passfails_rf_framerail = passfails_rf_framerail

    @property
    def results_rf_framerail(self):
        """Gets the results_rf_framerail of this OSSScan.  # noqa: E501

        Right front framerail results  # noqa: E501

        :return: The results_rf_framerail of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_rf_framerail

    @results_rf_framerail.setter
    def results_rf_framerail(self, results_rf_framerail):
        """Sets the results_rf_framerail of this OSSScan.

        Right front framerail results  # noqa: E501

        :param results_rf_framerail: The results_rf_framerail of this OSSScan.  # noqa: E501
        :type: float
        """

        self._results_rf_framerail = results_rf_framerail

    @property
    def limits_rh_location_left_min(self):
        """Gets the limits_rh_location_left_min of this OSSScan.  # noqa: E501

        Right hand left minimum  # noqa: E501

        :return: The limits_rh_location_left_min of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rh_location_left_min

    @limits_rh_location_left_min.setter
    def limits_rh_location_left_min(self, limits_rh_location_left_min):
        """Sets the limits_rh_location_left_min of this OSSScan.

        Right hand left minimum  # noqa: E501

        :param limits_rh_location_left_min: The limits_rh_location_left_min of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rh_location_left_min = limits_rh_location_left_min

    @property
    def limits_rh_location_left_max(self):
        """Gets the limits_rh_location_left_max of this OSSScan.  # noqa: E501

        Right hand left maximum  # noqa: E501

        :return: The limits_rh_location_left_max of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rh_location_left_max

    @limits_rh_location_left_max.setter
    def limits_rh_location_left_max(self, limits_rh_location_left_max):
        """Sets the limits_rh_location_left_max of this OSSScan.

        Right hand left maximum  # noqa: E501

        :param limits_rh_location_left_max: The limits_rh_location_left_max of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rh_location_left_max = limits_rh_location_left_max

    @property
    def passfails_rh_location_left(self):
        """Gets the passfails_rh_location_left of this OSSScan.  # noqa: E501

        Right hand left pass/fails  # noqa: E501

        :return: The passfails_rh_location_left of this OSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._passfails_rh_location_left

    @passfails_rh_location_left.setter
    def passfails_rh_location_left(self, passfails_rh_location_left):
        """Sets the passfails_rh_location_left of this OSSScan.

        Right hand left pass/fails  # noqa: E501

        :param passfails_rh_location_left: The passfails_rh_location_left of this OSSScan.  # noqa: E501
        :type: bool
        """

        self._passfails_rh_location_left = passfails_rh_location_left

    @property
    def results_rh_location_left(self):
        """Gets the results_rh_location_left of this OSSScan.  # noqa: E501

        Right hand left results  # noqa: E501

        :return: The results_rh_location_left of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_rh_location_left

    @results_rh_location_left.setter
    def results_rh_location_left(self, results_rh_location_left):
        """Sets the results_rh_location_left of this OSSScan.

        Right hand left results  # noqa: E501

        :param results_rh_location_left: The results_rh_location_left of this OSSScan.  # noqa: E501
        :type: float
        """

        self._results_rh_location_left = results_rh_location_left

    @property
    def limits_rh_location_right_min(self):
        """Gets the limits_rh_location_right_min of this OSSScan.  # noqa: E501

        Right hand right min  # noqa: E501

        :return: The limits_rh_location_right_min of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rh_location_right_min

    @limits_rh_location_right_min.setter
    def limits_rh_location_right_min(self, limits_rh_location_right_min):
        """Sets the limits_rh_location_right_min of this OSSScan.

        Right hand right min  # noqa: E501

        :param limits_rh_location_right_min: The limits_rh_location_right_min of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rh_location_right_min = limits_rh_location_right_min

    @property
    def limits_rh_location_right_max(self):
        """Gets the limits_rh_location_right_max of this OSSScan.  # noqa: E501

        Right hand right max  # noqa: E501

        :return: The limits_rh_location_right_max of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rh_location_right_max

    @limits_rh_location_right_max.setter
    def limits_rh_location_right_max(self, limits_rh_location_right_max):
        """Sets the limits_rh_location_right_max of this OSSScan.

        Right hand right max  # noqa: E501

        :param limits_rh_location_right_max: The limits_rh_location_right_max of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rh_location_right_max = limits_rh_location_right_max

    @property
    def passfails_rh_location_right(self):
        """Gets the passfails_rh_location_right of this OSSScan.  # noqa: E501

        Right hand right pass/fails  # noqa: E501

        :return: The passfails_rh_location_right of this OSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._passfails_rh_location_right

    @passfails_rh_location_right.setter
    def passfails_rh_location_right(self, passfails_rh_location_right):
        """Sets the passfails_rh_location_right of this OSSScan.

        Right hand right pass/fails  # noqa: E501

        :param passfails_rh_location_right: The passfails_rh_location_right of this OSSScan.  # noqa: E501
        :type: bool
        """

        self._passfails_rh_location_right = passfails_rh_location_right

    @property
    def results_rh_location_right(self):
        """Gets the results_rh_location_right of this OSSScan.  # noqa: E501

        Right hand right results  # noqa: E501

        :return: The results_rh_location_right of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_rh_location_right

    @results_rh_location_right.setter
    def results_rh_location_right(self, results_rh_location_right):
        """Sets the results_rh_location_right of this OSSScan.

        Right hand right results  # noqa: E501

        :param results_rh_location_right: The results_rh_location_right of this OSSScan.  # noqa: E501
        :type: float
        """

        self._results_rh_location_right = results_rh_location_right

    @property
    def limits_rh_skew_min(self):
        """Gets the limits_rh_skew_min of this OSSScan.  # noqa: E501

        Right right skew minimum  # noqa: E501

        :return: The limits_rh_skew_min of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rh_skew_min

    @limits_rh_skew_min.setter
    def limits_rh_skew_min(self, limits_rh_skew_min):
        """Sets the limits_rh_skew_min of this OSSScan.

        Right right skew minimum  # noqa: E501

        :param limits_rh_skew_min: The limits_rh_skew_min of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rh_skew_min = limits_rh_skew_min

    @property
    def limits_rh_skew_max(self):
        """Gets the limits_rh_skew_max of this OSSScan.  # noqa: E501

        Right hand skew maximum  # noqa: E501

        :return: The limits_rh_skew_max of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rh_skew_max

    @limits_rh_skew_max.setter
    def limits_rh_skew_max(self, limits_rh_skew_max):
        """Sets the limits_rh_skew_max of this OSSScan.

        Right hand skew maximum  # noqa: E501

        :param limits_rh_skew_max: The limits_rh_skew_max of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rh_skew_max = limits_rh_skew_max

    @property
    def passfails_rh_skew(self):
        """Gets the passfails_rh_skew of this OSSScan.  # noqa: E501

        Right hand skew pass/fails  # noqa: E501

        :return: The passfails_rh_skew of this OSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._passfails_rh_skew

    @passfails_rh_skew.setter
    def passfails_rh_skew(self, passfails_rh_skew):
        """Sets the passfails_rh_skew of this OSSScan.

        Right hand skew pass/fails  # noqa: E501

        :param passfails_rh_skew: The passfails_rh_skew of this OSSScan.  # noqa: E501
        :type: bool
        """

        self._passfails_rh_skew = passfails_rh_skew

    @property
    def results_rh_skew(self):
        """Gets the results_rh_skew of this OSSScan.  # noqa: E501

        Right hand skew results  # noqa: E501

        :return: The results_rh_skew of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_rh_skew

    @results_rh_skew.setter
    def results_rh_skew(self, results_rh_skew):
        """Sets the results_rh_skew of this OSSScan.

        Right hand skew results  # noqa: E501

        :param results_rh_skew: The results_rh_skew of this OSSScan.  # noqa: E501
        :type: float
        """

        self._results_rh_skew = results_rh_skew

    @property
    def limits_rr_framerail_min(self):
        """Gets the limits_rr_framerail_min of this OSSScan.  # noqa: E501

        Right rear framerail minimum  # noqa: E501

        :return: The limits_rr_framerail_min of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rr_framerail_min

    @limits_rr_framerail_min.setter
    def limits_rr_framerail_min(self, limits_rr_framerail_min):
        """Sets the limits_rr_framerail_min of this OSSScan.

        Right rear framerail minimum  # noqa: E501

        :param limits_rr_framerail_min: The limits_rr_framerail_min of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rr_framerail_min = limits_rr_framerail_min

    @property
    def limits_rr_framerail_max(self):
        """Gets the limits_rr_framerail_max of this OSSScan.  # noqa: E501

        Right rear framerail maximum  # noqa: E501

        :return: The limits_rr_framerail_max of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_rr_framerail_max

    @limits_rr_framerail_max.setter
    def limits_rr_framerail_max(self, limits_rr_framerail_max):
        """Sets the limits_rr_framerail_max of this OSSScan.

        Right rear framerail maximum  # noqa: E501

        :param limits_rr_framerail_max: The limits_rr_framerail_max of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_rr_framerail_max = limits_rr_framerail_max

    @property
    def passfails_rr_framerail(self):
        """Gets the passfails_rr_framerail of this OSSScan.  # noqa: E501

        Right rear framerail pass/fails  # noqa: E501

        :return: The passfails_rr_framerail of this OSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._passfails_rr_framerail

    @passfails_rr_framerail.setter
    def passfails_rr_framerail(self, passfails_rr_framerail):
        """Sets the passfails_rr_framerail of this OSSScan.

        Right rear framerail pass/fails  # noqa: E501

        :param passfails_rr_framerail: The passfails_rr_framerail of this OSSScan.  # noqa: E501
        :type: bool
        """

        self._passfails_rr_framerail = passfails_rr_framerail

    @property
    def results_rr_framerail(self):
        """Gets the results_rr_framerail of this OSSScan.  # noqa: E501

        Right rear framerail results  # noqa: E501

        :return: The results_rr_framerail of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_rr_framerail

    @results_rr_framerail.setter
    def results_rr_framerail(self, results_rr_framerail):
        """Sets the results_rr_framerail of this OSSScan.

        Right rear framerail results  # noqa: E501

        :param results_rr_framerail: The results_rr_framerail of this OSSScan.  # noqa: E501
        :type: float
        """

        self._results_rr_framerail = results_rr_framerail

    @property
    def limits_right_parallel_min(self):
        """Gets the limits_right_parallel_min of this OSSScan.  # noqa: E501

        Right parallel minimum  # noqa: E501

        :return: The limits_right_parallel_min of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_right_parallel_min

    @limits_right_parallel_min.setter
    def limits_right_parallel_min(self, limits_right_parallel_min):
        """Sets the limits_right_parallel_min of this OSSScan.

        Right parallel minimum  # noqa: E501

        :param limits_right_parallel_min: The limits_right_parallel_min of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_right_parallel_min = limits_right_parallel_min

    @property
    def limits_right_parallel_max(self):
        """Gets the limits_right_parallel_max of this OSSScan.  # noqa: E501

        Right parallel maximum  # noqa: E501

        :return: The limits_right_parallel_max of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_right_parallel_max

    @limits_right_parallel_max.setter
    def limits_right_parallel_max(self, limits_right_parallel_max):
        """Sets the limits_right_parallel_max of this OSSScan.

        Right parallel maximum  # noqa: E501

        :param limits_right_parallel_max: The limits_right_parallel_max of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_right_parallel_max = limits_right_parallel_max

    @property
    def passfails_right_parallel(self):
        """Gets the passfails_right_parallel of this OSSScan.  # noqa: E501

        Right parallel pass/fails  # noqa: E501

        :return: The passfails_right_parallel of this OSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._passfails_right_parallel

    @passfails_right_parallel.setter
    def passfails_right_parallel(self, passfails_right_parallel):
        """Sets the passfails_right_parallel of this OSSScan.

        Right parallel pass/fails  # noqa: E501

        :param passfails_right_parallel: The passfails_right_parallel of this OSSScan.  # noqa: E501
        :type: bool
        """

        self._passfails_right_parallel = passfails_right_parallel

    @property
    def results_right_parallel(self):
        """Gets the results_right_parallel of this OSSScan.  # noqa: E501

        Right parallel results  # noqa: E501

        :return: The results_right_parallel of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_right_parallel

    @results_right_parallel.setter
    def results_right_parallel(self, results_right_parallel):
        """Sets the results_right_parallel of this OSSScan.

        Right parallel results  # noqa: E501

        :param results_right_parallel: The results_right_parallel of this OSSScan.  # noqa: E501
        :type: float
        """

        self._results_right_parallel = results_right_parallel

    @property
    def limits_treadwidth_front_min(self):
        """Gets the limits_treadwidth_front_min of this OSSScan.  # noqa: E501

        Front treadwidth minimum  # noqa: E501

        :return: The limits_treadwidth_front_min of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_treadwidth_front_min

    @limits_treadwidth_front_min.setter
    def limits_treadwidth_front_min(self, limits_treadwidth_front_min):
        """Sets the limits_treadwidth_front_min of this OSSScan.

        Front treadwidth minimum  # noqa: E501

        :param limits_treadwidth_front_min: The limits_treadwidth_front_min of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_treadwidth_front_min = limits_treadwidth_front_min

    @property
    def limits_treadwidth_front_max(self):
        """Gets the limits_treadwidth_front_max of this OSSScan.  # noqa: E501

        Front treadwidth maximum  # noqa: E501

        :return: The limits_treadwidth_front_max of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_treadwidth_front_max

    @limits_treadwidth_front_max.setter
    def limits_treadwidth_front_max(self, limits_treadwidth_front_max):
        """Sets the limits_treadwidth_front_max of this OSSScan.

        Front treadwidth maximum  # noqa: E501

        :param limits_treadwidth_front_max: The limits_treadwidth_front_max of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_treadwidth_front_max = limits_treadwidth_front_max

    @property
    def passfails_treadwidth_front(self):
        """Gets the passfails_treadwidth_front of this OSSScan.  # noqa: E501

        Front treadwidth pass/fails  # noqa: E501

        :return: The passfails_treadwidth_front of this OSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._passfails_treadwidth_front

    @passfails_treadwidth_front.setter
    def passfails_treadwidth_front(self, passfails_treadwidth_front):
        """Sets the passfails_treadwidth_front of this OSSScan.

        Front treadwidth pass/fails  # noqa: E501

        :param passfails_treadwidth_front: The passfails_treadwidth_front of this OSSScan.  # noqa: E501
        :type: bool
        """

        self._passfails_treadwidth_front = passfails_treadwidth_front

    @property
    def results_treadwidth_front(self):
        """Gets the results_treadwidth_front of this OSSScan.  # noqa: E501

        Front treadwidth results  # noqa: E501

        :return: The results_treadwidth_front of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_treadwidth_front

    @results_treadwidth_front.setter
    def results_treadwidth_front(self, results_treadwidth_front):
        """Sets the results_treadwidth_front of this OSSScan.

        Front treadwidth results  # noqa: E501

        :param results_treadwidth_front: The results_treadwidth_front of this OSSScan.  # noqa: E501
        :type: float
        """

        self._results_treadwidth_front = results_treadwidth_front

    @property
    def limits_treadwidth_rear_min(self):
        """Gets the limits_treadwidth_rear_min of this OSSScan.  # noqa: E501

        Rear treadwidth minimum  # noqa: E501

        :return: The limits_treadwidth_rear_min of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_treadwidth_rear_min

    @limits_treadwidth_rear_min.setter
    def limits_treadwidth_rear_min(self, limits_treadwidth_rear_min):
        """Sets the limits_treadwidth_rear_min of this OSSScan.

        Rear treadwidth minimum  # noqa: E501

        :param limits_treadwidth_rear_min: The limits_treadwidth_rear_min of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_treadwidth_rear_min = limits_treadwidth_rear_min

    @property
    def limits_treadwidth_rear_max(self):
        """Gets the limits_treadwidth_rear_max of this OSSScan.  # noqa: E501

        Rear treadwidth maximum  # noqa: E501

        :return: The limits_treadwidth_rear_max of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_treadwidth_rear_max

    @limits_treadwidth_rear_max.setter
    def limits_treadwidth_rear_max(self, limits_treadwidth_rear_max):
        """Sets the limits_treadwidth_rear_max of this OSSScan.

        Rear treadwidth maximum  # noqa: E501

        :param limits_treadwidth_rear_max: The limits_treadwidth_rear_max of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_treadwidth_rear_max = limits_treadwidth_rear_max

    @property
    def passfails_treadwidth_rear(self):
        """Gets the passfails_treadwidth_rear of this OSSScan.  # noqa: E501

        Rear treadwidth pass/fails  # noqa: E501

        :return: The passfails_treadwidth_rear of this OSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._passfails_treadwidth_rear

    @passfails_treadwidth_rear.setter
    def passfails_treadwidth_rear(self, passfails_treadwidth_rear):
        """Sets the passfails_treadwidth_rear of this OSSScan.

        Rear treadwidth pass/fails  # noqa: E501

        :param passfails_treadwidth_rear: The passfails_treadwidth_rear of this OSSScan.  # noqa: E501
        :type: bool
        """

        self._passfails_treadwidth_rear = passfails_treadwidth_rear

    @property
    def results_treadwidth_rear(self):
        """Gets the results_treadwidth_rear of this OSSScan.  # noqa: E501

        Rear treadwidth results  # noqa: E501

        :return: The results_treadwidth_rear of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_treadwidth_rear

    @results_treadwidth_rear.setter
    def results_treadwidth_rear(self, results_treadwidth_rear):
        """Sets the results_treadwidth_rear of this OSSScan.

        Rear treadwidth results  # noqa: E501

        :param results_treadwidth_rear: The results_treadwidth_rear of this OSSScan.  # noqa: E501
        :type: float
        """

        self._results_treadwidth_rear = results_treadwidth_rear

    @property
    def limits_wheelbase_left_min(self):
        """Gets the limits_wheelbase_left_min of this OSSScan.  # noqa: E501

        Left wheelbase minimum  # noqa: E501

        :return: The limits_wheelbase_left_min of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_wheelbase_left_min

    @limits_wheelbase_left_min.setter
    def limits_wheelbase_left_min(self, limits_wheelbase_left_min):
        """Sets the limits_wheelbase_left_min of this OSSScan.

        Left wheelbase minimum  # noqa: E501

        :param limits_wheelbase_left_min: The limits_wheelbase_left_min of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_wheelbase_left_min = limits_wheelbase_left_min

    @property
    def limits_wheelbase_left_max(self):
        """Gets the limits_wheelbase_left_max of this OSSScan.  # noqa: E501

        Left wheelbase maximum  # noqa: E501

        :return: The limits_wheelbase_left_max of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_wheelbase_left_max

    @limits_wheelbase_left_max.setter
    def limits_wheelbase_left_max(self, limits_wheelbase_left_max):
        """Sets the limits_wheelbase_left_max of this OSSScan.

        Left wheelbase maximum  # noqa: E501

        :param limits_wheelbase_left_max: The limits_wheelbase_left_max of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_wheelbase_left_max = limits_wheelbase_left_max

    @property
    def passfails_wheelbase_left(self):
        """Gets the passfails_wheelbase_left of this OSSScan.  # noqa: E501

        Left wheelbase pass/fails  # noqa: E501

        :return: The passfails_wheelbase_left of this OSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._passfails_wheelbase_left

    @passfails_wheelbase_left.setter
    def passfails_wheelbase_left(self, passfails_wheelbase_left):
        """Sets the passfails_wheelbase_left of this OSSScan.

        Left wheelbase pass/fails  # noqa: E501

        :param passfails_wheelbase_left: The passfails_wheelbase_left of this OSSScan.  # noqa: E501
        :type: bool
        """

        self._passfails_wheelbase_left = passfails_wheelbase_left

    @property
    def results_wheelbase_left(self):
        """Gets the results_wheelbase_left of this OSSScan.  # noqa: E501

        Left wheelbase results  # noqa: E501

        :return: The results_wheelbase_left of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_wheelbase_left

    @results_wheelbase_left.setter
    def results_wheelbase_left(self, results_wheelbase_left):
        """Sets the results_wheelbase_left of this OSSScan.

        Left wheelbase results  # noqa: E501

        :param results_wheelbase_left: The results_wheelbase_left of this OSSScan.  # noqa: E501
        :type: float
        """

        self._results_wheelbase_left = results_wheelbase_left

    @property
    def limits_wheelbase_right_min(self):
        """Gets the limits_wheelbase_right_min of this OSSScan.  # noqa: E501

        Right wheelbase minimum  # noqa: E501

        :return: The limits_wheelbase_right_min of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_wheelbase_right_min

    @limits_wheelbase_right_min.setter
    def limits_wheelbase_right_min(self, limits_wheelbase_right_min):
        """Sets the limits_wheelbase_right_min of this OSSScan.

        Right wheelbase minimum  # noqa: E501

        :param limits_wheelbase_right_min: The limits_wheelbase_right_min of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_wheelbase_right_min = limits_wheelbase_right_min

    @property
    def limits_wheelbase_right_max(self):
        """Gets the limits_wheelbase_right_max of this OSSScan.  # noqa: E501

        Right wheelbase maximum  # noqa: E501

        :return: The limits_wheelbase_right_max of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_wheelbase_right_max

    @limits_wheelbase_right_max.setter
    def limits_wheelbase_right_max(self, limits_wheelbase_right_max):
        """Sets the limits_wheelbase_right_max of this OSSScan.

        Right wheelbase maximum  # noqa: E501

        :param limits_wheelbase_right_max: The limits_wheelbase_right_max of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_wheelbase_right_max = limits_wheelbase_right_max

    @property
    def passfails_wheelbase_right(self):
        """Gets the passfails_wheelbase_right of this OSSScan.  # noqa: E501

        Right wheelbase pass/fails  # noqa: E501

        :return: The passfails_wheelbase_right of this OSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._passfails_wheelbase_right

    @passfails_wheelbase_right.setter
    def passfails_wheelbase_right(self, passfails_wheelbase_right):
        """Sets the passfails_wheelbase_right of this OSSScan.

        Right wheelbase pass/fails  # noqa: E501

        :param passfails_wheelbase_right: The passfails_wheelbase_right of this OSSScan.  # noqa: E501
        :type: bool
        """

        self._passfails_wheelbase_right = passfails_wheelbase_right

    @property
    def results_wheelbase_right(self):
        """Gets the results_wheelbase_right of this OSSScan.  # noqa: E501

        Right wheelbase results  # noqa: E501

        :return: The results_wheelbase_right of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_wheelbase_right

    @results_wheelbase_right.setter
    def results_wheelbase_right(self, results_wheelbase_right):
        """Sets the results_wheelbase_right of this OSSScan.

        Right wheelbase results  # noqa: E501

        :param results_wheelbase_right: The results_wheelbase_right of this OSSScan.  # noqa: E501
        :type: float
        """

        self._results_wheelbase_right = results_wheelbase_right

    @property
    def limits_toe_lr_min(self):
        """Gets the limits_toe_lr_min of this OSSScan.  # noqa: E501

        Left rear toe minimum  # noqa: E501

        :return: The limits_toe_lr_min of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_toe_lr_min

    @limits_toe_lr_min.setter
    def limits_toe_lr_min(self, limits_toe_lr_min):
        """Sets the limits_toe_lr_min of this OSSScan.

        Left rear toe minimum  # noqa: E501

        :param limits_toe_lr_min: The limits_toe_lr_min of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_toe_lr_min = limits_toe_lr_min

    @property
    def limits_toe_lr_max(self):
        """Gets the limits_toe_lr_max of this OSSScan.  # noqa: E501

        Left rear toe maximum  # noqa: E501

        :return: The limits_toe_lr_max of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_toe_lr_max

    @limits_toe_lr_max.setter
    def limits_toe_lr_max(self, limits_toe_lr_max):
        """Sets the limits_toe_lr_max of this OSSScan.

        Left rear toe maximum  # noqa: E501

        :param limits_toe_lr_max: The limits_toe_lr_max of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_toe_lr_max = limits_toe_lr_max

    @property
    def passfails_toe_lr(self):
        """Gets the passfails_toe_lr of this OSSScan.  # noqa: E501

        Left rear toe pass/fails  # noqa: E501

        :return: The passfails_toe_lr of this OSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._passfails_toe_lr

    @passfails_toe_lr.setter
    def passfails_toe_lr(self, passfails_toe_lr):
        """Sets the passfails_toe_lr of this OSSScan.

        Left rear toe pass/fails  # noqa: E501

        :param passfails_toe_lr: The passfails_toe_lr of this OSSScan.  # noqa: E501
        :type: bool
        """

        self._passfails_toe_lr = passfails_toe_lr

    @property
    def results_toe_lr(self):
        """Gets the results_toe_lr of this OSSScan.  # noqa: E501

        Left rear toe results  # noqa: E501

        :return: The results_toe_lr of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_toe_lr

    @results_toe_lr.setter
    def results_toe_lr(self, results_toe_lr):
        """Sets the results_toe_lr of this OSSScan.

        Left rear toe results  # noqa: E501

        :param results_toe_lr: The results_toe_lr of this OSSScan.  # noqa: E501
        :type: float
        """

        self._results_toe_lr = results_toe_lr

    @property
    def limits_toe_rr_min(self):
        """Gets the limits_toe_rr_min of this OSSScan.  # noqa: E501

        Right rear toe minimum  # noqa: E501

        :return: The limits_toe_rr_min of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_toe_rr_min

    @limits_toe_rr_min.setter
    def limits_toe_rr_min(self, limits_toe_rr_min):
        """Sets the limits_toe_rr_min of this OSSScan.

        Right rear toe minimum  # noqa: E501

        :param limits_toe_rr_min: The limits_toe_rr_min of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_toe_rr_min = limits_toe_rr_min

    @property
    def limits_toe_rr_max(self):
        """Gets the limits_toe_rr_max of this OSSScan.  # noqa: E501

        Right rear toe maximum  # noqa: E501

        :return: The limits_toe_rr_max of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._limits_toe_rr_max

    @limits_toe_rr_max.setter
    def limits_toe_rr_max(self, limits_toe_rr_max):
        """Sets the limits_toe_rr_max of this OSSScan.

        Right rear toe maximum  # noqa: E501

        :param limits_toe_rr_max: The limits_toe_rr_max of this OSSScan.  # noqa: E501
        :type: float
        """

        self._limits_toe_rr_max = limits_toe_rr_max

    @property
    def passfails_toe_rr(self):
        """Gets the passfails_toe_rr of this OSSScan.  # noqa: E501

        Right rear pass/fails  # noqa: E501

        :return: The passfails_toe_rr of this OSSScan.  # noqa: E501
        :rtype: bool
        """
        return self._passfails_toe_rr

    @passfails_toe_rr.setter
    def passfails_toe_rr(self, passfails_toe_rr):
        """Sets the passfails_toe_rr of this OSSScan.

        Right rear pass/fails  # noqa: E501

        :param passfails_toe_rr: The passfails_toe_rr of this OSSScan.  # noqa: E501
        :type: bool
        """

        self._passfails_toe_rr = passfails_toe_rr

    @property
    def results_toe_rr(self):
        """Gets the results_toe_rr of this OSSScan.  # noqa: E501

        Right rear toe results  # noqa: E501

        :return: The results_toe_rr of this OSSScan.  # noqa: E501
        :rtype: float
        """
        return self._results_toe_rr

    @results_toe_rr.setter
    def results_toe_rr(self, results_toe_rr):
        """Sets the results_toe_rr of this OSSScan.

        Right rear toe results  # noqa: E501

        :param results_toe_rr: The results_toe_rr of this OSSScan.  # noqa: E501
        :type: float
        """

        self._results_toe_rr = results_toe_rr

    @property
    def inspection_date(self):
        """Gets the inspection_date of this OSSScan.  # noqa: E501

        Inspection date  # noqa: E501

        :return: The inspection_date of this OSSScan.  # noqa: E501
        :rtype: datetime
        """
        return self._inspection_date

    @inspection_date.setter
    def inspection_date(self, inspection_date):
        """Sets the inspection_date of this OSSScan.

        Inspection date  # noqa: E501

        :param inspection_date: The inspection_date of this OSSScan.  # noqa: E501
        :type: datetime
        """

        self._inspection_date = inspection_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OSSScan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OSSScan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
