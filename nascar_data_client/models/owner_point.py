# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class OwnerPoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owner': 'str',
        'vehicle_number': 'str',
        'position': 'int',
        'points': 'int',
        'playoff_points': 'int',
        'playoff_rank': 'int',
        'delta_leader': 'int',
        'delta_next': 'int',
        'starts': 'int',
        'poles': 'int',
        'wins': 'int',
        'stage_1_wins': 'int',
        'stage_2_wins': 'int',
        'stage_3_wins': 'int',
        'stage_points': 'int',
        'playoff_race_wins': 'int',
        'playoff_stage_wins': 'int',
        'points_earned_this_race': 'int',
        'playoff_points_earned_this_race': 'int',
        'stage_points_earned_this_race': 'int',
        'top5': 'int',
        'top10': 'int',
        'laps_led': 'int',
        'dnf': 'int',
        'made_playoffs': 'bool',
        'in_playoffs': 'bool',
        'highest_round': 'int'
    }

    attribute_map = {
        'owner': 'owner',
        'vehicle_number': 'vehicle_number',
        'position': 'position',
        'points': 'points',
        'playoff_points': 'playoff_points',
        'playoff_rank': 'playoff_rank',
        'delta_leader': 'delta_leader',
        'delta_next': 'delta_next',
        'starts': 'starts',
        'poles': 'poles',
        'wins': 'wins',
        'stage_1_wins': 'stage_1_wins',
        'stage_2_wins': 'stage_2_wins',
        'stage_3_wins': 'stage_3_wins',
        'stage_points': 'stage_points',
        'playoff_race_wins': 'playoff_race_wins',
        'playoff_stage_wins': 'playoff_stage_wins',
        'points_earned_this_race': 'points_earned_this_race',
        'playoff_points_earned_this_race': 'playoff_points_earned_this_race',
        'stage_points_earned_this_race': 'stage_points_earned_this_race',
        'top5': 'top5',
        'top10': 'top10',
        'laps_led': 'laps_led',
        'dnf': 'dnf',
        'made_playoffs': 'made_playoffs',
        'in_playoffs': 'in_playoffs',
        'highest_round': 'highest_round'
    }

    def __init__(self, owner=None, vehicle_number=None, position=None, points=None, playoff_points=None, playoff_rank=None, delta_leader=None, delta_next=None, starts=None, poles=None, wins=None, stage_1_wins=None, stage_2_wins=None, stage_3_wins=None, stage_points=None, playoff_race_wins=None, playoff_stage_wins=None, points_earned_this_race=None, playoff_points_earned_this_race=None, stage_points_earned_this_race=None, top5=None, top10=None, laps_led=None, dnf=None, made_playoffs=None, in_playoffs=None, highest_round=None):  # noqa: E501
        """OwnerPoint - a model defined in Swagger"""  # noqa: E501
        self._owner = None
        self._vehicle_number = None
        self._position = None
        self._points = None
        self._playoff_points = None
        self._playoff_rank = None
        self._delta_leader = None
        self._delta_next = None
        self._starts = None
        self._poles = None
        self._wins = None
        self._stage_1_wins = None
        self._stage_2_wins = None
        self._stage_3_wins = None
        self._stage_points = None
        self._playoff_race_wins = None
        self._playoff_stage_wins = None
        self._points_earned_this_race = None
        self._playoff_points_earned_this_race = None
        self._stage_points_earned_this_race = None
        self._top5 = None
        self._top10 = None
        self._laps_led = None
        self._dnf = None
        self._made_playoffs = None
        self._in_playoffs = None
        self._highest_round = None
        self.discriminator = None
        if owner is not None:
            self.owner = owner
        if vehicle_number is not None:
            self.vehicle_number = vehicle_number
        if position is not None:
            self.position = position
        if points is not None:
            self.points = points
        if playoff_points is not None:
            self.playoff_points = playoff_points
        if playoff_rank is not None:
            self.playoff_rank = playoff_rank
        if delta_leader is not None:
            self.delta_leader = delta_leader
        if delta_next is not None:
            self.delta_next = delta_next
        if starts is not None:
            self.starts = starts
        if poles is not None:
            self.poles = poles
        if wins is not None:
            self.wins = wins
        if stage_1_wins is not None:
            self.stage_1_wins = stage_1_wins
        if stage_2_wins is not None:
            self.stage_2_wins = stage_2_wins
        if stage_3_wins is not None:
            self.stage_3_wins = stage_3_wins
        if stage_points is not None:
            self.stage_points = stage_points
        if playoff_race_wins is not None:
            self.playoff_race_wins = playoff_race_wins
        if playoff_stage_wins is not None:
            self.playoff_stage_wins = playoff_stage_wins
        if points_earned_this_race is not None:
            self.points_earned_this_race = points_earned_this_race
        if playoff_points_earned_this_race is not None:
            self.playoff_points_earned_this_race = playoff_points_earned_this_race
        if stage_points_earned_this_race is not None:
            self.stage_points_earned_this_race = stage_points_earned_this_race
        if top5 is not None:
            self.top5 = top5
        if top10 is not None:
            self.top10 = top10
        if laps_led is not None:
            self.laps_led = laps_led
        if dnf is not None:
            self.dnf = dnf
        if made_playoffs is not None:
            self.made_playoffs = made_playoffs
        if in_playoffs is not None:
            self.in_playoffs = in_playoffs
        if highest_round is not None:
            self.highest_round = highest_round

    @property
    def owner(self):
        """Gets the owner of this OwnerPoint.  # noqa: E501

        Owner name  # noqa: E501

        :return: The owner of this OwnerPoint.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this OwnerPoint.

        Owner name  # noqa: E501

        :param owner: The owner of this OwnerPoint.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def vehicle_number(self):
        """Gets the vehicle_number of this OwnerPoint.  # noqa: E501

        Vehicle number  # noqa: E501

        :return: The vehicle_number of this OwnerPoint.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_number

    @vehicle_number.setter
    def vehicle_number(self, vehicle_number):
        """Sets the vehicle_number of this OwnerPoint.

        Vehicle number  # noqa: E501

        :param vehicle_number: The vehicle_number of this OwnerPoint.  # noqa: E501
        :type: str
        """

        self._vehicle_number = vehicle_number

    @property
    def position(self):
        """Gets the position of this OwnerPoint.  # noqa: E501

        Points position  # noqa: E501

        :return: The position of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this OwnerPoint.

        Points position  # noqa: E501

        :param position: The position of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def points(self):
        """Gets the points of this OwnerPoint.  # noqa: E501

        Total points  # noqa: E501

        :return: The points of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this OwnerPoint.

        Total points  # noqa: E501

        :param points: The points of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._points = points

    @property
    def playoff_points(self):
        """Gets the playoff_points of this OwnerPoint.  # noqa: E501

        Total playoff points  # noqa: E501

        :return: The playoff_points of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._playoff_points

    @playoff_points.setter
    def playoff_points(self, playoff_points):
        """Sets the playoff_points of this OwnerPoint.

        Total playoff points  # noqa: E501

        :param playoff_points: The playoff_points of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._playoff_points = playoff_points

    @property
    def playoff_rank(self):
        """Gets the playoff_rank of this OwnerPoint.  # noqa: E501

        Current playoff rank  # noqa: E501

        :return: The playoff_rank of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._playoff_rank

    @playoff_rank.setter
    def playoff_rank(self, playoff_rank):
        """Sets the playoff_rank of this OwnerPoint.

        Current playoff rank  # noqa: E501

        :param playoff_rank: The playoff_rank of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._playoff_rank = playoff_rank

    @property
    def delta_leader(self):
        """Gets the delta_leader of this OwnerPoint.  # noqa: E501

        Number of points behind the leader  # noqa: E501

        :return: The delta_leader of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._delta_leader

    @delta_leader.setter
    def delta_leader(self, delta_leader):
        """Sets the delta_leader of this OwnerPoint.

        Number of points behind the leader  # noqa: E501

        :param delta_leader: The delta_leader of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._delta_leader = delta_leader

    @property
    def delta_next(self):
        """Gets the delta_next of this OwnerPoint.  # noqa: E501

        Number of points behind the next position  # noqa: E501

        :return: The delta_next of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._delta_next

    @delta_next.setter
    def delta_next(self, delta_next):
        """Sets the delta_next of this OwnerPoint.

        Number of points behind the next position  # noqa: E501

        :param delta_next: The delta_next of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._delta_next = delta_next

    @property
    def starts(self):
        """Gets the starts of this OwnerPoint.  # noqa: E501

        Number of starts this season  # noqa: E501

        :return: The starts of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._starts

    @starts.setter
    def starts(self, starts):
        """Sets the starts of this OwnerPoint.

        Number of starts this season  # noqa: E501

        :param starts: The starts of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._starts = starts

    @property
    def poles(self):
        """Gets the poles of this OwnerPoint.  # noqa: E501

        Number of times the pole position was earned  # noqa: E501

        :return: The poles of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._poles

    @poles.setter
    def poles(self, poles):
        """Sets the poles of this OwnerPoint.

        Number of times the pole position was earned  # noqa: E501

        :param poles: The poles of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._poles = poles

    @property
    def wins(self):
        """Gets the wins of this OwnerPoint.  # noqa: E501

        Total race wins  # noqa: E501

        :return: The wins of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this OwnerPoint.

        Total race wins  # noqa: E501

        :param wins: The wins of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._wins = wins

    @property
    def stage_1_wins(self):
        """Gets the stage_1_wins of this OwnerPoint.  # noqa: E501

        Stage 1 wins  # noqa: E501

        :return: The stage_1_wins of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._stage_1_wins

    @stage_1_wins.setter
    def stage_1_wins(self, stage_1_wins):
        """Sets the stage_1_wins of this OwnerPoint.

        Stage 1 wins  # noqa: E501

        :param stage_1_wins: The stage_1_wins of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._stage_1_wins = stage_1_wins

    @property
    def stage_2_wins(self):
        """Gets the stage_2_wins of this OwnerPoint.  # noqa: E501

        Stage 2 wins  # noqa: E501

        :return: The stage_2_wins of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._stage_2_wins

    @stage_2_wins.setter
    def stage_2_wins(self, stage_2_wins):
        """Sets the stage_2_wins of this OwnerPoint.

        Stage 2 wins  # noqa: E501

        :param stage_2_wins: The stage_2_wins of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._stage_2_wins = stage_2_wins

    @property
    def stage_3_wins(self):
        """Gets the stage_3_wins of this OwnerPoint.  # noqa: E501

        Stage 3 wins  # noqa: E501

        :return: The stage_3_wins of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._stage_3_wins

    @stage_3_wins.setter
    def stage_3_wins(self, stage_3_wins):
        """Sets the stage_3_wins of this OwnerPoint.

        Stage 3 wins  # noqa: E501

        :param stage_3_wins: The stage_3_wins of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._stage_3_wins = stage_3_wins

    @property
    def stage_points(self):
        """Gets the stage_points of this OwnerPoint.  # noqa: E501

        Total stage points  # noqa: E501

        :return: The stage_points of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._stage_points

    @stage_points.setter
    def stage_points(self, stage_points):
        """Sets the stage_points of this OwnerPoint.

        Total stage points  # noqa: E501

        :param stage_points: The stage_points of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._stage_points = stage_points

    @property
    def playoff_race_wins(self):
        """Gets the playoff_race_wins of this OwnerPoint.  # noqa: E501

        Playoff race wins  # noqa: E501

        :return: The playoff_race_wins of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._playoff_race_wins

    @playoff_race_wins.setter
    def playoff_race_wins(self, playoff_race_wins):
        """Sets the playoff_race_wins of this OwnerPoint.

        Playoff race wins  # noqa: E501

        :param playoff_race_wins: The playoff_race_wins of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._playoff_race_wins = playoff_race_wins

    @property
    def playoff_stage_wins(self):
        """Gets the playoff_stage_wins of this OwnerPoint.  # noqa: E501

        Playoff stage wins  # noqa: E501

        :return: The playoff_stage_wins of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._playoff_stage_wins

    @playoff_stage_wins.setter
    def playoff_stage_wins(self, playoff_stage_wins):
        """Sets the playoff_stage_wins of this OwnerPoint.

        Playoff stage wins  # noqa: E501

        :param playoff_stage_wins: The playoff_stage_wins of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._playoff_stage_wins = playoff_stage_wins

    @property
    def points_earned_this_race(self):
        """Gets the points_earned_this_race of this OwnerPoint.  # noqa: E501

        Points earned this race  # noqa: E501

        :return: The points_earned_this_race of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._points_earned_this_race

    @points_earned_this_race.setter
    def points_earned_this_race(self, points_earned_this_race):
        """Sets the points_earned_this_race of this OwnerPoint.

        Points earned this race  # noqa: E501

        :param points_earned_this_race: The points_earned_this_race of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._points_earned_this_race = points_earned_this_race

    @property
    def playoff_points_earned_this_race(self):
        """Gets the playoff_points_earned_this_race of this OwnerPoint.  # noqa: E501

        Playoff points earned this race  # noqa: E501

        :return: The playoff_points_earned_this_race of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._playoff_points_earned_this_race

    @playoff_points_earned_this_race.setter
    def playoff_points_earned_this_race(self, playoff_points_earned_this_race):
        """Sets the playoff_points_earned_this_race of this OwnerPoint.

        Playoff points earned this race  # noqa: E501

        :param playoff_points_earned_this_race: The playoff_points_earned_this_race of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._playoff_points_earned_this_race = playoff_points_earned_this_race

    @property
    def stage_points_earned_this_race(self):
        """Gets the stage_points_earned_this_race of this OwnerPoint.  # noqa: E501

        Stage points earned this race  # noqa: E501

        :return: The stage_points_earned_this_race of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._stage_points_earned_this_race

    @stage_points_earned_this_race.setter
    def stage_points_earned_this_race(self, stage_points_earned_this_race):
        """Sets the stage_points_earned_this_race of this OwnerPoint.

        Stage points earned this race  # noqa: E501

        :param stage_points_earned_this_race: The stage_points_earned_this_race of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._stage_points_earned_this_race = stage_points_earned_this_race

    @property
    def top5(self):
        """Gets the top5 of this OwnerPoint.  # noqa: E501

        Number of Top 5 finishes  # noqa: E501

        :return: The top5 of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._top5

    @top5.setter
    def top5(self, top5):
        """Sets the top5 of this OwnerPoint.

        Number of Top 5 finishes  # noqa: E501

        :param top5: The top5 of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._top5 = top5

    @property
    def top10(self):
        """Gets the top10 of this OwnerPoint.  # noqa: E501

        Number of Top 10 finishes  # noqa: E501

        :return: The top10 of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._top10

    @top10.setter
    def top10(self, top10):
        """Sets the top10 of this OwnerPoint.

        Number of Top 10 finishes  # noqa: E501

        :param top10: The top10 of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._top10 = top10

    @property
    def laps_led(self):
        """Gets the laps_led of this OwnerPoint.  # noqa: E501

        Total laps led  # noqa: E501

        :return: The laps_led of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._laps_led

    @laps_led.setter
    def laps_led(self, laps_led):
        """Sets the laps_led of this OwnerPoint.

        Total laps led  # noqa: E501

        :param laps_led: The laps_led of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._laps_led = laps_led

    @property
    def dnf(self):
        """Gets the dnf of this OwnerPoint.  # noqa: E501

        Number of times the vehicle did not finish the race  # noqa: E501

        :return: The dnf of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._dnf

    @dnf.setter
    def dnf(self, dnf):
        """Sets the dnf of this OwnerPoint.

        Number of times the vehicle did not finish the race  # noqa: E501

        :param dnf: The dnf of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._dnf = dnf

    @property
    def made_playoffs(self):
        """Gets the made_playoffs of this OwnerPoint.  # noqa: E501

        Whether or not the owner made the playoffs  # noqa: E501

        :return: The made_playoffs of this OwnerPoint.  # noqa: E501
        :rtype: bool
        """
        return self._made_playoffs

    @made_playoffs.setter
    def made_playoffs(self, made_playoffs):
        """Sets the made_playoffs of this OwnerPoint.

        Whether or not the owner made the playoffs  # noqa: E501

        :param made_playoffs: The made_playoffs of this OwnerPoint.  # noqa: E501
        :type: bool
        """

        self._made_playoffs = made_playoffs

    @property
    def in_playoffs(self):
        """Gets the in_playoffs of this OwnerPoint.  # noqa: E501

        Whether or not the owner is still in the playoffs  # noqa: E501

        :return: The in_playoffs of this OwnerPoint.  # noqa: E501
        :rtype: bool
        """
        return self._in_playoffs

    @in_playoffs.setter
    def in_playoffs(self, in_playoffs):
        """Sets the in_playoffs of this OwnerPoint.

        Whether or not the owner is still in the playoffs  # noqa: E501

        :param in_playoffs: The in_playoffs of this OwnerPoint.  # noqa: E501
        :type: bool
        """

        self._in_playoffs = in_playoffs

    @property
    def highest_round(self):
        """Gets the highest_round of this OwnerPoint.  # noqa: E501

        Highest playoff round earned  # noqa: E501

        :return: The highest_round of this OwnerPoint.  # noqa: E501
        :rtype: int
        """
        return self._highest_round

    @highest_round.setter
    def highest_round(self, highest_round):
        """Sets the highest_round of this OwnerPoint.

        Highest playoff round earned  # noqa: E501

        :param highest_round: The highest_round of this OwnerPoint.  # noqa: E501
        :type: int
        """

        self._highest_round = highest_round

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OwnerPoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OwnerPoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
