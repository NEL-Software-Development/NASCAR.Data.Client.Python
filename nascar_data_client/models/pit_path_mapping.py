# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PitPathMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'publish_state': 'PublishState',
        'id': 'int',
        'tracking_id': 'str',
        'in_data_warehouse': 'bool',
        'manually_set': 'bool',
        'last_update': 'datetime',
        'last_updated_by': 'str',
        'history_pit_path_id': 'int',
        'history_track_configuration_id': 'int',
        'history_track_id': 'int',
        'name': 'str',
        'ordinal_sort_order': 'int',
        'path_data': 'str',
        'length': 'int',
        'is_pit_in': 'bool',
        'is_pit_out': 'bool'
    }

    attribute_map = {
        'publish_state': 'PublishState',
        'id': 'id',
        'tracking_id': 'tracking_id',
        'in_data_warehouse': 'InDataWarehouse',
        'manually_set': 'Manually_Set',
        'last_update': 'LastUpdate',
        'last_updated_by': 'LastUpdatedBy',
        'history_pit_path_id': 'History_PitPathId',
        'history_track_configuration_id': 'History_TrackConfigurationId',
        'history_track_id': 'History_TrackId',
        'name': 'Name',
        'ordinal_sort_order': 'OrdinalSortOrder',
        'path_data': 'PathData',
        'length': 'Length',
        'is_pit_in': 'IsPitIn',
        'is_pit_out': 'IsPitOut'
    }

    def __init__(self, publish_state=None, id=None, tracking_id=None, in_data_warehouse=None, manually_set=None, last_update=None, last_updated_by=None, history_pit_path_id=None, history_track_configuration_id=None, history_track_id=None, name=None, ordinal_sort_order=None, path_data=None, length=None, is_pit_in=None, is_pit_out=None):  # noqa: E501
        """PitPathMapping - a model defined in Swagger"""  # noqa: E501
        self._publish_state = None
        self._id = None
        self._tracking_id = None
        self._in_data_warehouse = None
        self._manually_set = None
        self._last_update = None
        self._last_updated_by = None
        self._history_pit_path_id = None
        self._history_track_configuration_id = None
        self._history_track_id = None
        self._name = None
        self._ordinal_sort_order = None
        self._path_data = None
        self._length = None
        self._is_pit_in = None
        self._is_pit_out = None
        self.discriminator = None
        if publish_state is not None:
            self.publish_state = publish_state
        if id is not None:
            self.id = id
        if tracking_id is not None:
            self.tracking_id = tracking_id
        if in_data_warehouse is not None:
            self.in_data_warehouse = in_data_warehouse
        if manually_set is not None:
            self.manually_set = manually_set
        if last_update is not None:
            self.last_update = last_update
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if history_pit_path_id is not None:
            self.history_pit_path_id = history_pit_path_id
        if history_track_configuration_id is not None:
            self.history_track_configuration_id = history_track_configuration_id
        if history_track_id is not None:
            self.history_track_id = history_track_id
        if name is not None:
            self.name = name
        if ordinal_sort_order is not None:
            self.ordinal_sort_order = ordinal_sort_order
        if path_data is not None:
            self.path_data = path_data
        if length is not None:
            self.length = length
        if is_pit_in is not None:
            self.is_pit_in = is_pit_in
        if is_pit_out is not None:
            self.is_pit_out = is_pit_out

    @property
    def publish_state(self):
        """Gets the publish_state of this PitPathMapping.  # noqa: E501


        :return: The publish_state of this PitPathMapping.  # noqa: E501
        :rtype: PublishState
        """
        return self._publish_state

    @publish_state.setter
    def publish_state(self, publish_state):
        """Sets the publish_state of this PitPathMapping.


        :param publish_state: The publish_state of this PitPathMapping.  # noqa: E501
        :type: PublishState
        """

        self._publish_state = publish_state

    @property
    def id(self):
        """Gets the id of this PitPathMapping.  # noqa: E501


        :return: The id of this PitPathMapping.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PitPathMapping.


        :param id: The id of this PitPathMapping.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tracking_id(self):
        """Gets the tracking_id of this PitPathMapping.  # noqa: E501


        :return: The tracking_id of this PitPathMapping.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this PitPathMapping.


        :param tracking_id: The tracking_id of this PitPathMapping.  # noqa: E501
        :type: str
        """

        self._tracking_id = tracking_id

    @property
    def in_data_warehouse(self):
        """Gets the in_data_warehouse of this PitPathMapping.  # noqa: E501


        :return: The in_data_warehouse of this PitPathMapping.  # noqa: E501
        :rtype: bool
        """
        return self._in_data_warehouse

    @in_data_warehouse.setter
    def in_data_warehouse(self, in_data_warehouse):
        """Sets the in_data_warehouse of this PitPathMapping.


        :param in_data_warehouse: The in_data_warehouse of this PitPathMapping.  # noqa: E501
        :type: bool
        """

        self._in_data_warehouse = in_data_warehouse

    @property
    def manually_set(self):
        """Gets the manually_set of this PitPathMapping.  # noqa: E501


        :return: The manually_set of this PitPathMapping.  # noqa: E501
        :rtype: bool
        """
        return self._manually_set

    @manually_set.setter
    def manually_set(self, manually_set):
        """Sets the manually_set of this PitPathMapping.


        :param manually_set: The manually_set of this PitPathMapping.  # noqa: E501
        :type: bool
        """

        self._manually_set = manually_set

    @property
    def last_update(self):
        """Gets the last_update of this PitPathMapping.  # noqa: E501


        :return: The last_update of this PitPathMapping.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this PitPathMapping.


        :param last_update: The last_update of this PitPathMapping.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this PitPathMapping.  # noqa: E501


        :return: The last_updated_by of this PitPathMapping.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this PitPathMapping.


        :param last_updated_by: The last_updated_by of this PitPathMapping.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def history_pit_path_id(self):
        """Gets the history_pit_path_id of this PitPathMapping.  # noqa: E501


        :return: The history_pit_path_id of this PitPathMapping.  # noqa: E501
        :rtype: int
        """
        return self._history_pit_path_id

    @history_pit_path_id.setter
    def history_pit_path_id(self, history_pit_path_id):
        """Sets the history_pit_path_id of this PitPathMapping.


        :param history_pit_path_id: The history_pit_path_id of this PitPathMapping.  # noqa: E501
        :type: int
        """

        self._history_pit_path_id = history_pit_path_id

    @property
    def history_track_configuration_id(self):
        """Gets the history_track_configuration_id of this PitPathMapping.  # noqa: E501


        :return: The history_track_configuration_id of this PitPathMapping.  # noqa: E501
        :rtype: int
        """
        return self._history_track_configuration_id

    @history_track_configuration_id.setter
    def history_track_configuration_id(self, history_track_configuration_id):
        """Sets the history_track_configuration_id of this PitPathMapping.


        :param history_track_configuration_id: The history_track_configuration_id of this PitPathMapping.  # noqa: E501
        :type: int
        """

        self._history_track_configuration_id = history_track_configuration_id

    @property
    def history_track_id(self):
        """Gets the history_track_id of this PitPathMapping.  # noqa: E501


        :return: The history_track_id of this PitPathMapping.  # noqa: E501
        :rtype: int
        """
        return self._history_track_id

    @history_track_id.setter
    def history_track_id(self, history_track_id):
        """Sets the history_track_id of this PitPathMapping.


        :param history_track_id: The history_track_id of this PitPathMapping.  # noqa: E501
        :type: int
        """

        self._history_track_id = history_track_id

    @property
    def name(self):
        """Gets the name of this PitPathMapping.  # noqa: E501


        :return: The name of this PitPathMapping.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PitPathMapping.


        :param name: The name of this PitPathMapping.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ordinal_sort_order(self):
        """Gets the ordinal_sort_order of this PitPathMapping.  # noqa: E501


        :return: The ordinal_sort_order of this PitPathMapping.  # noqa: E501
        :rtype: int
        """
        return self._ordinal_sort_order

    @ordinal_sort_order.setter
    def ordinal_sort_order(self, ordinal_sort_order):
        """Sets the ordinal_sort_order of this PitPathMapping.


        :param ordinal_sort_order: The ordinal_sort_order of this PitPathMapping.  # noqa: E501
        :type: int
        """

        self._ordinal_sort_order = ordinal_sort_order

    @property
    def path_data(self):
        """Gets the path_data of this PitPathMapping.  # noqa: E501


        :return: The path_data of this PitPathMapping.  # noqa: E501
        :rtype: str
        """
        return self._path_data

    @path_data.setter
    def path_data(self, path_data):
        """Sets the path_data of this PitPathMapping.


        :param path_data: The path_data of this PitPathMapping.  # noqa: E501
        :type: str
        """

        self._path_data = path_data

    @property
    def length(self):
        """Gets the length of this PitPathMapping.  # noqa: E501


        :return: The length of this PitPathMapping.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this PitPathMapping.


        :param length: The length of this PitPathMapping.  # noqa: E501
        :type: int
        """

        self._length = length

    @property
    def is_pit_in(self):
        """Gets the is_pit_in of this PitPathMapping.  # noqa: E501


        :return: The is_pit_in of this PitPathMapping.  # noqa: E501
        :rtype: bool
        """
        return self._is_pit_in

    @is_pit_in.setter
    def is_pit_in(self, is_pit_in):
        """Sets the is_pit_in of this PitPathMapping.


        :param is_pit_in: The is_pit_in of this PitPathMapping.  # noqa: E501
        :type: bool
        """

        self._is_pit_in = is_pit_in

    @property
    def is_pit_out(self):
        """Gets the is_pit_out of this PitPathMapping.  # noqa: E501


        :return: The is_pit_out of this PitPathMapping.  # noqa: E501
        :rtype: bool
        """
        return self._is_pit_out

    @is_pit_out.setter
    def is_pit_out(self, is_pit_out):
        """Sets the is_pit_out of this PitPathMapping.


        :param is_pit_out: The is_pit_out of this PitPathMapping.  # noqa: E501
        :type: bool
        """

        self._is_pit_out = is_pit_out

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PitPathMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PitPathMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
