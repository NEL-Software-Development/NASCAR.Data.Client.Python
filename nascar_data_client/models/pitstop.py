# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Pitstop(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lap': 'int',
        'leader_lap': 'int',
        'vehicle_number': 'str',
        'enter_flagstate': 'int',
        'enter_racetime': 'float',
        'enter_travelduration': 'float',
        'adjustment_left': 'bool',
        'adjustment_right': 'bool',
        'body_repairs': 'bool',
        'fuel_cans': 'int',
        'leftfront_tirechanged': 'bool',
        'leftrear_tirechanged': 'bool',
        'rightfront_tirechanged': 'bool',
        'rightrear_tirechanged': 'bool',
        'infraction': 'str',
        'video': 'str',
        'pitbox_enter': 'float',
        'pitbox_exit': 'float',
        'exit_flagstate': 'int',
        'exit_racetime': 'float',
        'exit_travelduration': 'float',
        'total_duration': 'float'
    }

    attribute_map = {
        'lap': 'lap',
        'leader_lap': 'leader_lap',
        'vehicle_number': 'vehicle_number',
        'enter_flagstate': 'enter_flagstate',
        'enter_racetime': 'enter_racetime',
        'enter_travelduration': 'enter_travelduration',
        'adjustment_left': 'adjustment_left',
        'adjustment_right': 'adjustment_right',
        'body_repairs': 'body_repairs',
        'fuel_cans': 'fuel_cans',
        'leftfront_tirechanged': 'leftfront_tirechanged',
        'leftrear_tirechanged': 'Leftrear_tirechanged',
        'rightfront_tirechanged': 'rightfront_tirechanged',
        'rightrear_tirechanged': 'rightrear_tirechanged',
        'infraction': 'infraction',
        'video': 'video',
        'pitbox_enter': 'pitbox_enter',
        'pitbox_exit': 'pitbox_exit',
        'exit_flagstate': 'exit_flagstate',
        'exit_racetime': 'exit_racetime',
        'exit_travelduration': 'exit_travelduration',
        'total_duration': 'total_duration'
    }

    def __init__(self, lap=None, leader_lap=None, vehicle_number=None, enter_flagstate=None, enter_racetime=None, enter_travelduration=None, adjustment_left=None, adjustment_right=None, body_repairs=None, fuel_cans=None, leftfront_tirechanged=None, leftrear_tirechanged=None, rightfront_tirechanged=None, rightrear_tirechanged=None, infraction=None, video=None, pitbox_enter=None, pitbox_exit=None, exit_flagstate=None, exit_racetime=None, exit_travelduration=None, total_duration=None):  # noqa: E501
        """Pitstop - a model defined in Swagger"""  # noqa: E501
        self._lap = None
        self._leader_lap = None
        self._vehicle_number = None
        self._enter_flagstate = None
        self._enter_racetime = None
        self._enter_travelduration = None
        self._adjustment_left = None
        self._adjustment_right = None
        self._body_repairs = None
        self._fuel_cans = None
        self._leftfront_tirechanged = None
        self._leftrear_tirechanged = None
        self._rightfront_tirechanged = None
        self._rightrear_tirechanged = None
        self._infraction = None
        self._video = None
        self._pitbox_enter = None
        self._pitbox_exit = None
        self._exit_flagstate = None
        self._exit_racetime = None
        self._exit_travelduration = None
        self._total_duration = None
        self.discriminator = None
        if lap is not None:
            self.lap = lap
        if leader_lap is not None:
            self.leader_lap = leader_lap
        if vehicle_number is not None:
            self.vehicle_number = vehicle_number
        if enter_flagstate is not None:
            self.enter_flagstate = enter_flagstate
        if enter_racetime is not None:
            self.enter_racetime = enter_racetime
        if enter_travelduration is not None:
            self.enter_travelduration = enter_travelduration
        if adjustment_left is not None:
            self.adjustment_left = adjustment_left
        if adjustment_right is not None:
            self.adjustment_right = adjustment_right
        if body_repairs is not None:
            self.body_repairs = body_repairs
        if fuel_cans is not None:
            self.fuel_cans = fuel_cans
        if leftfront_tirechanged is not None:
            self.leftfront_tirechanged = leftfront_tirechanged
        if leftrear_tirechanged is not None:
            self.leftrear_tirechanged = leftrear_tirechanged
        if rightfront_tirechanged is not None:
            self.rightfront_tirechanged = rightfront_tirechanged
        if rightrear_tirechanged is not None:
            self.rightrear_tirechanged = rightrear_tirechanged
        if infraction is not None:
            self.infraction = infraction
        if video is not None:
            self.video = video
        if pitbox_enter is not None:
            self.pitbox_enter = pitbox_enter
        if pitbox_exit is not None:
            self.pitbox_exit = pitbox_exit
        if exit_flagstate is not None:
            self.exit_flagstate = exit_flagstate
        if exit_racetime is not None:
            self.exit_racetime = exit_racetime
        if exit_travelduration is not None:
            self.exit_travelduration = exit_travelduration
        if total_duration is not None:
            self.total_duration = total_duration

    @property
    def lap(self):
        """Gets the lap of this Pitstop.  # noqa: E501

        Lap  # noqa: E501

        :return: The lap of this Pitstop.  # noqa: E501
        :rtype: int
        """
        return self._lap

    @lap.setter
    def lap(self, lap):
        """Sets the lap of this Pitstop.

        Lap  # noqa: E501

        :param lap: The lap of this Pitstop.  # noqa: E501
        :type: int
        """

        self._lap = lap

    @property
    def leader_lap(self):
        """Gets the leader_lap of this Pitstop.  # noqa: E501

        Leader lap  # noqa: E501

        :return: The leader_lap of this Pitstop.  # noqa: E501
        :rtype: int
        """
        return self._leader_lap

    @leader_lap.setter
    def leader_lap(self, leader_lap):
        """Sets the leader_lap of this Pitstop.

        Leader lap  # noqa: E501

        :param leader_lap: The leader_lap of this Pitstop.  # noqa: E501
        :type: int
        """

        self._leader_lap = leader_lap

    @property
    def vehicle_number(self):
        """Gets the vehicle_number of this Pitstop.  # noqa: E501

        Vehicle number  # noqa: E501

        :return: The vehicle_number of this Pitstop.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_number

    @vehicle_number.setter
    def vehicle_number(self, vehicle_number):
        """Sets the vehicle_number of this Pitstop.

        Vehicle number  # noqa: E501

        :param vehicle_number: The vehicle_number of this Pitstop.  # noqa: E501
        :type: str
        """

        self._vehicle_number = vehicle_number

    @property
    def enter_flagstate(self):
        """Gets the enter_flagstate of this Pitstop.  # noqa: E501

        Enter flag state  # noqa: E501

        :return: The enter_flagstate of this Pitstop.  # noqa: E501
        :rtype: int
        """
        return self._enter_flagstate

    @enter_flagstate.setter
    def enter_flagstate(self, enter_flagstate):
        """Sets the enter_flagstate of this Pitstop.

        Enter flag state  # noqa: E501

        :param enter_flagstate: The enter_flagstate of this Pitstop.  # noqa: E501
        :type: int
        """

        self._enter_flagstate = enter_flagstate

    @property
    def enter_racetime(self):
        """Gets the enter_racetime of this Pitstop.  # noqa: E501

        Exit flag state  # noqa: E501

        :return: The enter_racetime of this Pitstop.  # noqa: E501
        :rtype: float
        """
        return self._enter_racetime

    @enter_racetime.setter
    def enter_racetime(self, enter_racetime):
        """Sets the enter_racetime of this Pitstop.

        Exit flag state  # noqa: E501

        :param enter_racetime: The enter_racetime of this Pitstop.  # noqa: E501
        :type: float
        """

        self._enter_racetime = enter_racetime

    @property
    def enter_travelduration(self):
        """Gets the enter_travelduration of this Pitstop.  # noqa: E501

        Enter travel duration  # noqa: E501

        :return: The enter_travelduration of this Pitstop.  # noqa: E501
        :rtype: float
        """
        return self._enter_travelduration

    @enter_travelduration.setter
    def enter_travelduration(self, enter_travelduration):
        """Sets the enter_travelduration of this Pitstop.

        Enter travel duration  # noqa: E501

        :param enter_travelduration: The enter_travelduration of this Pitstop.  # noqa: E501
        :type: float
        """

        self._enter_travelduration = enter_travelduration

    @property
    def adjustment_left(self):
        """Gets the adjustment_left of this Pitstop.  # noqa: E501

        Adjustment left  # noqa: E501

        :return: The adjustment_left of this Pitstop.  # noqa: E501
        :rtype: bool
        """
        return self._adjustment_left

    @adjustment_left.setter
    def adjustment_left(self, adjustment_left):
        """Sets the adjustment_left of this Pitstop.

        Adjustment left  # noqa: E501

        :param adjustment_left: The adjustment_left of this Pitstop.  # noqa: E501
        :type: bool
        """

        self._adjustment_left = adjustment_left

    @property
    def adjustment_right(self):
        """Gets the adjustment_right of this Pitstop.  # noqa: E501

        Adjustment right  # noqa: E501

        :return: The adjustment_right of this Pitstop.  # noqa: E501
        :rtype: bool
        """
        return self._adjustment_right

    @adjustment_right.setter
    def adjustment_right(self, adjustment_right):
        """Sets the adjustment_right of this Pitstop.

        Adjustment right  # noqa: E501

        :param adjustment_right: The adjustment_right of this Pitstop.  # noqa: E501
        :type: bool
        """

        self._adjustment_right = adjustment_right

    @property
    def body_repairs(self):
        """Gets the body_repairs of this Pitstop.  # noqa: E501

        Body repairs  # noqa: E501

        :return: The body_repairs of this Pitstop.  # noqa: E501
        :rtype: bool
        """
        return self._body_repairs

    @body_repairs.setter
    def body_repairs(self, body_repairs):
        """Sets the body_repairs of this Pitstop.

        Body repairs  # noqa: E501

        :param body_repairs: The body_repairs of this Pitstop.  # noqa: E501
        :type: bool
        """

        self._body_repairs = body_repairs

    @property
    def fuel_cans(self):
        """Gets the fuel_cans of this Pitstop.  # noqa: E501

        Number of fuel cans  # noqa: E501

        :return: The fuel_cans of this Pitstop.  # noqa: E501
        :rtype: int
        """
        return self._fuel_cans

    @fuel_cans.setter
    def fuel_cans(self, fuel_cans):
        """Sets the fuel_cans of this Pitstop.

        Number of fuel cans  # noqa: E501

        :param fuel_cans: The fuel_cans of this Pitstop.  # noqa: E501
        :type: int
        """

        self._fuel_cans = fuel_cans

    @property
    def leftfront_tirechanged(self):
        """Gets the leftfront_tirechanged of this Pitstop.  # noqa: E501

        Left front tire changed  # noqa: E501

        :return: The leftfront_tirechanged of this Pitstop.  # noqa: E501
        :rtype: bool
        """
        return self._leftfront_tirechanged

    @leftfront_tirechanged.setter
    def leftfront_tirechanged(self, leftfront_tirechanged):
        """Sets the leftfront_tirechanged of this Pitstop.

        Left front tire changed  # noqa: E501

        :param leftfront_tirechanged: The leftfront_tirechanged of this Pitstop.  # noqa: E501
        :type: bool
        """

        self._leftfront_tirechanged = leftfront_tirechanged

    @property
    def leftrear_tirechanged(self):
        """Gets the leftrear_tirechanged of this Pitstop.  # noqa: E501

        Left rear tire changed  # noqa: E501

        :return: The leftrear_tirechanged of this Pitstop.  # noqa: E501
        :rtype: bool
        """
        return self._leftrear_tirechanged

    @leftrear_tirechanged.setter
    def leftrear_tirechanged(self, leftrear_tirechanged):
        """Sets the leftrear_tirechanged of this Pitstop.

        Left rear tire changed  # noqa: E501

        :param leftrear_tirechanged: The leftrear_tirechanged of this Pitstop.  # noqa: E501
        :type: bool
        """

        self._leftrear_tirechanged = leftrear_tirechanged

    @property
    def rightfront_tirechanged(self):
        """Gets the rightfront_tirechanged of this Pitstop.  # noqa: E501

        Right front tire changed  # noqa: E501

        :return: The rightfront_tirechanged of this Pitstop.  # noqa: E501
        :rtype: bool
        """
        return self._rightfront_tirechanged

    @rightfront_tirechanged.setter
    def rightfront_tirechanged(self, rightfront_tirechanged):
        """Sets the rightfront_tirechanged of this Pitstop.

        Right front tire changed  # noqa: E501

        :param rightfront_tirechanged: The rightfront_tirechanged of this Pitstop.  # noqa: E501
        :type: bool
        """

        self._rightfront_tirechanged = rightfront_tirechanged

    @property
    def rightrear_tirechanged(self):
        """Gets the rightrear_tirechanged of this Pitstop.  # noqa: E501

        Right rear tire changed  # noqa: E501

        :return: The rightrear_tirechanged of this Pitstop.  # noqa: E501
        :rtype: bool
        """
        return self._rightrear_tirechanged

    @rightrear_tirechanged.setter
    def rightrear_tirechanged(self, rightrear_tirechanged):
        """Sets the rightrear_tirechanged of this Pitstop.

        Right rear tire changed  # noqa: E501

        :param rightrear_tirechanged: The rightrear_tirechanged of this Pitstop.  # noqa: E501
        :type: bool
        """

        self._rightrear_tirechanged = rightrear_tirechanged

    @property
    def infraction(self):
        """Gets the infraction of this Pitstop.  # noqa: E501

        Infraction  # noqa: E501

        :return: The infraction of this Pitstop.  # noqa: E501
        :rtype: str
        """
        return self._infraction

    @infraction.setter
    def infraction(self, infraction):
        """Sets the infraction of this Pitstop.

        Infraction  # noqa: E501

        :param infraction: The infraction of this Pitstop.  # noqa: E501
        :type: str
        """

        self._infraction = infraction

    @property
    def video(self):
        """Gets the video of this Pitstop.  # noqa: E501

        Video  # noqa: E501

        :return: The video of this Pitstop.  # noqa: E501
        :rtype: str
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this Pitstop.

        Video  # noqa: E501

        :param video: The video of this Pitstop.  # noqa: E501
        :type: str
        """

        self._video = video

    @property
    def pitbox_enter(self):
        """Gets the pitbox_enter of this Pitstop.  # noqa: E501

        Pit box enter  # noqa: E501

        :return: The pitbox_enter of this Pitstop.  # noqa: E501
        :rtype: float
        """
        return self._pitbox_enter

    @pitbox_enter.setter
    def pitbox_enter(self, pitbox_enter):
        """Sets the pitbox_enter of this Pitstop.

        Pit box enter  # noqa: E501

        :param pitbox_enter: The pitbox_enter of this Pitstop.  # noqa: E501
        :type: float
        """

        self._pitbox_enter = pitbox_enter

    @property
    def pitbox_exit(self):
        """Gets the pitbox_exit of this Pitstop.  # noqa: E501

        Pit box exit  # noqa: E501

        :return: The pitbox_exit of this Pitstop.  # noqa: E501
        :rtype: float
        """
        return self._pitbox_exit

    @pitbox_exit.setter
    def pitbox_exit(self, pitbox_exit):
        """Sets the pitbox_exit of this Pitstop.

        Pit box exit  # noqa: E501

        :param pitbox_exit: The pitbox_exit of this Pitstop.  # noqa: E501
        :type: float
        """

        self._pitbox_exit = pitbox_exit

    @property
    def exit_flagstate(self):
        """Gets the exit_flagstate of this Pitstop.  # noqa: E501

        Exit flag state  # noqa: E501

        :return: The exit_flagstate of this Pitstop.  # noqa: E501
        :rtype: int
        """
        return self._exit_flagstate

    @exit_flagstate.setter
    def exit_flagstate(self, exit_flagstate):
        """Sets the exit_flagstate of this Pitstop.

        Exit flag state  # noqa: E501

        :param exit_flagstate: The exit_flagstate of this Pitstop.  # noqa: E501
        :type: int
        """

        self._exit_flagstate = exit_flagstate

    @property
    def exit_racetime(self):
        """Gets the exit_racetime of this Pitstop.  # noqa: E501

        Exit race time  # noqa: E501

        :return: The exit_racetime of this Pitstop.  # noqa: E501
        :rtype: float
        """
        return self._exit_racetime

    @exit_racetime.setter
    def exit_racetime(self, exit_racetime):
        """Sets the exit_racetime of this Pitstop.

        Exit race time  # noqa: E501

        :param exit_racetime: The exit_racetime of this Pitstop.  # noqa: E501
        :type: float
        """

        self._exit_racetime = exit_racetime

    @property
    def exit_travelduration(self):
        """Gets the exit_travelduration of this Pitstop.  # noqa: E501

        Exit travel duration  # noqa: E501

        :return: The exit_travelduration of this Pitstop.  # noqa: E501
        :rtype: float
        """
        return self._exit_travelduration

    @exit_travelduration.setter
    def exit_travelduration(self, exit_travelduration):
        """Sets the exit_travelduration of this Pitstop.

        Exit travel duration  # noqa: E501

        :param exit_travelduration: The exit_travelduration of this Pitstop.  # noqa: E501
        :type: float
        """

        self._exit_travelduration = exit_travelduration

    @property
    def total_duration(self):
        """Gets the total_duration of this Pitstop.  # noqa: E501

        Total duration  # noqa: E501

        :return: The total_duration of this Pitstop.  # noqa: E501
        :rtype: float
        """
        return self._total_duration

    @total_duration.setter
    def total_duration(self, total_duration):
        """Sets the total_duration of this Pitstop.

        Total duration  # noqa: E501

        :param total_duration: The total_duration of this Pitstop.  # noqa: E501
        :type: float
        """

        self._total_duration = total_duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pitstop, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pitstop):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
