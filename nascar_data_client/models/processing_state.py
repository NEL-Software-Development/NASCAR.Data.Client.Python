# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ProcessingState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'interval_in_seconds': 'int',
        'action': 'str',
        'last_run': 'datetime',
        'action_detail_id': 'int',
        'value': 'int',
        'is_active': 'bool'
    }

    attribute_map = {
        'category': 'Category',
        'interval_in_seconds': 'IntervalInSeconds',
        'action': 'Action',
        'last_run': 'LastRun',
        'action_detail_id': 'ActionDetailId',
        'value': 'Value',
        'is_active': 'IsActive'
    }

    def __init__(self, category=None, interval_in_seconds=None, action=None, last_run=None, action_detail_id=None, value=None, is_active=None):  # noqa: E501
        """ProcessingState - a model defined in Swagger"""  # noqa: E501
        self._category = None
        self._interval_in_seconds = None
        self._action = None
        self._last_run = None
        self._action_detail_id = None
        self._value = None
        self._is_active = None
        self.discriminator = None
        if category is not None:
            self.category = category
        if interval_in_seconds is not None:
            self.interval_in_seconds = interval_in_seconds
        if action is not None:
            self.action = action
        if last_run is not None:
            self.last_run = last_run
        if action_detail_id is not None:
            self.action_detail_id = action_detail_id
        if value is not None:
            self.value = value
        if is_active is not None:
            self.is_active = is_active

    @property
    def category(self):
        """Gets the category of this ProcessingState.  # noqa: E501


        :return: The category of this ProcessingState.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ProcessingState.


        :param category: The category of this ProcessingState.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def interval_in_seconds(self):
        """Gets the interval_in_seconds of this ProcessingState.  # noqa: E501


        :return: The interval_in_seconds of this ProcessingState.  # noqa: E501
        :rtype: int
        """
        return self._interval_in_seconds

    @interval_in_seconds.setter
    def interval_in_seconds(self, interval_in_seconds):
        """Sets the interval_in_seconds of this ProcessingState.


        :param interval_in_seconds: The interval_in_seconds of this ProcessingState.  # noqa: E501
        :type: int
        """

        self._interval_in_seconds = interval_in_seconds

    @property
    def action(self):
        """Gets the action of this ProcessingState.  # noqa: E501


        :return: The action of this ProcessingState.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ProcessingState.


        :param action: The action of this ProcessingState.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def last_run(self):
        """Gets the last_run of this ProcessingState.  # noqa: E501


        :return: The last_run of this ProcessingState.  # noqa: E501
        :rtype: datetime
        """
        return self._last_run

    @last_run.setter
    def last_run(self, last_run):
        """Sets the last_run of this ProcessingState.


        :param last_run: The last_run of this ProcessingState.  # noqa: E501
        :type: datetime
        """

        self._last_run = last_run

    @property
    def action_detail_id(self):
        """Gets the action_detail_id of this ProcessingState.  # noqa: E501


        :return: The action_detail_id of this ProcessingState.  # noqa: E501
        :rtype: int
        """
        return self._action_detail_id

    @action_detail_id.setter
    def action_detail_id(self, action_detail_id):
        """Sets the action_detail_id of this ProcessingState.


        :param action_detail_id: The action_detail_id of this ProcessingState.  # noqa: E501
        :type: int
        """

        self._action_detail_id = action_detail_id

    @property
    def value(self):
        """Gets the value of this ProcessingState.  # noqa: E501


        :return: The value of this ProcessingState.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ProcessingState.


        :param value: The value of this ProcessingState.  # noqa: E501
        :type: int
        """

        self._value = value

    @property
    def is_active(self):
        """Gets the is_active of this ProcessingState.  # noqa: E501


        :return: The is_active of this ProcessingState.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ProcessingState.


        :param is_active: The is_active of this ProcessingState.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProcessingState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessingState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
