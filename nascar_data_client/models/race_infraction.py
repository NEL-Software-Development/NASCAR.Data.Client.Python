# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RaceInfraction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flag_state': 'str',
        'infraction': 'str',
        'vehicle_number': 'str',
        'lap': 'int',
        'lap_assessed': 'int',
        'time_of_race': 'datetime',
        'penalty': 'str',
        'notes': 'str'
    }

    attribute_map = {
        'flag_state': 'flag_state',
        'infraction': 'infraction',
        'vehicle_number': 'vehicle_number',
        'lap': 'lap',
        'lap_assessed': 'lap_assessed',
        'time_of_race': 'time_of_race',
        'penalty': 'penalty',
        'notes': 'notes'
    }

    def __init__(self, flag_state=None, infraction=None, vehicle_number=None, lap=None, lap_assessed=None, time_of_race=None, penalty=None, notes=None):  # noqa: E501
        """RaceInfraction - a model defined in Swagger"""  # noqa: E501
        self._flag_state = None
        self._infraction = None
        self._vehicle_number = None
        self._lap = None
        self._lap_assessed = None
        self._time_of_race = None
        self._penalty = None
        self._notes = None
        self.discriminator = None
        if flag_state is not None:
            self.flag_state = flag_state
        if infraction is not None:
            self.infraction = infraction
        if vehicle_number is not None:
            self.vehicle_number = vehicle_number
        if lap is not None:
            self.lap = lap
        if lap_assessed is not None:
            self.lap_assessed = lap_assessed
        if time_of_race is not None:
            self.time_of_race = time_of_race
        if penalty is not None:
            self.penalty = penalty
        if notes is not None:
            self.notes = notes

    @property
    def flag_state(self):
        """Gets the flag_state of this RaceInfraction.  # noqa: E501

        Flag state at the time of the infraction: (W,G,G/Y,R,Y)  # noqa: E501

        :return: The flag_state of this RaceInfraction.  # noqa: E501
        :rtype: str
        """
        return self._flag_state

    @flag_state.setter
    def flag_state(self, flag_state):
        """Sets the flag_state of this RaceInfraction.

        Flag state at the time of the infraction: (W,G,G/Y,R,Y)  # noqa: E501

        :param flag_state: The flag_state of this RaceInfraction.  # noqa: E501
        :type: str
        """

        self._flag_state = flag_state

    @property
    def infraction(self):
        """Gets the infraction of this RaceInfraction.  # noqa: E501

        Description of the infraction  # noqa: E501

        :return: The infraction of this RaceInfraction.  # noqa: E501
        :rtype: str
        """
        return self._infraction

    @infraction.setter
    def infraction(self, infraction):
        """Sets the infraction of this RaceInfraction.

        Description of the infraction  # noqa: E501

        :param infraction: The infraction of this RaceInfraction.  # noqa: E501
        :type: str
        """

        self._infraction = infraction

    @property
    def vehicle_number(self):
        """Gets the vehicle_number of this RaceInfraction.  # noqa: E501

        Vehicle number  # noqa: E501

        :return: The vehicle_number of this RaceInfraction.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_number

    @vehicle_number.setter
    def vehicle_number(self, vehicle_number):
        """Sets the vehicle_number of this RaceInfraction.

        Vehicle number  # noqa: E501

        :param vehicle_number: The vehicle_number of this RaceInfraction.  # noqa: E501
        :type: str
        """

        self._vehicle_number = vehicle_number

    @property
    def lap(self):
        """Gets the lap of this RaceInfraction.  # noqa: E501

        Lap of infraction  # noqa: E501

        :return: The lap of this RaceInfraction.  # noqa: E501
        :rtype: int
        """
        return self._lap

    @lap.setter
    def lap(self, lap):
        """Sets the lap of this RaceInfraction.

        Lap of infraction  # noqa: E501

        :param lap: The lap of this RaceInfraction.  # noqa: E501
        :type: int
        """

        self._lap = lap

    @property
    def lap_assessed(self):
        """Gets the lap_assessed of this RaceInfraction.  # noqa: E501

        Lap infraction was assessed  # noqa: E501

        :return: The lap_assessed of this RaceInfraction.  # noqa: E501
        :rtype: int
        """
        return self._lap_assessed

    @lap_assessed.setter
    def lap_assessed(self, lap_assessed):
        """Sets the lap_assessed of this RaceInfraction.

        Lap infraction was assessed  # noqa: E501

        :param lap_assessed: The lap_assessed of this RaceInfraction.  # noqa: E501
        :type: int
        """

        self._lap_assessed = lap_assessed

    @property
    def time_of_race(self):
        """Gets the time_of_race of this RaceInfraction.  # noqa: E501

        Time of race the infraction occurred  # noqa: E501

        :return: The time_of_race of this RaceInfraction.  # noqa: E501
        :rtype: datetime
        """
        return self._time_of_race

    @time_of_race.setter
    def time_of_race(self, time_of_race):
        """Sets the time_of_race of this RaceInfraction.

        Time of race the infraction occurred  # noqa: E501

        :param time_of_race: The time_of_race of this RaceInfraction.  # noqa: E501
        :type: datetime
        """

        self._time_of_race = time_of_race

    @property
    def penalty(self):
        """Gets the penalty of this RaceInfraction.  # noqa: E501

        Penalty assessed  # noqa: E501

        :return: The penalty of this RaceInfraction.  # noqa: E501
        :rtype: str
        """
        return self._penalty

    @penalty.setter
    def penalty(self, penalty):
        """Sets the penalty of this RaceInfraction.

        Penalty assessed  # noqa: E501

        :param penalty: The penalty of this RaceInfraction.  # noqa: E501
        :type: str
        """

        self._penalty = penalty

    @property
    def notes(self):
        """Gets the notes of this RaceInfraction.  # noqa: E501

        Notes  # noqa: E501

        :return: The notes of this RaceInfraction.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this RaceInfraction.

        Notes  # noqa: E501

        :param notes: The notes of this RaceInfraction.  # noqa: E501
        :type: str
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RaceInfraction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RaceInfraction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
