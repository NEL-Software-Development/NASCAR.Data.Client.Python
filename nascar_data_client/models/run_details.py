# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RunDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'start_time': 'datetime',
        'run_state': 'RunState',
        'run_type': 'RunType',
        'duration': 'int',
        'flag_state': 'str',
        'flags': 'list[Flag]'
    }

    attribute_map = {
        'name': 'name',
        'start_time': 'start_time',
        'run_state': 'run_state',
        'run_type': 'run_type',
        'duration': 'duration',
        'flag_state': 'flag_state',
        'flags': 'flags'
    }

    def __init__(self, name=None, start_time=None, run_state=None, run_type=None, duration=None, flag_state=None, flags=None):  # noqa: E501
        """RunDetails - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._start_time = None
        self._run_state = None
        self._run_type = None
        self._duration = None
        self._flag_state = None
        self._flags = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if start_time is not None:
            self.start_time = start_time
        if run_state is not None:
            self.run_state = run_state
        if run_type is not None:
            self.run_type = run_type
        if duration is not None:
            self.duration = duration
        if flag_state is not None:
            self.flag_state = flag_state
        if flags is not None:
            self.flags = flags

    @property
    def name(self):
        """Gets the name of this RunDetails.  # noqa: E501

        The name of the run  # noqa: E501

        :return: The name of this RunDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RunDetails.

        The name of the run  # noqa: E501

        :param name: The name of this RunDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def start_time(self):
        """Gets the start_time of this RunDetails.  # noqa: E501

        Scheduled start time  # noqa: E501

        :return: The start_time of this RunDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this RunDetails.

        Scheduled start time  # noqa: E501

        :param start_time: The start_time of this RunDetails.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def run_state(self):
        """Gets the run_state of this RunDetails.  # noqa: E501


        :return: The run_state of this RunDetails.  # noqa: E501
        :rtype: RunState
        """
        return self._run_state

    @run_state.setter
    def run_state(self, run_state):
        """Sets the run_state of this RunDetails.


        :param run_state: The run_state of this RunDetails.  # noqa: E501
        :type: RunState
        """

        self._run_state = run_state

    @property
    def run_type(self):
        """Gets the run_type of this RunDetails.  # noqa: E501


        :return: The run_type of this RunDetails.  # noqa: E501
        :rtype: RunType
        """
        return self._run_type

    @run_type.setter
    def run_type(self, run_type):
        """Sets the run_type of this RunDetails.


        :param run_type: The run_type of this RunDetails.  # noqa: E501
        :type: RunType
        """

        self._run_type = run_type

    @property
    def duration(self):
        """Gets the duration of this RunDetails.  # noqa: E501

        The scheduled duration of the run in seconds  # noqa: E501

        :return: The duration of this RunDetails.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this RunDetails.

        The scheduled duration of the run in seconds  # noqa: E501

        :param duration: The duration of this RunDetails.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def flag_state(self):
        """Gets the flag_state of this RunDetails.  # noqa: E501

        Flag state:  (Inactive, Active, Completed)  # noqa: E501

        :return: The flag_state of this RunDetails.  # noqa: E501
        :rtype: str
        """
        return self._flag_state

    @flag_state.setter
    def flag_state(self, flag_state):
        """Sets the flag_state of this RunDetails.

        Flag state:  (Inactive, Active, Completed)  # noqa: E501

        :param flag_state: The flag_state of this RunDetails.  # noqa: E501
        :type: str
        """

        self._flag_state = flag_state

    @property
    def flags(self):
        """Gets the flags of this RunDetails.  # noqa: E501

        Flags associated with this run  # noqa: E501

        :return: The flags of this RunDetails.  # noqa: E501
        :rtype: list[Flag]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this RunDetails.

        Flags associated with this run  # noqa: E501

        :param flags: The flags of this RunDetails.  # noqa: E501
        :type: list[Flag]
        """

        self._flags = flags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
