# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RunEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'driver_name': 'str',
        'driver_details': 'str',
        'vehicle_number': 'str',
        'vehicle_details': 'str',
        'owner_name': 'str',
        'crew_chief': 'str',
        'model_year': 'int',
        'model': 'str'
    }

    attribute_map = {
        'driver_name': 'driver_name',
        'driver_details': 'driver_details',
        'vehicle_number': 'vehicle_number',
        'vehicle_details': 'vehicle_details',
        'owner_name': 'owner_name',
        'crew_chief': 'crew_chief',
        'model_year': 'model_year',
        'model': 'model'
    }

    def __init__(self, driver_name=None, driver_details=None, vehicle_number=None, vehicle_details=None, owner_name=None, crew_chief=None, model_year=None, model=None):  # noqa: E501
        """RunEntry - a model defined in Swagger"""  # noqa: E501
        self._driver_name = None
        self._driver_details = None
        self._vehicle_number = None
        self._vehicle_details = None
        self._owner_name = None
        self._crew_chief = None
        self._model_year = None
        self._model = None
        self.discriminator = None
        if driver_name is not None:
            self.driver_name = driver_name
        if driver_details is not None:
            self.driver_details = driver_details
        if vehicle_number is not None:
            self.vehicle_number = vehicle_number
        if vehicle_details is not None:
            self.vehicle_details = vehicle_details
        if owner_name is not None:
            self.owner_name = owner_name
        if crew_chief is not None:
            self.crew_chief = crew_chief
        if model_year is not None:
            self.model_year = model_year
        if model is not None:
            self.model = model

    @property
    def driver_name(self):
        """Gets the driver_name of this RunEntry.  # noqa: E501

        Driver name  # noqa: E501

        :return: The driver_name of this RunEntry.  # noqa: E501
        :rtype: str
        """
        return self._driver_name

    @driver_name.setter
    def driver_name(self, driver_name):
        """Sets the driver_name of this RunEntry.

        Driver name  # noqa: E501

        :param driver_name: The driver_name of this RunEntry.  # noqa: E501
        :type: str
        """

        self._driver_name = driver_name

    @property
    def driver_details(self):
        """Gets the driver_details of this RunEntry.  # noqa: E501

        URL to driver details  # noqa: E501

        :return: The driver_details of this RunEntry.  # noqa: E501
        :rtype: str
        """
        return self._driver_details

    @driver_details.setter
    def driver_details(self, driver_details):
        """Sets the driver_details of this RunEntry.

        URL to driver details  # noqa: E501

        :param driver_details: The driver_details of this RunEntry.  # noqa: E501
        :type: str
        """

        self._driver_details = driver_details

    @property
    def vehicle_number(self):
        """Gets the vehicle_number of this RunEntry.  # noqa: E501

        Vehicle number  # noqa: E501

        :return: The vehicle_number of this RunEntry.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_number

    @vehicle_number.setter
    def vehicle_number(self, vehicle_number):
        """Sets the vehicle_number of this RunEntry.

        Vehicle number  # noqa: E501

        :param vehicle_number: The vehicle_number of this RunEntry.  # noqa: E501
        :type: str
        """

        self._vehicle_number = vehicle_number

    @property
    def vehicle_details(self):
        """Gets the vehicle_details of this RunEntry.  # noqa: E501

        URL to vehicle details  # noqa: E501

        :return: The vehicle_details of this RunEntry.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_details

    @vehicle_details.setter
    def vehicle_details(self, vehicle_details):
        """Sets the vehicle_details of this RunEntry.

        URL to vehicle details  # noqa: E501

        :param vehicle_details: The vehicle_details of this RunEntry.  # noqa: E501
        :type: str
        """

        self._vehicle_details = vehicle_details

    @property
    def owner_name(self):
        """Gets the owner_name of this RunEntry.  # noqa: E501

        Owner name  # noqa: E501

        :return: The owner_name of this RunEntry.  # noqa: E501
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this RunEntry.

        Owner name  # noqa: E501

        :param owner_name: The owner_name of this RunEntry.  # noqa: E501
        :type: str
        """

        self._owner_name = owner_name

    @property
    def crew_chief(self):
        """Gets the crew_chief of this RunEntry.  # noqa: E501

        Crew chief name  # noqa: E501

        :return: The crew_chief of this RunEntry.  # noqa: E501
        :rtype: str
        """
        return self._crew_chief

    @crew_chief.setter
    def crew_chief(self, crew_chief):
        """Sets the crew_chief of this RunEntry.

        Crew chief name  # noqa: E501

        :param crew_chief: The crew_chief of this RunEntry.  # noqa: E501
        :type: str
        """

        self._crew_chief = crew_chief

    @property
    def model_year(self):
        """Gets the model_year of this RunEntry.  # noqa: E501

        Vehicle model year  # noqa: E501

        :return: The model_year of this RunEntry.  # noqa: E501
        :rtype: int
        """
        return self._model_year

    @model_year.setter
    def model_year(self, model_year):
        """Sets the model_year of this RunEntry.

        Vehicle model year  # noqa: E501

        :param model_year: The model_year of this RunEntry.  # noqa: E501
        :type: int
        """

        self._model_year = model_year

    @property
    def model(self):
        """Gets the model of this RunEntry.  # noqa: E501

        Vehicle model  # noqa: E501

        :return: The model of this RunEntry.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this RunEntry.

        Vehicle model  # noqa: E501

        :param model: The model of this RunEntry.  # noqa: E501
        :type: str
        """

        self._model = model

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
