# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ScheduledActionSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'tracking_id': 'str',
        'scheduled_action_id': 'int',
        'value': 'int',
        'interval_in_seconds': 'int',
        'run_order': 'int',
        'last_run': 'datetime',
        'is_active': 'bool',
        'action_detail_id': 'int',
        'description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'tracking_id': 'tracking_id',
        'scheduled_action_id': 'ScheduledActionId',
        'value': 'Value',
        'interval_in_seconds': 'IntervalInSeconds',
        'run_order': 'RunOrder',
        'last_run': 'LastRun',
        'is_active': 'IsActive',
        'action_detail_id': 'ActionDetailId',
        'description': 'Description'
    }

    def __init__(self, id=None, tracking_id=None, scheduled_action_id=None, value=None, interval_in_seconds=None, run_order=None, last_run=None, is_active=True, action_detail_id=None, description=None):  # noqa: E501
        """ScheduledActionSchedule - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._tracking_id = None
        self._scheduled_action_id = None
        self._value = None
        self._interval_in_seconds = None
        self._run_order = None
        self._last_run = None
        self._is_active = None
        self._action_detail_id = None
        self._description = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if tracking_id is not None:
            self.tracking_id = tracking_id
        if scheduled_action_id is not None:
            self.scheduled_action_id = scheduled_action_id
        if value is not None:
            self.value = value
        self.interval_in_seconds = interval_in_seconds
        if run_order is not None:
            self.run_order = run_order
        if last_run is not None:
            self.last_run = last_run
        if is_active is not None:
            self.is_active = is_active
        if action_detail_id is not None:
            self.action_detail_id = action_detail_id
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this ScheduledActionSchedule.  # noqa: E501


        :return: The id of this ScheduledActionSchedule.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScheduledActionSchedule.


        :param id: The id of this ScheduledActionSchedule.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tracking_id(self):
        """Gets the tracking_id of this ScheduledActionSchedule.  # noqa: E501


        :return: The tracking_id of this ScheduledActionSchedule.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this ScheduledActionSchedule.


        :param tracking_id: The tracking_id of this ScheduledActionSchedule.  # noqa: E501
        :type: str
        """

        self._tracking_id = tracking_id

    @property
    def scheduled_action_id(self):
        """Gets the scheduled_action_id of this ScheduledActionSchedule.  # noqa: E501


        :return: The scheduled_action_id of this ScheduledActionSchedule.  # noqa: E501
        :rtype: int
        """
        return self._scheduled_action_id

    @scheduled_action_id.setter
    def scheduled_action_id(self, scheduled_action_id):
        """Sets the scheduled_action_id of this ScheduledActionSchedule.


        :param scheduled_action_id: The scheduled_action_id of this ScheduledActionSchedule.  # noqa: E501
        :type: int
        """

        self._scheduled_action_id = scheduled_action_id

    @property
    def value(self):
        """Gets the value of this ScheduledActionSchedule.  # noqa: E501


        :return: The value of this ScheduledActionSchedule.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ScheduledActionSchedule.


        :param value: The value of this ScheduledActionSchedule.  # noqa: E501
        :type: int
        """

        self._value = value

    @property
    def interval_in_seconds(self):
        """Gets the interval_in_seconds of this ScheduledActionSchedule.  # noqa: E501


        :return: The interval_in_seconds of this ScheduledActionSchedule.  # noqa: E501
        :rtype: int
        """
        return self._interval_in_seconds

    @interval_in_seconds.setter
    def interval_in_seconds(self, interval_in_seconds):
        """Sets the interval_in_seconds of this ScheduledActionSchedule.


        :param interval_in_seconds: The interval_in_seconds of this ScheduledActionSchedule.  # noqa: E501
        :type: int
        """
        if interval_in_seconds is None:
            raise ValueError("Invalid value for `interval_in_seconds`, must not be `None`")  # noqa: E501

        self._interval_in_seconds = interval_in_seconds

    @property
    def run_order(self):
        """Gets the run_order of this ScheduledActionSchedule.  # noqa: E501


        :return: The run_order of this ScheduledActionSchedule.  # noqa: E501
        :rtype: int
        """
        return self._run_order

    @run_order.setter
    def run_order(self, run_order):
        """Sets the run_order of this ScheduledActionSchedule.


        :param run_order: The run_order of this ScheduledActionSchedule.  # noqa: E501
        :type: int
        """

        self._run_order = run_order

    @property
    def last_run(self):
        """Gets the last_run of this ScheduledActionSchedule.  # noqa: E501


        :return: The last_run of this ScheduledActionSchedule.  # noqa: E501
        :rtype: datetime
        """
        return self._last_run

    @last_run.setter
    def last_run(self, last_run):
        """Sets the last_run of this ScheduledActionSchedule.


        :param last_run: The last_run of this ScheduledActionSchedule.  # noqa: E501
        :type: datetime
        """

        self._last_run = last_run

    @property
    def is_active(self):
        """Gets the is_active of this ScheduledActionSchedule.  # noqa: E501


        :return: The is_active of this ScheduledActionSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ScheduledActionSchedule.


        :param is_active: The is_active of this ScheduledActionSchedule.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def action_detail_id(self):
        """Gets the action_detail_id of this ScheduledActionSchedule.  # noqa: E501


        :return: The action_detail_id of this ScheduledActionSchedule.  # noqa: E501
        :rtype: int
        """
        return self._action_detail_id

    @action_detail_id.setter
    def action_detail_id(self, action_detail_id):
        """Sets the action_detail_id of this ScheduledActionSchedule.


        :param action_detail_id: The action_detail_id of this ScheduledActionSchedule.  # noqa: E501
        :type: int
        """

        self._action_detail_id = action_detail_id

    @property
    def description(self):
        """Gets the description of this ScheduledActionSchedule.  # noqa: E501


        :return: The description of this ScheduledActionSchedule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScheduledActionSchedule.


        :param description: The description of this ScheduledActionSchedule.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduledActionSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduledActionSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
