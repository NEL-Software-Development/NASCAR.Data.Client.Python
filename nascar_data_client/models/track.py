# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Track(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'history_track_id': 'int',
        'name': 'str',
        'owner': 'str',
        'surface': 'str',
        'type': 'str',
        'banking': 'str',
        'description': 'str',
        'city': 'str',
        'state': 'str',
        'frontstretch_length': 'int',
        'backstretch_length': 'int',
        'year_built': 'int',
        'length': 'float',
        'caution_car_speed': 'int',
        'logo': 'str'
    }

    attribute_map = {
        'id': 'id',
        'history_track_id': 'history_track_id',
        'name': 'name',
        'owner': 'owner',
        'surface': 'surface',
        'type': 'type',
        'banking': 'banking',
        'description': 'description',
        'city': 'city',
        'state': 'state',
        'frontstretch_length': 'frontstretch_length',
        'backstretch_length': 'backstretch_length',
        'year_built': 'year_built',
        'length': 'length',
        'caution_car_speed': 'caution_car_speed',
        'logo': 'logo'
    }

    def __init__(self, id=None, history_track_id=None, name=None, owner=None, surface=None, type=None, banking=None, description=None, city=None, state=None, frontstretch_length=None, backstretch_length=None, year_built=None, length=None, caution_car_speed=None, logo=None):  # noqa: E501
        """Track - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._history_track_id = None
        self._name = None
        self._owner = None
        self._surface = None
        self._type = None
        self._banking = None
        self._description = None
        self._city = None
        self._state = None
        self._frontstretch_length = None
        self._backstretch_length = None
        self._year_built = None
        self._length = None
        self._caution_car_speed = None
        self._logo = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if history_track_id is not None:
            self.history_track_id = history_track_id
        if name is not None:
            self.name = name
        if owner is not None:
            self.owner = owner
        if surface is not None:
            self.surface = surface
        if type is not None:
            self.type = type
        if banking is not None:
            self.banking = banking
        if description is not None:
            self.description = description
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if frontstretch_length is not None:
            self.frontstretch_length = frontstretch_length
        if backstretch_length is not None:
            self.backstretch_length = backstretch_length
        if year_built is not None:
            self.year_built = year_built
        if length is not None:
            self.length = length
        if caution_car_speed is not None:
            self.caution_car_speed = caution_car_speed
        if logo is not None:
            self.logo = logo

    @property
    def id(self):
        """Gets the id of this Track.  # noqa: E501


        :return: The id of this Track.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Track.


        :param id: The id of this Track.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def history_track_id(self):
        """Gets the history_track_id of this Track.  # noqa: E501

        History track id  # noqa: E501

        :return: The history_track_id of this Track.  # noqa: E501
        :rtype: int
        """
        return self._history_track_id

    @history_track_id.setter
    def history_track_id(self, history_track_id):
        """Sets the history_track_id of this Track.

        History track id  # noqa: E501

        :param history_track_id: The history_track_id of this Track.  # noqa: E501
        :type: int
        """

        self._history_track_id = history_track_id

    @property
    def name(self):
        """Gets the name of this Track.  # noqa: E501

        The name of the track  # noqa: E501

        :return: The name of this Track.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Track.

        The name of the track  # noqa: E501

        :param name: The name of this Track.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this Track.  # noqa: E501

        The owner of the track  # noqa: E501

        :return: The owner of this Track.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Track.

        The owner of the track  # noqa: E501

        :param owner: The owner of this Track.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def surface(self):
        """Gets the surface of this Track.  # noqa: E501

        The type of track surface  # noqa: E501

        :return: The surface of this Track.  # noqa: E501
        :rtype: str
        """
        return self._surface

    @surface.setter
    def surface(self, surface):
        """Sets the surface of this Track.

        The type of track surface  # noqa: E501

        :param surface: The surface of this Track.  # noqa: E501
        :type: str
        """

        self._surface = surface

    @property
    def type(self):
        """Gets the type of this Track.  # noqa: E501

        The type of track  # noqa: E501

        :return: The type of this Track.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Track.

        The type of track  # noqa: E501

        :param type: The type of this Track.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def banking(self):
        """Gets the banking of this Track.  # noqa: E501

        Track banking  # noqa: E501

        :return: The banking of this Track.  # noqa: E501
        :rtype: str
        """
        return self._banking

    @banking.setter
    def banking(self, banking):
        """Sets the banking of this Track.

        Track banking  # noqa: E501

        :param banking: The banking of this Track.  # noqa: E501
        :type: str
        """

        self._banking = banking

    @property
    def description(self):
        """Gets the description of this Track.  # noqa: E501

        Description of the track  # noqa: E501

        :return: The description of this Track.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Track.

        Description of the track  # noqa: E501

        :param description: The description of this Track.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def city(self):
        """Gets the city of this Track.  # noqa: E501

        The city where the track is located  # noqa: E501

        :return: The city of this Track.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Track.

        The city where the track is located  # noqa: E501

        :param city: The city of this Track.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this Track.  # noqa: E501

        The state where the track is located  # noqa: E501

        :return: The state of this Track.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Track.

        The state where the track is located  # noqa: E501

        :param state: The state of this Track.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def frontstretch_length(self):
        """Gets the frontstretch_length of this Track.  # noqa: E501

        The length of the track's frontstretch in miles  # noqa: E501

        :return: The frontstretch_length of this Track.  # noqa: E501
        :rtype: int
        """
        return self._frontstretch_length

    @frontstretch_length.setter
    def frontstretch_length(self, frontstretch_length):
        """Sets the frontstretch_length of this Track.

        The length of the track's frontstretch in miles  # noqa: E501

        :param frontstretch_length: The frontstretch_length of this Track.  # noqa: E501
        :type: int
        """

        self._frontstretch_length = frontstretch_length

    @property
    def backstretch_length(self):
        """Gets the backstretch_length of this Track.  # noqa: E501

        The length of the track's backstretch in miles  # noqa: E501

        :return: The backstretch_length of this Track.  # noqa: E501
        :rtype: int
        """
        return self._backstretch_length

    @backstretch_length.setter
    def backstretch_length(self, backstretch_length):
        """Sets the backstretch_length of this Track.

        The length of the track's backstretch in miles  # noqa: E501

        :param backstretch_length: The backstretch_length of this Track.  # noqa: E501
        :type: int
        """

        self._backstretch_length = backstretch_length

    @property
    def year_built(self):
        """Gets the year_built of this Track.  # noqa: E501

        The year the track was built  # noqa: E501

        :return: The year_built of this Track.  # noqa: E501
        :rtype: int
        """
        return self._year_built

    @year_built.setter
    def year_built(self, year_built):
        """Sets the year_built of this Track.

        The year the track was built  # noqa: E501

        :param year_built: The year_built of this Track.  # noqa: E501
        :type: int
        """

        self._year_built = year_built

    @property
    def length(self):
        """Gets the length of this Track.  # noqa: E501

        The track's total length in miles  # noqa: E501

        :return: The length of this Track.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Track.

        The track's total length in miles  # noqa: E501

        :param length: The length of this Track.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def caution_car_speed(self):
        """Gets the caution_car_speed of this Track.  # noqa: E501

        The track's caution speed  # noqa: E501

        :return: The caution_car_speed of this Track.  # noqa: E501
        :rtype: int
        """
        return self._caution_car_speed

    @caution_car_speed.setter
    def caution_car_speed(self, caution_car_speed):
        """Sets the caution_car_speed of this Track.

        The track's caution speed  # noqa: E501

        :param caution_car_speed: The caution_car_speed of this Track.  # noqa: E501
        :type: int
        """

        self._caution_car_speed = caution_car_speed

    @property
    def logo(self):
        """Gets the logo of this Track.  # noqa: E501

        The URL of the track logo  # noqa: E501

        :return: The logo of this Track.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Track.

        The URL of the track logo  # noqa: E501

        :param logo: The logo of this Track.  # noqa: E501
        :type: str
        """

        self._logo = logo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Track, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Track):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
