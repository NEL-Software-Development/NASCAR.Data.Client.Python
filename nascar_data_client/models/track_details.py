# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TrackDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'track': 'Track',
        'track_configuration': 'TrackConfiguration',
        'track_paths': 'list[TrackPath]',
        'pit_paths': 'list[PitPath]'
    }

    attribute_map = {
        'track': 'Track',
        'track_configuration': 'Track_Configuration',
        'track_paths': 'Track_Paths',
        'pit_paths': 'Pit_Paths'
    }

    def __init__(self, track=None, track_configuration=None, track_paths=None, pit_paths=None):  # noqa: E501
        """TrackDetails - a model defined in Swagger"""  # noqa: E501
        self._track = None
        self._track_configuration = None
        self._track_paths = None
        self._pit_paths = None
        self.discriminator = None
        if track is not None:
            self.track = track
        if track_configuration is not None:
            self.track_configuration = track_configuration
        if track_paths is not None:
            self.track_paths = track_paths
        if pit_paths is not None:
            self.pit_paths = pit_paths

    @property
    def track(self):
        """Gets the track of this TrackDetails.  # noqa: E501


        :return: The track of this TrackDetails.  # noqa: E501
        :rtype: Track
        """
        return self._track

    @track.setter
    def track(self, track):
        """Sets the track of this TrackDetails.


        :param track: The track of this TrackDetails.  # noqa: E501
        :type: Track
        """

        self._track = track

    @property
    def track_configuration(self):
        """Gets the track_configuration of this TrackDetails.  # noqa: E501


        :return: The track_configuration of this TrackDetails.  # noqa: E501
        :rtype: TrackConfiguration
        """
        return self._track_configuration

    @track_configuration.setter
    def track_configuration(self, track_configuration):
        """Sets the track_configuration of this TrackDetails.


        :param track_configuration: The track_configuration of this TrackDetails.  # noqa: E501
        :type: TrackConfiguration
        """

        self._track_configuration = track_configuration

    @property
    def track_paths(self):
        """Gets the track_paths of this TrackDetails.  # noqa: E501


        :return: The track_paths of this TrackDetails.  # noqa: E501
        :rtype: list[TrackPath]
        """
        return self._track_paths

    @track_paths.setter
    def track_paths(self, track_paths):
        """Sets the track_paths of this TrackDetails.


        :param track_paths: The track_paths of this TrackDetails.  # noqa: E501
        :type: list[TrackPath]
        """

        self._track_paths = track_paths

    @property
    def pit_paths(self):
        """Gets the pit_paths of this TrackDetails.  # noqa: E501


        :return: The pit_paths of this TrackDetails.  # noqa: E501
        :rtype: list[PitPath]
        """
        return self._pit_paths

    @pit_paths.setter
    def pit_paths(self, pit_paths):
        """Sets the pit_paths of this TrackDetails.


        :param pit_paths: The pit_paths of this TrackDetails.  # noqa: E501
        :type: list[PitPath]
        """

        self._pit_paths = pit_paths

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
