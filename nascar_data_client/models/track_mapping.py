# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TrackMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'publish_state': 'PublishState',
        'id': 'int',
        'tracking_id': 'str',
        'in_data_warehouse': 'bool',
        'manually_set': 'bool',
        'last_update': 'datetime',
        'last_updated_by': 'str',
        'name': 'str',
        'owner': 'str',
        'surface': 'str',
        'type': 'str',
        'banking': 'str',
        'description': 'str',
        'city': 'str',
        'state': 'str',
        'front_stretch_length': 'int',
        'back_stretch_length': 'int',
        'year_built': 'int',
        'length': 'float',
        'caution_car_speed': 'int',
        'logo': 'str',
        'history_track_id': 'int',
        'nascar_one_track_id': 'int'
    }

    attribute_map = {
        'publish_state': 'PublishState',
        'id': 'id',
        'tracking_id': 'tracking_id',
        'in_data_warehouse': 'InDataWarehouse',
        'manually_set': 'Manually_Set',
        'last_update': 'LastUpdate',
        'last_updated_by': 'LastUpdatedBy',
        'name': 'Name',
        'owner': 'Owner',
        'surface': 'Surface',
        'type': 'Type',
        'banking': 'Banking',
        'description': 'Description',
        'city': 'City',
        'state': 'State',
        'front_stretch_length': 'FrontStretchLength',
        'back_stretch_length': 'BackStretchLength',
        'year_built': 'YearBuilt',
        'length': 'Length',
        'caution_car_speed': 'CautionCarSpeed',
        'logo': 'Logo',
        'history_track_id': 'History_TrackId',
        'nascar_one_track_id': 'NascarOne_TrackId'
    }

    def __init__(self, publish_state=None, id=None, tracking_id=None, in_data_warehouse=None, manually_set=None, last_update=None, last_updated_by=None, name=None, owner=None, surface=None, type=None, banking=None, description=None, city=None, state=None, front_stretch_length=None, back_stretch_length=None, year_built=None, length=None, caution_car_speed=None, logo=None, history_track_id=None, nascar_one_track_id=None):  # noqa: E501
        """TrackMapping - a model defined in Swagger"""  # noqa: E501
        self._publish_state = None
        self._id = None
        self._tracking_id = None
        self._in_data_warehouse = None
        self._manually_set = None
        self._last_update = None
        self._last_updated_by = None
        self._name = None
        self._owner = None
        self._surface = None
        self._type = None
        self._banking = None
        self._description = None
        self._city = None
        self._state = None
        self._front_stretch_length = None
        self._back_stretch_length = None
        self._year_built = None
        self._length = None
        self._caution_car_speed = None
        self._logo = None
        self._history_track_id = None
        self._nascar_one_track_id = None
        self.discriminator = None
        if publish_state is not None:
            self.publish_state = publish_state
        if id is not None:
            self.id = id
        if tracking_id is not None:
            self.tracking_id = tracking_id
        if in_data_warehouse is not None:
            self.in_data_warehouse = in_data_warehouse
        if manually_set is not None:
            self.manually_set = manually_set
        if last_update is not None:
            self.last_update = last_update
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if name is not None:
            self.name = name
        if owner is not None:
            self.owner = owner
        if surface is not None:
            self.surface = surface
        if type is not None:
            self.type = type
        if banking is not None:
            self.banking = banking
        if description is not None:
            self.description = description
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if front_stretch_length is not None:
            self.front_stretch_length = front_stretch_length
        if back_stretch_length is not None:
            self.back_stretch_length = back_stretch_length
        if year_built is not None:
            self.year_built = year_built
        if length is not None:
            self.length = length
        if caution_car_speed is not None:
            self.caution_car_speed = caution_car_speed
        if logo is not None:
            self.logo = logo
        if history_track_id is not None:
            self.history_track_id = history_track_id
        if nascar_one_track_id is not None:
            self.nascar_one_track_id = nascar_one_track_id

    @property
    def publish_state(self):
        """Gets the publish_state of this TrackMapping.  # noqa: E501


        :return: The publish_state of this TrackMapping.  # noqa: E501
        :rtype: PublishState
        """
        return self._publish_state

    @publish_state.setter
    def publish_state(self, publish_state):
        """Sets the publish_state of this TrackMapping.


        :param publish_state: The publish_state of this TrackMapping.  # noqa: E501
        :type: PublishState
        """

        self._publish_state = publish_state

    @property
    def id(self):
        """Gets the id of this TrackMapping.  # noqa: E501


        :return: The id of this TrackMapping.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrackMapping.


        :param id: The id of this TrackMapping.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tracking_id(self):
        """Gets the tracking_id of this TrackMapping.  # noqa: E501


        :return: The tracking_id of this TrackMapping.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this TrackMapping.


        :param tracking_id: The tracking_id of this TrackMapping.  # noqa: E501
        :type: str
        """

        self._tracking_id = tracking_id

    @property
    def in_data_warehouse(self):
        """Gets the in_data_warehouse of this TrackMapping.  # noqa: E501


        :return: The in_data_warehouse of this TrackMapping.  # noqa: E501
        :rtype: bool
        """
        return self._in_data_warehouse

    @in_data_warehouse.setter
    def in_data_warehouse(self, in_data_warehouse):
        """Sets the in_data_warehouse of this TrackMapping.


        :param in_data_warehouse: The in_data_warehouse of this TrackMapping.  # noqa: E501
        :type: bool
        """

        self._in_data_warehouse = in_data_warehouse

    @property
    def manually_set(self):
        """Gets the manually_set of this TrackMapping.  # noqa: E501


        :return: The manually_set of this TrackMapping.  # noqa: E501
        :rtype: bool
        """
        return self._manually_set

    @manually_set.setter
    def manually_set(self, manually_set):
        """Sets the manually_set of this TrackMapping.


        :param manually_set: The manually_set of this TrackMapping.  # noqa: E501
        :type: bool
        """

        self._manually_set = manually_set

    @property
    def last_update(self):
        """Gets the last_update of this TrackMapping.  # noqa: E501


        :return: The last_update of this TrackMapping.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this TrackMapping.


        :param last_update: The last_update of this TrackMapping.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this TrackMapping.  # noqa: E501


        :return: The last_updated_by of this TrackMapping.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this TrackMapping.


        :param last_updated_by: The last_updated_by of this TrackMapping.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def name(self):
        """Gets the name of this TrackMapping.  # noqa: E501


        :return: The name of this TrackMapping.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrackMapping.


        :param name: The name of this TrackMapping.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this TrackMapping.  # noqa: E501


        :return: The owner of this TrackMapping.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this TrackMapping.


        :param owner: The owner of this TrackMapping.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def surface(self):
        """Gets the surface of this TrackMapping.  # noqa: E501


        :return: The surface of this TrackMapping.  # noqa: E501
        :rtype: str
        """
        return self._surface

    @surface.setter
    def surface(self, surface):
        """Sets the surface of this TrackMapping.


        :param surface: The surface of this TrackMapping.  # noqa: E501
        :type: str
        """

        self._surface = surface

    @property
    def type(self):
        """Gets the type of this TrackMapping.  # noqa: E501


        :return: The type of this TrackMapping.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TrackMapping.


        :param type: The type of this TrackMapping.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def banking(self):
        """Gets the banking of this TrackMapping.  # noqa: E501


        :return: The banking of this TrackMapping.  # noqa: E501
        :rtype: str
        """
        return self._banking

    @banking.setter
    def banking(self, banking):
        """Sets the banking of this TrackMapping.


        :param banking: The banking of this TrackMapping.  # noqa: E501
        :type: str
        """

        self._banking = banking

    @property
    def description(self):
        """Gets the description of this TrackMapping.  # noqa: E501


        :return: The description of this TrackMapping.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TrackMapping.


        :param description: The description of this TrackMapping.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def city(self):
        """Gets the city of this TrackMapping.  # noqa: E501


        :return: The city of this TrackMapping.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this TrackMapping.


        :param city: The city of this TrackMapping.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this TrackMapping.  # noqa: E501


        :return: The state of this TrackMapping.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TrackMapping.


        :param state: The state of this TrackMapping.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def front_stretch_length(self):
        """Gets the front_stretch_length of this TrackMapping.  # noqa: E501


        :return: The front_stretch_length of this TrackMapping.  # noqa: E501
        :rtype: int
        """
        return self._front_stretch_length

    @front_stretch_length.setter
    def front_stretch_length(self, front_stretch_length):
        """Sets the front_stretch_length of this TrackMapping.


        :param front_stretch_length: The front_stretch_length of this TrackMapping.  # noqa: E501
        :type: int
        """

        self._front_stretch_length = front_stretch_length

    @property
    def back_stretch_length(self):
        """Gets the back_stretch_length of this TrackMapping.  # noqa: E501


        :return: The back_stretch_length of this TrackMapping.  # noqa: E501
        :rtype: int
        """
        return self._back_stretch_length

    @back_stretch_length.setter
    def back_stretch_length(self, back_stretch_length):
        """Sets the back_stretch_length of this TrackMapping.


        :param back_stretch_length: The back_stretch_length of this TrackMapping.  # noqa: E501
        :type: int
        """

        self._back_stretch_length = back_stretch_length

    @property
    def year_built(self):
        """Gets the year_built of this TrackMapping.  # noqa: E501


        :return: The year_built of this TrackMapping.  # noqa: E501
        :rtype: int
        """
        return self._year_built

    @year_built.setter
    def year_built(self, year_built):
        """Sets the year_built of this TrackMapping.


        :param year_built: The year_built of this TrackMapping.  # noqa: E501
        :type: int
        """

        self._year_built = year_built

    @property
    def length(self):
        """Gets the length of this TrackMapping.  # noqa: E501


        :return: The length of this TrackMapping.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this TrackMapping.


        :param length: The length of this TrackMapping.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def caution_car_speed(self):
        """Gets the caution_car_speed of this TrackMapping.  # noqa: E501


        :return: The caution_car_speed of this TrackMapping.  # noqa: E501
        :rtype: int
        """
        return self._caution_car_speed

    @caution_car_speed.setter
    def caution_car_speed(self, caution_car_speed):
        """Sets the caution_car_speed of this TrackMapping.


        :param caution_car_speed: The caution_car_speed of this TrackMapping.  # noqa: E501
        :type: int
        """

        self._caution_car_speed = caution_car_speed

    @property
    def logo(self):
        """Gets the logo of this TrackMapping.  # noqa: E501


        :return: The logo of this TrackMapping.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this TrackMapping.


        :param logo: The logo of this TrackMapping.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def history_track_id(self):
        """Gets the history_track_id of this TrackMapping.  # noqa: E501


        :return: The history_track_id of this TrackMapping.  # noqa: E501
        :rtype: int
        """
        return self._history_track_id

    @history_track_id.setter
    def history_track_id(self, history_track_id):
        """Sets the history_track_id of this TrackMapping.


        :param history_track_id: The history_track_id of this TrackMapping.  # noqa: E501
        :type: int
        """

        self._history_track_id = history_track_id

    @property
    def nascar_one_track_id(self):
        """Gets the nascar_one_track_id of this TrackMapping.  # noqa: E501


        :return: The nascar_one_track_id of this TrackMapping.  # noqa: E501
        :rtype: int
        """
        return self._nascar_one_track_id

    @nascar_one_track_id.setter
    def nascar_one_track_id(self, nascar_one_track_id):
        """Sets the nascar_one_track_id of this TrackMapping.


        :param nascar_one_track_id: The nascar_one_track_id of this TrackMapping.  # noqa: E501
        :type: int
        """

        self._nascar_one_track_id = nascar_one_track_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
