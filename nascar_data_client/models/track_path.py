# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TrackPath(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'track_configuration_id': 'int',
        'track_id': 'int',
        'name': 'str',
        'ordinal_sort_order': 'int',
        'path_data': 'str',
        'length': 'int'
    }

    attribute_map = {
        'id': 'id',
        'track_configuration_id': 'track_configuration_id',
        'track_id': 'track_id',
        'name': 'name',
        'ordinal_sort_order': 'ordinal_sort_order',
        'path_data': 'path_data',
        'length': 'length'
    }

    def __init__(self, id=None, track_configuration_id=None, track_id=None, name=None, ordinal_sort_order=None, path_data=None, length=None):  # noqa: E501
        """TrackPath - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._track_configuration_id = None
        self._track_id = None
        self._name = None
        self._ordinal_sort_order = None
        self._path_data = None
        self._length = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if track_configuration_id is not None:
            self.track_configuration_id = track_configuration_id
        if track_id is not None:
            self.track_id = track_id
        if name is not None:
            self.name = name
        if ordinal_sort_order is not None:
            self.ordinal_sort_order = ordinal_sort_order
        if path_data is not None:
            self.path_data = path_data
        if length is not None:
            self.length = length

    @property
    def id(self):
        """Gets the id of this TrackPath.  # noqa: E501

        Gets or sets the unique identifier for the track path.  # noqa: E501

        :return: The id of this TrackPath.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrackPath.

        Gets or sets the unique identifier for the track path.  # noqa: E501

        :param id: The id of this TrackPath.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def track_configuration_id(self):
        """Gets the track_configuration_id of this TrackPath.  # noqa: E501

        Gets or sets the identifier of the associated track configuration.  # noqa: E501

        :return: The track_configuration_id of this TrackPath.  # noqa: E501
        :rtype: int
        """
        return self._track_configuration_id

    @track_configuration_id.setter
    def track_configuration_id(self, track_configuration_id):
        """Sets the track_configuration_id of this TrackPath.

        Gets or sets the identifier of the associated track configuration.  # noqa: E501

        :param track_configuration_id: The track_configuration_id of this TrackPath.  # noqa: E501
        :type: int
        """

        self._track_configuration_id = track_configuration_id

    @property
    def track_id(self):
        """Gets the track_id of this TrackPath.  # noqa: E501

        Gets or sets the unique identifier for the track.  # noqa: E501

        :return: The track_id of this TrackPath.  # noqa: E501
        :rtype: int
        """
        return self._track_id

    @track_id.setter
    def track_id(self, track_id):
        """Sets the track_id of this TrackPath.

        Gets or sets the unique identifier for the track.  # noqa: E501

        :param track_id: The track_id of this TrackPath.  # noqa: E501
        :type: int
        """

        self._track_id = track_id

    @property
    def name(self):
        """Gets the name of this TrackPath.  # noqa: E501

        Gets or sets the name of the track path.  # noqa: E501

        :return: The name of this TrackPath.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrackPath.

        Gets or sets the name of the track path.  # noqa: E501

        :param name: The name of this TrackPath.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ordinal_sort_order(self):
        """Gets the ordinal_sort_order of this TrackPath.  # noqa: E501

        Gets or sets the ordinal sort order of the path.  # noqa: E501

        :return: The ordinal_sort_order of this TrackPath.  # noqa: E501
        :rtype: int
        """
        return self._ordinal_sort_order

    @ordinal_sort_order.setter
    def ordinal_sort_order(self, ordinal_sort_order):
        """Sets the ordinal_sort_order of this TrackPath.

        Gets or sets the ordinal sort order of the path.  # noqa: E501

        :param ordinal_sort_order: The ordinal_sort_order of this TrackPath.  # noqa: E501
        :type: int
        """

        self._ordinal_sort_order = ordinal_sort_order

    @property
    def path_data(self):
        """Gets the path_data of this TrackPath.  # noqa: E501

        Gets or sets the path data.  # noqa: E501

        :return: The path_data of this TrackPath.  # noqa: E501
        :rtype: str
        """
        return self._path_data

    @path_data.setter
    def path_data(self, path_data):
        """Sets the path_data of this TrackPath.

        Gets or sets the path data.  # noqa: E501

        :param path_data: The path_data of this TrackPath.  # noqa: E501
        :type: str
        """

        self._path_data = path_data

    @property
    def length(self):
        """Gets the length of this TrackPath.  # noqa: E501

        Gets or sets the length of the path.  # noqa: E501

        :return: The length of this TrackPath.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this TrackPath.

        Gets or sets the length of the path.  # noqa: E501

        :param length: The length of this TrackPath.  # noqa: E501
        :type: int
        """

        self._length = length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackPath, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackPath):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
