# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class VehicleMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'season': 'int',
        'series_id': 'int',
        'number': 'str',
        'badge': 'str',
        'publish_state': 'PublishState',
        'id': 'int',
        'manually_set': 'bool',
        'last_update': 'datetime',
        'last_updated_by': 'str',
        'tracking_id': 'str'
    }

    attribute_map = {
        'season': 'Season',
        'series_id': 'SeriesId',
        'number': 'Number',
        'badge': 'Badge',
        'publish_state': 'PublishState',
        'id': 'id',
        'manually_set': 'Manually_Set',
        'last_update': 'LastUpdate',
        'last_updated_by': 'LastUpdatedBy',
        'tracking_id': 'tracking_id'
    }

    def __init__(self, season=None, series_id=None, number=None, badge=None, publish_state=None, id=None, manually_set=None, last_update=None, last_updated_by=None, tracking_id=None):  # noqa: E501
        """VehicleMapping - a model defined in Swagger"""  # noqa: E501
        self._season = None
        self._series_id = None
        self._number = None
        self._badge = None
        self._publish_state = None
        self._id = None
        self._manually_set = None
        self._last_update = None
        self._last_updated_by = None
        self._tracking_id = None
        self.discriminator = None
        if season is not None:
            self.season = season
        if series_id is not None:
            self.series_id = series_id
        if number is not None:
            self.number = number
        if badge is not None:
            self.badge = badge
        if publish_state is not None:
            self.publish_state = publish_state
        if id is not None:
            self.id = id
        if manually_set is not None:
            self.manually_set = manually_set
        if last_update is not None:
            self.last_update = last_update
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if tracking_id is not None:
            self.tracking_id = tracking_id

    @property
    def season(self):
        """Gets the season of this VehicleMapping.  # noqa: E501


        :return: The season of this VehicleMapping.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this VehicleMapping.


        :param season: The season of this VehicleMapping.  # noqa: E501
        :type: int
        """

        self._season = season

    @property
    def series_id(self):
        """Gets the series_id of this VehicleMapping.  # noqa: E501


        :return: The series_id of this VehicleMapping.  # noqa: E501
        :rtype: int
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """Sets the series_id of this VehicleMapping.


        :param series_id: The series_id of this VehicleMapping.  # noqa: E501
        :type: int
        """

        self._series_id = series_id

    @property
    def number(self):
        """Gets the number of this VehicleMapping.  # noqa: E501


        :return: The number of this VehicleMapping.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this VehicleMapping.


        :param number: The number of this VehicleMapping.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def badge(self):
        """Gets the badge of this VehicleMapping.  # noqa: E501


        :return: The badge of this VehicleMapping.  # noqa: E501
        :rtype: str
        """
        return self._badge

    @badge.setter
    def badge(self, badge):
        """Sets the badge of this VehicleMapping.


        :param badge: The badge of this VehicleMapping.  # noqa: E501
        :type: str
        """

        self._badge = badge

    @property
    def publish_state(self):
        """Gets the publish_state of this VehicleMapping.  # noqa: E501


        :return: The publish_state of this VehicleMapping.  # noqa: E501
        :rtype: PublishState
        """
        return self._publish_state

    @publish_state.setter
    def publish_state(self, publish_state):
        """Sets the publish_state of this VehicleMapping.


        :param publish_state: The publish_state of this VehicleMapping.  # noqa: E501
        :type: PublishState
        """

        self._publish_state = publish_state

    @property
    def id(self):
        """Gets the id of this VehicleMapping.  # noqa: E501


        :return: The id of this VehicleMapping.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VehicleMapping.


        :param id: The id of this VehicleMapping.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def manually_set(self):
        """Gets the manually_set of this VehicleMapping.  # noqa: E501


        :return: The manually_set of this VehicleMapping.  # noqa: E501
        :rtype: bool
        """
        return self._manually_set

    @manually_set.setter
    def manually_set(self, manually_set):
        """Sets the manually_set of this VehicleMapping.


        :param manually_set: The manually_set of this VehicleMapping.  # noqa: E501
        :type: bool
        """

        self._manually_set = manually_set

    @property
    def last_update(self):
        """Gets the last_update of this VehicleMapping.  # noqa: E501


        :return: The last_update of this VehicleMapping.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this VehicleMapping.


        :param last_update: The last_update of this VehicleMapping.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this VehicleMapping.  # noqa: E501


        :return: The last_updated_by of this VehicleMapping.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this VehicleMapping.


        :param last_updated_by: The last_updated_by of this VehicleMapping.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def tracking_id(self):
        """Gets the tracking_id of this VehicleMapping.  # noqa: E501


        :return: The tracking_id of this VehicleMapping.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this VehicleMapping.


        :param tracking_id: The tracking_id of this VehicleMapping.  # noqa: E501
        :type: str
        """

        self._tracking_id = tracking_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VehicleMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
