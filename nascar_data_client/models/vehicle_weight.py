# coding: utf-8

"""
    NASCAR.Data.API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class VehicleWeight(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inspection_type': 'str',
        'vehicle_number': 'str',
        'adjustment': 'int',
        'cross_weight': 'int',
        'left_front': 'int',
        'left_rear': 'int',
        'left_side': 'int',
        'nose': 'int',
        'rear': 'int',
        'right_front': 'int',
        'right_rear': 'int',
        'right_side': 'int',
        'total_weight': 'int',
        'passed': 'bool'
    }

    attribute_map = {
        'inspection_type': 'inspection_type',
        'vehicle_number': 'vehicle_number',
        'adjustment': 'adjustment',
        'cross_weight': 'cross_weight',
        'left_front': 'left_front',
        'left_rear': 'left_rear',
        'left_side': 'left_side',
        'nose': 'nose',
        'rear': 'rear',
        'right_front': 'right_front',
        'right_rear': 'right_rear',
        'right_side': 'right_side',
        'total_weight': 'total_weight',
        'passed': 'passed'
    }

    def __init__(self, inspection_type=None, vehicle_number=None, adjustment=None, cross_weight=None, left_front=None, left_rear=None, left_side=None, nose=None, rear=None, right_front=None, right_rear=None, right_side=None, total_weight=None, passed=None):  # noqa: E501
        """VehicleWeight - a model defined in Swagger"""  # noqa: E501
        self._inspection_type = None
        self._vehicle_number = None
        self._adjustment = None
        self._cross_weight = None
        self._left_front = None
        self._left_rear = None
        self._left_side = None
        self._nose = None
        self._rear = None
        self._right_front = None
        self._right_rear = None
        self._right_side = None
        self._total_weight = None
        self._passed = None
        self.discriminator = None
        if inspection_type is not None:
            self.inspection_type = inspection_type
        if vehicle_number is not None:
            self.vehicle_number = vehicle_number
        if adjustment is not None:
            self.adjustment = adjustment
        if cross_weight is not None:
            self.cross_weight = cross_weight
        if left_front is not None:
            self.left_front = left_front
        if left_rear is not None:
            self.left_rear = left_rear
        if left_side is not None:
            self.left_side = left_side
        if nose is not None:
            self.nose = nose
        if rear is not None:
            self.rear = rear
        if right_front is not None:
            self.right_front = right_front
        if right_rear is not None:
            self.right_rear = right_rear
        if right_side is not None:
            self.right_side = right_side
        if total_weight is not None:
            self.total_weight = total_weight
        if passed is not None:
            self.passed = passed

    @property
    def inspection_type(self):
        """Gets the inspection_type of this VehicleWeight.  # noqa: E501

        The type of inspection  # noqa: E501

        :return: The inspection_type of this VehicleWeight.  # noqa: E501
        :rtype: str
        """
        return self._inspection_type

    @inspection_type.setter
    def inspection_type(self, inspection_type):
        """Sets the inspection_type of this VehicleWeight.

        The type of inspection  # noqa: E501

        :param inspection_type: The inspection_type of this VehicleWeight.  # noqa: E501
        :type: str
        """

        self._inspection_type = inspection_type

    @property
    def vehicle_number(self):
        """Gets the vehicle_number of this VehicleWeight.  # noqa: E501

        The vehicle number inspected  # noqa: E501

        :return: The vehicle_number of this VehicleWeight.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_number

    @vehicle_number.setter
    def vehicle_number(self, vehicle_number):
        """Sets the vehicle_number of this VehicleWeight.

        The vehicle number inspected  # noqa: E501

        :param vehicle_number: The vehicle_number of this VehicleWeight.  # noqa: E501
        :type: str
        """

        self._vehicle_number = vehicle_number

    @property
    def adjustment(self):
        """Gets the adjustment of this VehicleWeight.  # noqa: E501

        The weight adjustment  # noqa: E501

        :return: The adjustment of this VehicleWeight.  # noqa: E501
        :rtype: int
        """
        return self._adjustment

    @adjustment.setter
    def adjustment(self, adjustment):
        """Sets the adjustment of this VehicleWeight.

        The weight adjustment  # noqa: E501

        :param adjustment: The adjustment of this VehicleWeight.  # noqa: E501
        :type: int
        """

        self._adjustment = adjustment

    @property
    def cross_weight(self):
        """Gets the cross_weight of this VehicleWeight.  # noqa: E501

        The cross weight of the vehicle  # noqa: E501

        :return: The cross_weight of this VehicleWeight.  # noqa: E501
        :rtype: int
        """
        return self._cross_weight

    @cross_weight.setter
    def cross_weight(self, cross_weight):
        """Sets the cross_weight of this VehicleWeight.

        The cross weight of the vehicle  # noqa: E501

        :param cross_weight: The cross_weight of this VehicleWeight.  # noqa: E501
        :type: int
        """

        self._cross_weight = cross_weight

    @property
    def left_front(self):
        """Gets the left_front of this VehicleWeight.  # noqa: E501

        The left front weight of the vehicle  # noqa: E501

        :return: The left_front of this VehicleWeight.  # noqa: E501
        :rtype: int
        """
        return self._left_front

    @left_front.setter
    def left_front(self, left_front):
        """Sets the left_front of this VehicleWeight.

        The left front weight of the vehicle  # noqa: E501

        :param left_front: The left_front of this VehicleWeight.  # noqa: E501
        :type: int
        """

        self._left_front = left_front

    @property
    def left_rear(self):
        """Gets the left_rear of this VehicleWeight.  # noqa: E501

        The left rear weight of the vehicle  # noqa: E501

        :return: The left_rear of this VehicleWeight.  # noqa: E501
        :rtype: int
        """
        return self._left_rear

    @left_rear.setter
    def left_rear(self, left_rear):
        """Sets the left_rear of this VehicleWeight.

        The left rear weight of the vehicle  # noqa: E501

        :param left_rear: The left_rear of this VehicleWeight.  # noqa: E501
        :type: int
        """

        self._left_rear = left_rear

    @property
    def left_side(self):
        """Gets the left_side of this VehicleWeight.  # noqa: E501

        The weight of the left side of the vehicle  # noqa: E501

        :return: The left_side of this VehicleWeight.  # noqa: E501
        :rtype: int
        """
        return self._left_side

    @left_side.setter
    def left_side(self, left_side):
        """Sets the left_side of this VehicleWeight.

        The weight of the left side of the vehicle  # noqa: E501

        :param left_side: The left_side of this VehicleWeight.  # noqa: E501
        :type: int
        """

        self._left_side = left_side

    @property
    def nose(self):
        """Gets the nose of this VehicleWeight.  # noqa: E501

        The nose weight of the vehicle  # noqa: E501

        :return: The nose of this VehicleWeight.  # noqa: E501
        :rtype: int
        """
        return self._nose

    @nose.setter
    def nose(self, nose):
        """Sets the nose of this VehicleWeight.

        The nose weight of the vehicle  # noqa: E501

        :param nose: The nose of this VehicleWeight.  # noqa: E501
        :type: int
        """

        self._nose = nose

    @property
    def rear(self):
        """Gets the rear of this VehicleWeight.  # noqa: E501

        The rear weight of the vehicle  # noqa: E501

        :return: The rear of this VehicleWeight.  # noqa: E501
        :rtype: int
        """
        return self._rear

    @rear.setter
    def rear(self, rear):
        """Sets the rear of this VehicleWeight.

        The rear weight of the vehicle  # noqa: E501

        :param rear: The rear of this VehicleWeight.  # noqa: E501
        :type: int
        """

        self._rear = rear

    @property
    def right_front(self):
        """Gets the right_front of this VehicleWeight.  # noqa: E501

        The right front weight of the vehicle  # noqa: E501

        :return: The right_front of this VehicleWeight.  # noqa: E501
        :rtype: int
        """
        return self._right_front

    @right_front.setter
    def right_front(self, right_front):
        """Sets the right_front of this VehicleWeight.

        The right front weight of the vehicle  # noqa: E501

        :param right_front: The right_front of this VehicleWeight.  # noqa: E501
        :type: int
        """

        self._right_front = right_front

    @property
    def right_rear(self):
        """Gets the right_rear of this VehicleWeight.  # noqa: E501

        The right rear weight of the vehicle  # noqa: E501

        :return: The right_rear of this VehicleWeight.  # noqa: E501
        :rtype: int
        """
        return self._right_rear

    @right_rear.setter
    def right_rear(self, right_rear):
        """Sets the right_rear of this VehicleWeight.

        The right rear weight of the vehicle  # noqa: E501

        :param right_rear: The right_rear of this VehicleWeight.  # noqa: E501
        :type: int
        """

        self._right_rear = right_rear

    @property
    def right_side(self):
        """Gets the right_side of this VehicleWeight.  # noqa: E501

        The weight of the right side of the vehicle  # noqa: E501

        :return: The right_side of this VehicleWeight.  # noqa: E501
        :rtype: int
        """
        return self._right_side

    @right_side.setter
    def right_side(self, right_side):
        """Sets the right_side of this VehicleWeight.

        The weight of the right side of the vehicle  # noqa: E501

        :param right_side: The right_side of this VehicleWeight.  # noqa: E501
        :type: int
        """

        self._right_side = right_side

    @property
    def total_weight(self):
        """Gets the total_weight of this VehicleWeight.  # noqa: E501

        The total weight of the vehicle  # noqa: E501

        :return: The total_weight of this VehicleWeight.  # noqa: E501
        :rtype: int
        """
        return self._total_weight

    @total_weight.setter
    def total_weight(self, total_weight):
        """Sets the total_weight of this VehicleWeight.

        The total weight of the vehicle  # noqa: E501

        :param total_weight: The total_weight of this VehicleWeight.  # noqa: E501
        :type: int
        """

        self._total_weight = total_weight

    @property
    def passed(self):
        """Gets the passed of this VehicleWeight.  # noqa: E501

        Whether or not is passed  # noqa: E501

        :return: The passed of this VehicleWeight.  # noqa: E501
        :rtype: bool
        """
        return self._passed

    @passed.setter
    def passed(self, passed):
        """Sets the passed of this VehicleWeight.

        Whether or not is passed  # noqa: E501

        :param passed: The passed of this VehicleWeight.  # noqa: E501
        :type: bool
        """

        self._passed = passed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VehicleWeight, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleWeight):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
